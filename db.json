{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/images/实际的请求.png","path":"images/实际的请求.png","modified":0,"renderable":0},{"_id":"source/images/授权图.png","path":"images/授权图.png","modified":0,"renderable":0},{"_id":"source/images/关系模型.png","path":"images/关系模型.png","modified":0,"renderable":0},{"_id":"source/images/架构.png","path":"images/架构.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1586829904665},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1586829904668},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1586829904667},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1586829904669},{"_id":"themes/landscape/_config.yml","hash":"00cae20862725275aa0a822bc31c6f22f669a986","modified":1586932471995},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1586829904750},{"_id":"source/images/实际的请求.png","hash":"8c8dc9bedb249c32fcbb9b84a9edb1d6b7354bed","modified":1587020200916},{"_id":"source/about/me.md","hash":"433111ff1e646d26c9d1e0a0053e35f0c6e8d058","modified":1586942818856},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1586829904673},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1586829904693},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1586829904690},{"_id":"source/_posts/hello-world.md","hash":"2ed9a6aacc8308a13701a3d8fd228c3420c0a945","modified":1586835157720},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1586829904691},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1586829904701},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1586829904695},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1586829904698},{"_id":"source/images/授权图.png","hash":"c53271422e6eec963cdb3a932e9fa7fc5e50d8db","modified":1587090474770},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1586829904696},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1586829904702},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1586829904705},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1586829904704},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1586829904703},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1586829904743},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1586829904749},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1586829904744},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1586829904754},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1586829904747},{"_id":"source/java/schedule.md","hash":"2b275b4ffc608149aa14c7dc64911392aef296ed","modified":1587966329315},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1586829904742},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1586829904750},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1586829904745},{"_id":"source/images/关系模型.png","hash":"ea5cc6af49fcfdebc8043110c4614dc7815fdb2c","modified":1587027123024},{"_id":"source/images/架构.png","hash":"7abeb879caae31427083894e67e82b91aaf27562","modified":1587034586532},{"_id":"source/_posts/about/me.md","hash":"a209e7b777b1a00358864423ac046e2981939922","modified":1586942970033},{"_id":"source/_posts/blockChain/blockChain.md","hash":"0285bc0b55f33614b77e413b8b41b6c9303de3bd","modified":1586951901906},{"_id":"source/_posts/java/IO-NIO.md","hash":"9f4aebc99a43f6872d9a3fc4ccdef2ef31384365","modified":1586938777778},{"_id":"source/_posts/java/collection.md","hash":"f0a913d70a308236a2d59a96010103d8fdc2de0e","modified":1586941670762},{"_id":"source/_posts/java/jdk8-function-lambda.md","hash":"b8fdd2b76e117b97be872b9ef398c8bfa1b9054a","modified":1586939116918},{"_id":"source/_posts/java/schedule.md","hash":"3b6e1fc4396e5bde2566e85bb7893f391f7e3410","modified":1587967845507},{"_id":"source/_posts/java/j2ee.md","hash":"1c27facd0ec5fcdc491ee3bb163407a2572890dc","modified":1586947033515},{"_id":"source/_posts/java/proxy.md","hash":"0ddf66131833d0878d5cb86ca7b05f7640befdea","modified":1586939377541},{"_id":"source/_posts/java/thread.md","hash":"db8e34ce7d3477474797a2c41d2fd3a9a3d01a7e","modified":1586938754135},{"_id":"source/_posts/linux/linux.md","hash":"dacbe04658220684c037efe958914c2bbe809c9a","modified":1586951755272},{"_id":"source/_posts/java/Java.md","hash":"7a6f7138d7f5bdcb7f8c79ab5543d93f7f26d67f","modified":1586938753895},{"_id":"source/_posts/algorithms/algorithms.md","hash":"5b23eea743e19506dadbc76867a29d871f79548d","modified":1586951830178},{"_id":"source/_posts/orm/orm.md","hash":"60329922683b54c87bd65dfadfb31c8bda23d390","modified":1586952090865},{"_id":"source/_posts/microservices/microservices.md","hash":"332ef5f527d40ed0e65b2dc54187e2b01b35eea7","modified":1586952043880},{"_id":"source/_posts/packageManager/packageManager.md","hash":"bf55ca08f17ef9c0cde5aac9cc4c2f0a4507c4f5","modified":1586952217449},{"_id":"source/_posts/java/jvm.md","hash":"549a127f6f56a63dcab2b12a0d813e7d64eaadf3","modified":1586947033471},{"_id":"source/_posts/project/project.md","hash":"009e2197d98cd54fa6bb918e569764b70dafe89f","modified":1586952272237},{"_id":"source/_posts/server/server.md","hash":"68b7bb76ec4e933140e2e0ab408c8712aea1b20b","modified":1586952308746},{"_id":"source/_posts/spring/spring.md","hash":"a96e0f8748f1e662f3e0c21ff2f8b3874cb3a3f4","modified":1586952376796},{"_id":"source/_posts/sql/sql.md","hash":"188c7b1a85b8d138e56971594b326265e7830619","modified":1586952346783},{"_id":"source/_posts/project/open-api.md","hash":"6967addd5a2ca677923541c7f1880d95bd72458c","modified":1587091968129},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1586829904713},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1586829904719},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1586829904721},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1586829904720},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1586829904712},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1586829904724},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1586829904723},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1586829904722},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1586829904718},{"_id":"source/_posts/middleware/middleware.md","hash":"2d5816d2192081a1a10f5f4454c897dbc3c0e5f2","modified":1586951991314},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1586829904734},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1586829904742},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1586829904739},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1586829904738},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1586829904740},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1586829904717},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1586829904741},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1586829904760},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1586829904805},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1586829904800},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1586829904781},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1586829904807},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1586829904806},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1586829904811},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1586829904809},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1586829904808},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1586829904823},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1586829904829},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1586829904825},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1586829904728},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1586829904727},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1586829904731},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1586829904733},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1586829904732},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1586829904729},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1586829904786},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1586829904787},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1586829904824},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1586829904765},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1586829904767},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1586829904769},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1586829904766},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1586829904768},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1586829904771},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1586829904772},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1586829904792},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1586829904773},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1586829904770},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1586829904774},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1586829904778},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1586829904779},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1586829904816},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1586829904820},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1586829904818},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1586829904819},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1586829904791},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1586829904817},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1586829904822},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1586829904789},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1586829904799},{"_id":"public/about/me.html","hash":"3521ee9c268b7e5f32512c991ffc3f3c74b810fd","modified":1587967886633},{"_id":"public/java/schedule.html","hash":"ba08388156c40cdc3bca2769bc944e13e0c17c07","modified":1587967886633},{"_id":"public/categories/区块链/index.html","hash":"46705633878491fbea4593888a21732019c5e0a4","modified":1587967886633},{"_id":"public/categories/区块链/blockChina/index.html","hash":"944056db01f8f9083fef667590296537bd9837ed","modified":1587967886633},{"_id":"public/categories/java/j2ee/index.html","hash":"db68bb2a3c41e6d6bfdd27de70daaffb5954d80c","modified":1587967886633},{"_id":"public/categories/java/IO-NIO/index.html","hash":"7f602f38cd6b5f27dd4c0c8bd69edb0e5c075586","modified":1587967886633},{"_id":"public/categories/java/proxy/index.html","hash":"24a4f84a74531668316d2f5465eaca6125369361","modified":1587967886633},{"_id":"public/categories/java/thread/index.html","hash":"51e46335968490b7a73b5c37026acb826aa62466","modified":1587967886633},{"_id":"public/categories/java/jdk8/index.html","hash":"905e08b4a664969bc9ca122d2f276505aa402997","modified":1587967886633},{"_id":"public/categories/linux/index.html","hash":"a688482576c1374eb9bc4d631424c6c42a5e7cd2","modified":1587967886633},{"_id":"public/categories/数据结构与算法/index.html","hash":"e645933c45a2bccb71e312ce23921fe5efdf373f","modified":1587967886633},{"_id":"public/categories/ORM/index.html","hash":"d9fdb6f4d1d2803264e8191bb5a437e7dcbb1604","modified":1587967886633},{"_id":"public/categories/java/collection/index.html","hash":"9897921b68f9abe7c4b946a344aad5ae98565f88","modified":1587967886633},{"_id":"public/categories/分布式与微服务/index.html","hash":"1e997d148e86e886a69d4c450033cfc87dc76a00","modified":1587967886633},{"_id":"public/categories/包管理/index.html","hash":"ede96d73cde987973b168dd58b2e6ffcf6e63209","modified":1587967886633},{"_id":"public/categories/java/jvm/index.html","hash":"7ec012cb7192ea46b902de23adab236f3134ed4e","modified":1587967886633},{"_id":"public/categories/服务器/index.html","hash":"a57a2ef99d5d4a0be47560c98be09a53124e1079","modified":1587967886633},{"_id":"public/categories/spring/index.html","hash":"020a765c05cf43db8ce2db8e9b1bacfb1832c405","modified":1587967886633},{"_id":"public/categories/数据库/index.html","hash":"321dc56a4de2a89f18b1401065e296dc9c18a4f0","modified":1587967886633},{"_id":"public/categories/中间件/index.html","hash":"5348e77ce62bdcddd07bbf2d9cee30661302ff29","modified":1587967886633},{"_id":"public/categories/linux/linux/index.html","hash":"f0922fb7c6d1841e320d5f37b25e91a00a308988","modified":1587967886633},{"_id":"public/categories/数据结构与算法/algorithms/index.html","hash":"a5614c89573b697f8278bbcc77f8af54621dc477","modified":1587967886633},{"_id":"public/categories/ORM/orm/index.html","hash":"7f8bdfd24328e7b682d77affafd052f80ec70a8c","modified":1587967886633},{"_id":"public/categories/分布式与微服务/microservices/index.html","hash":"d5f3d2f87d644d37759bf25b940734e895a6a76c","modified":1587967886633},{"_id":"public/categories/包管理/packageManager/index.html","hash":"61f23d237b7875b45ae7515a32757b3adbc7040f","modified":1587967886633},{"_id":"public/categories/项目/project/index.html","hash":"c1a0a0ff13dfde13bc58ae0efe293e0ddc4b2f67","modified":1587967886633},{"_id":"public/categories/服务器/server/index.html","hash":"71b7431006c5c329629d95de8c65ac998dcae51a","modified":1587967886633},{"_id":"public/categories/spring/spring/index.html","hash":"fdf70e8e1dd30611c268af56e5e48109a653ba09","modified":1587967886633},{"_id":"public/categories/数据库/sql/index.html","hash":"e925397044e8cd767959c942eaa8214126044db8","modified":1587967886633},{"_id":"public/categories/中间件/middleware/index.html","hash":"09a6c63d83124777ef0157fac2b8da6deff8f973","modified":1587967886633},{"_id":"public/categories/项目/Open-API/index.html","hash":"d21b729e4517bb41d1010b1af6ab974f3abdebd7","modified":1587967886633},{"_id":"public/categories/java/schedule/index.html","hash":"309551fdcd54a847e50f94d86c41bd7f332fc56f","modified":1587967886633},{"_id":"public/tags/区块链/index.html","hash":"1968b1c39c0699dc4a3a3a318d1c028c0e644ce2","modified":1587967886633},{"_id":"public/tags/io/index.html","hash":"1e14fc0f61679c144edffe4cf3a83c42c6a74c80","modified":1587967886633},{"_id":"public/tags/nio/index.html","hash":"2810ed1ae847bbbf4c20172de596f58f6bb16ae8","modified":1587967886633},{"_id":"public/tags/jdk8/index.html","hash":"04ad93d4c19896909b0bf23ace8035bf1081bedf","modified":1587967886633},{"_id":"public/tags/lambda/index.html","hash":"5f16e35e8ad3504e430868b4f4be3ef2e35a5fdb","modified":1587967886633},{"_id":"public/tags/function-函数式编程/index.html","hash":"91ef802c1ba3f64b6c53e37e5d9f8cffbccc859d","modified":1587967886633},{"_id":"public/tags/proxy/index.html","hash":"c43ba1413c87a80250749ecde5c32cc165642145","modified":1587967886633},{"_id":"public/tags/javassist/index.html","hash":"bcfd8729dfd84e627dcfb828efc9a1090ffdfef2","modified":1587967886633},{"_id":"public/tags/jdk-动态代理/index.html","hash":"e9fc6df2a9463adc6ecd3a5012c33024140b57ef","modified":1587967886633},{"_id":"public/tags/cglib-动态代理/index.html","hash":"e124ff4c5aa911f16a1f2c9721e8cc2789122535","modified":1587967886633},{"_id":"public/tags/thread/index.html","hash":"9d4469aa1c6c572e4bb34f4796aea478ba862c55","modified":1587967886633},{"_id":"public/tags/synchronized-lock/index.html","hash":"dd1f5c83d7bf336004f453f4c671dd7400ccfa62","modified":1587967886633},{"_id":"public/tags/ThreadPoolExecutor/index.html","hash":"5333b065a8fb44aafa092769f4356180adc65dda","modified":1587967886633},{"_id":"public/tags/fork-join/index.html","hash":"80936f55226f74eab50f8fcfe338b99f6190e72a","modified":1587967886633},{"_id":"public/tags/linux/index.html","hash":"b8c1af9f097f25130f6ef673c0c65b43dad6aca7","modified":1587967886633},{"_id":"public/tags/数据结构与算法/index.html","hash":"8cb1c53f762092f21c9ca0407929c8517b81f418","modified":1587967886633},{"_id":"public/tags/ORM/index.html","hash":"1f99c27242f36ef9a86075679fc45f809988ba19","modified":1587967886633},{"_id":"public/tags/分布式与微服务/index.html","hash":"e1173fdc2c7290c5d6ae83e84ae67bc450defd9b","modified":1587967886633},{"_id":"public/tags/包管理/index.html","hash":"40b8a6899fae4df800a428334dc20974cc3f0409","modified":1587967886633},{"_id":"public/tags/服务器/index.html","hash":"494816b1269db660a9e077f9de61c3ea5931f86e","modified":1587967886633},{"_id":"public/tags/spring/index.html","hash":"3e8506ae4da39e0398e4e4279db0e9bd9f72f654","modified":1587967886633},{"_id":"public/tags/数据库/index.html","hash":"860a28c40b05ee02785303accc8486ce0be17ec3","modified":1587967886633},{"_id":"public/tags/中间件/index.html","hash":"afcdbcfbd92f07454ec6be601f2b799579bfa8e1","modified":1587967886633},{"_id":"public/2020/04/27/java/schedule/index.html","hash":"fe90b4e0c6d7335f7f4bf89fed2cb5e6f982afc3","modified":1587967886633},{"_id":"public/2020/04/15/project/open-api/index.html","hash":"edb5f5bc8b58bc1e2c730e9eb61f06882cd2178e","modified":1587967886633},{"_id":"public/2020/04/15/spring/spring/index.html","hash":"514cd9f97c54b3d00791c6a6b951341770cd27da","modified":1587967886633},{"_id":"public/2020/04/15/sql/sql/index.html","hash":"73070abf7275aa76eff57331dcc1e29a1b38812d","modified":1587967886633},{"_id":"public/2020/04/15/server/server/index.html","hash":"2513fe07f8365dd84b16e2bae403e324a2dfb846","modified":1587967886633},{"_id":"public/2020/04/15/project/project/index.html","hash":"13dd317bf15cb13c02b086ea6ed98e5d4a2ea959","modified":1587967886633},{"_id":"public/2020/04/15/packageManager/packageManager/index.html","hash":"b1fd891eaa00342e7b46c2cb1aa96135f99b5f39","modified":1587967886633},{"_id":"public/2020/04/15/orm/orm/index.html","hash":"1d0bd909aa91aa36aec833e9c5c9d18b6a6300f0","modified":1587967886633},{"_id":"public/2020/04/15/microservices/microservices/index.html","hash":"d79cf6259a011772a87360060db47ae50c744c63","modified":1587967886633},{"_id":"public/2020/04/15/middleware/middleware/index.html","hash":"822dcf1294405568bb87893ff1fde9d411c9a2ad","modified":1587967886633},{"_id":"public/2020/04/15/blockChain/blockChain/index.html","hash":"c1ab747e6409e7de401e32bee994a21d42c9b7b9","modified":1587967886633},{"_id":"public/2020/04/15/algorithms/algorithms/index.html","hash":"0256121c4759ccedfa1a76ff6825318a37266227","modified":1587967886633},{"_id":"public/2020/04/15/linux/linux/index.html","hash":"47fb3fbe5c8f134afba75873b8632d076b0d0768","modified":1587967886633},{"_id":"public/2020/04/15/about/me/index.html","hash":"fc2b9f8e33bcb1e8cf836f8873b4ad08e2d14557","modified":1587967886633},{"_id":"public/2020/04/15/java/collection/index.html","hash":"fd64ef3584d2a1ae122edcc4c1c8215948d5770e","modified":1587967886633},{"_id":"public/2020/04/15/java/jvm/index.html","hash":"c91b93bdf01ed0faf08faec918fe5ca5a6e552a8","modified":1587967886633},{"_id":"public/2020/04/15/java/proxy/index.html","hash":"57e9e6f8a6241ab389412d439af4c91d6ccedd64","modified":1587967886633},{"_id":"public/2020/04/15/java/j2ee/index.html","hash":"c81f33d8caab322984c1f80d71f80ce9d16b3ee9","modified":1587967886633},{"_id":"public/2020/04/15/java/thread/index.html","hash":"5e65c3e43a79502cac28bb4adb3adbf4659b7798","modified":1587967886633},{"_id":"public/2020/04/15/java/jdk8-function-lambda/index.html","hash":"f2d12708ed57d95f71d63b962f4470b8a2f7927d","modified":1587967886633},{"_id":"public/2020/04/15/java/IO-NIO/index.html","hash":"7279227317b0343add3a2585453f055ab64be77b","modified":1587967886633},{"_id":"public/2020/04/15/java/Java/index.html","hash":"dcdc74d1da443fe8d92564520d81218ff2b03dde","modified":1587967886633},{"_id":"public/2020/04/14/hello-world/index.html","hash":"36673ea7e8c4057883772bc7868b2301cdf75708","modified":1587967886633},{"_id":"public/archives/index.html","hash":"68b977a2dd111436bfd1e492a195d634c549e93a","modified":1587967886633},{"_id":"public/archives/page/2/index.html","hash":"f36701f90f0834d7b03294919f73bc64df49ec4a","modified":1587967886633},{"_id":"public/archives/page/3/index.html","hash":"863c13a38a1615425c9c509416ba11113b5e9ec5","modified":1587967886633},{"_id":"public/archives/2020/index.html","hash":"12957cc8018ff657d7cd6f3b047e87814e06da1c","modified":1587967886633},{"_id":"public/archives/2020/page/2/index.html","hash":"6dece8926161aac926645cc1a176ebf7b386bf3d","modified":1587967886633},{"_id":"public/archives/2020/page/3/index.html","hash":"1155dcd5a28eb8d52ac564731a1b26fe047a4aeb","modified":1587967886633},{"_id":"public/archives/2020/04/index.html","hash":"54fe6c09e1cf51a998090366c63d255a5cc5b119","modified":1587967886633},{"_id":"public/archives/2020/04/page/2/index.html","hash":"06ac7bbb0f27207be5a349d4fce63b2d9a818b8c","modified":1587967886633},{"_id":"public/archives/2020/04/page/3/index.html","hash":"88520e2c7b4629958a33c64b0efdd31c1635ef8b","modified":1587967886633},{"_id":"public/categories/java/index.html","hash":"23e9f2f822d7143fe59dfde54ca5a4258e0b1fc2","modified":1587967886633},{"_id":"public/categories/项目/index.html","hash":"1c624a249b3359a0d31caa458343184f81923d04","modified":1587967886633},{"_id":"public/index.html","hash":"f4e152fe8e4cd090e9d4530f6422c7525a716731","modified":1587967886633},{"_id":"public/page/2/index.html","hash":"653d49dcca6aacd83cbce5ac5bafa10db87c3ba7","modified":1587967886633},{"_id":"public/page/3/index.html","hash":"5ff4bf0c09d760a3ee50c6c3580fa5919982972f","modified":1587967886633},{"_id":"public/tags/java/index.html","hash":"a1b5a6973762815319d52a2f6c34b4039eb2a803","modified":1587967886633},{"_id":"public/tags/schedule/index.html","hash":"cbe7e27acbd9955f365f673684f2669b6c17ccd4","modified":1587967886633},{"_id":"public/tags/项目/index.html","hash":"824b9a842f2fa262c59bfcac6ae719a6f8fe71aa","modified":1587967886633},{"_id":"public/images/授权图.png","hash":"c53271422e6eec963cdb3a932e9fa7fc5e50d8db","modified":1587967886633},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1587967886633},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1587967886633},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1587967886633},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1587967886633},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1587967886633},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1587967886633},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1587967886633},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1587967886633},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1587967886633},{"_id":"public/images/实际的请求.png","hash":"8c8dc9bedb249c32fcbb9b84a9edb1d6b7354bed","modified":1587967886633},{"_id":"public/images/架构.png","hash":"7abeb879caae31427083894e67e82b91aaf27562","modified":1587967886633},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1587967886633},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1587967886633},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1587967886633},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1587967886633},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1587967886633},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1587967886633},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1587967886633},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1587967886633},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1587967886633},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1587967886633},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1587967886633},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1587967886633},{"_id":"public/images/关系模型.png","hash":"ea5cc6af49fcfdebc8043110c4614dc7815fdb2c","modified":1587967886633},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1587967886633},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1587967886633}],"Category":[{"name":"区块链","_id":"ck9i32wpw0005rsja9kt7d9o8"},{"name":"java","_id":"ck9i32wq1000arsja9myn0se7"},{"name":"blockChina","parent":"ck9i32wpw0005rsja9kt7d9o8","_id":"ck9i32wq8000krsja06l5127u"},{"name":"j2ee","parent":"ck9i32wq1000arsja9myn0se7","_id":"ck9i32wqf000vrsja8umoal95"},{"name":"IO/NIO","parent":"ck9i32wq1000arsja9myn0se7","_id":"ck9i32wqj0013rsja97xj9ozx"},{"name":"proxy","parent":"ck9i32wq1000arsja9myn0se7","_id":"ck9i32wqs001arsja9n37a2bo"},{"name":"thread","parent":"ck9i32wq1000arsja9myn0se7","_id":"ck9i32wqu001grsjab3j41ghk"},{"name":"jdk8","parent":"ck9i32wq1000arsja9myn0se7","_id":"ck9i32wqw001mrsjad8ts104r"},{"name":"linux","_id":"ck9i32wqy001srsja4mikcjoa"},{"name":"数据结构与算法","_id":"ck9i32wqz001xrsja3j56cqxc"},{"name":"ORM","_id":"ck9i32wr00020rsjagcrpgw02"},{"name":"collection","parent":"ck9i32wq1000arsja9myn0se7","_id":"ck9i32wr00022rsjad4g0e7i5"},{"name":"分布式与微服务","_id":"ck9i32wr10026rsja0namdzjk"},{"name":"包管理","_id":"ck9i32wr2002brsjaf0ymhpul"},{"name":"jvm","parent":"ck9i32wq1000arsja9myn0se7","_id":"ck9i32wr3002frsja1v670lc2"},{"name":"项目","_id":"ck9i32wr3002hrsjaa8pt9v6q"},{"name":"服务器","_id":"ck9i32wr4002krsja2r0m7xv6"},{"name":"spring","_id":"ck9i32wr5002prsjag0yo6rv5"},{"name":"数据库","_id":"ck9i32wr7002trsja3wib3nsb"},{"name":"中间件","_id":"ck9i32wr8002xrsjadvdxbi95"},{"name":"linux","parent":"ck9i32wqy001srsja4mikcjoa","_id":"ck9i32wrb0032rsja69zyg1gd"},{"name":"algorithms","parent":"ck9i32wqz001xrsja3j56cqxc","_id":"ck9i32wrc0035rsjae8tje6hg"},{"name":"orm","parent":"ck9i32wr00020rsjagcrpgw02","_id":"ck9i32wrd0039rsja23sxf66m"},{"name":"microservices","parent":"ck9i32wr10026rsja0namdzjk","_id":"ck9i32wrf003ersjahc199cgr"},{"name":"packageManager","parent":"ck9i32wr2002brsjaf0ymhpul","_id":"ck9i32wrg003jrsja17go9ox9"},{"name":"project","parent":"ck9i32wr3002hrsjaa8pt9v6q","_id":"ck9i32wri003orsjaalsddffa"},{"name":"server","parent":"ck9i32wr4002krsja2r0m7xv6","_id":"ck9i32wrj003trsja6tur7ebl"},{"name":"spring","parent":"ck9i32wr5002prsjag0yo6rv5","_id":"ck9i32wrj003xrsja00iu19qw"},{"name":"sql","parent":"ck9i32wr7002trsja3wib3nsb","_id":"ck9i32wrk0040rsja98jpgvtk"},{"name":"middleware","parent":"ck9i32wr8002xrsjadvdxbi95","_id":"ck9i32wrl0043rsja7yt40asq"},{"name":"Open API","parent":"ck9i32wr3002hrsjaa8pt9v6q","_id":"ck9i32wrs004brsja2l7a7jx6"},{"name":"schedule","parent":"ck9i32wq1000arsja9myn0se7","_id":"ck9i32ws0004grsja97ef0k2h"}],"Data":[],"Page":[{"title":"About me","date":"2020-04-15T09:26:58.000Z","_content":"","source":"about/me.md","raw":"---\ntitle: About me\ndate: 2020-04-15 17:26:58\n---\n","updated":"2020-04-15T09:26:58.856Z","path":"about/me.html","comments":1,"layout":"page","_id":"ck9i32wog0000rsjadsofbe9y","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"schedule","date":"2020-04-27T05:45:29.000Z","_content":"","source":"java/schedule.md","raw":"---\ntitle: schedule\ndate: 2020-04-27 13:45:29\n---\n","updated":"2020-04-27T05:45:29.315Z","path":"java/schedule.html","comments":1,"layout":"page","_id":"ck9i32woq0002rsjacaak7lo4","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n## test\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n## test\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-04-14T02:05:04.657Z","updated":"2020-04-14T03:32:37.720Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wol0001rsja3p03fid1","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><h2 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><h2 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"blockChina","date":"2020-04-15T11:58:21.000Z","_content":"","source":"_posts/blockChain/blockChain.md","raw":"---\ntitle: blockChina\ntags:\n  - 区块链\ncategories:\n  - 区块链\n  - blockChina\ndate: 2020-04-15 19:58:21\n---\n","slug":"blockChain/blockChain","published":1,"updated":"2020-04-15T11:58:21.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wps0003rsjah9jqd23j","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"page","date":"2020-04-15T09:29:29.000Z","_content":"","source":"_posts/about/me.md","raw":"---\ntitle: page\ndate: 2020-04-15 17:29:29\ntags:\n---\n","slug":"about/me","published":1,"updated":"2020-04-15T09:29:30.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wpu0004rsjaeb9g5d44","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Java IO/NIO 对比","date":"2020-04-15T07:59:27.000Z","_content":"#### JAVA IO VS NIO\n* JDK 1.4 之前，java.io 包，面向流的I/O系统（字节流或者字符流）\n  * 系统一次处理一个字节\n  * 处理速度慢\n* JDK 1.4 提供，java.nio 包，面向块的I/O系统\n  * 系统一次处理一个块\n  * 处理速度快","source":"_posts/java/IO-NIO.md","raw":"---\ntitle: Java IO/NIO 对比\ndate: 2020-04-15 15:59:27\ntags:\n    - java\n    - io\n    - nio\ncategories:\n    - java\n    - IO/NIO\n---\n#### JAVA IO VS NIO\n* JDK 1.4 之前，java.io 包，面向流的I/O系统（字节流或者字符流）\n  * 系统一次处理一个字节\n  * 处理速度慢\n* JDK 1.4 提供，java.nio 包，面向块的I/O系统\n  * 系统一次处理一个块\n  * 处理速度快","slug":"java/IO-NIO","published":1,"updated":"2020-04-15T08:19:37.778Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wpy0007rsja8ezegksh","content":"<h4 id=\"JAVA-IO-VS-NIO\"><a href=\"#JAVA-IO-VS-NIO\" class=\"headerlink\" title=\"JAVA IO VS NIO\"></a>JAVA IO VS NIO</h4><ul>\n<li>JDK 1.4 之前，java.io 包，面向流的I/O系统（字节流或者字符流）<ul>\n<li>系统一次处理一个字节</li>\n<li>处理速度慢</li>\n</ul>\n</li>\n<li>JDK 1.4 提供，java.nio 包，面向块的I/O系统<ul>\n<li>系统一次处理一个块</li>\n<li>处理速度快</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"JAVA-IO-VS-NIO\"><a href=\"#JAVA-IO-VS-NIO\" class=\"headerlink\" title=\"JAVA IO VS NIO\"></a>JAVA IO VS NIO</h4><ul>\n<li>JDK 1.4 之前，java.io 包，面向流的I/O系统（字节流或者字符流）<ul>\n<li>系统一次处理一个字节</li>\n<li>处理速度慢</li>\n</ul>\n</li>\n<li>JDK 1.4 提供，java.nio 包，面向块的I/O系统<ul>\n<li>系统一次处理一个块</li>\n<li>处理速度快</li>\n</ul>\n</li>\n</ul>\n"},{"title":"jdk8 function lambda","date":"2020-04-15T08:09:14.000Z","_content":"","source":"_posts/java/jdk8-function-lambda.md","raw":"---\ntitle: jdk8 function lambda\ndate: 2020-04-15 16:09:14\ntags:\n    - java\n    - jdk8\n    - lambda\n    - function/函数式编程\ncategories:\n    - java\n    - jdk8\n---\n","slug":"java/jdk8-function-lambda","published":1,"updated":"2020-04-15T08:25:16.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wpz0008rsja67z1dc1i","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"java 容器","date":"2020-04-15T09:06:56.000Z","_content":"","source":"_posts/java/collection.md","raw":"---\ntitle: java 容器\ntags:\n  - java\ncategories:\n  - java\n  - collection\ndate: 2020-04-15 17:06:56\n---\n","slug":"java/collection","published":1,"updated":"2020-04-15T09:07:50.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wq00009rsja33rr1nm4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"j2ee","date":"2020-04-15T08:21:08.000Z","_content":"","source":"_posts/java/j2ee.md","raw":"---\ntitle: j2ee\ndate: 2020-04-15 16:21:08\ntags:\n    - java\ncategories:\n    - java\n    - j2ee\n---\n","slug":"java/j2ee","published":1,"updated":"2020-04-15T10:37:13.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wq2000drsjabuubeibf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"proxy","date":"2020-04-15T08:21:41.000Z","_content":"","source":"_posts/java/proxy.md","raw":"---\ntitle: proxy\ndate: 2020-04-15 16:21:41\ntags:\n    - java\n    - proxy\n    - javassist\n    - jdk 动态代理\n    - cglib 动态代理\ncategories:\n    - java\n    - proxy\n---\n","slug":"java/proxy","published":1,"updated":"2020-04-15T08:29:37.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wq3000ersja0t5f5u76","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Java 线程相关 线程池","date":"2020-04-15T08:14:40.000Z","_content":"","source":"_posts/java/thread.md","raw":"---\ntitle: Java 线程相关 线程池\ndate: 2020-04-15 16:14:40\ntags:\n    - java\n    - thread\n    - synchronized/lock\n    - ThreadPoolExecutor\n    - fork/join\n    - schedule\ncategories:\n    - java\n    - thread\n---\n","slug":"java/thread","published":1,"updated":"2020-04-15T08:19:14.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wq5000irsjab4ttcinv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"linux","date":"2020-04-15T11:55:55.000Z","_content":"","source":"_posts/linux/linux.md","raw":"---\ntitle: linux\ntags:\n  - linux\ncategories:\n  - linux\n  - linux\ndate: 2020-04-15 19:55:55\n---\n","slug":"linux/linux","published":1,"updated":"2020-04-15T11:55:55.272Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wq7000jrsjaanqpeg37","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Java","date":"2020-04-15T07:38:43.000Z","_content":"","source":"_posts/java/Java.md","raw":"---\ntitle: Java\ndate: 2020-04-15 15:38:43\ntags:\n    - java\ncategories:\n    - java\n---\n","slug":"java/Java","published":1,"updated":"2020-04-15T08:19:13.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wq9000mrsja3yfr9v3o","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"algorithms","date":"2020-04-15T11:57:09.000Z","_content":"","source":"_posts/algorithms/algorithms.md","raw":"---\ntitle: algorithms\ntags:\n  - 数据结构与算法\ncategories:\n  - 数据结构与算法\n  - algorithms\ndate: 2020-04-15 19:57:09\n---\n","slug":"algorithms/algorithms","published":1,"updated":"2020-04-15T11:57:10.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wqa000nrsja0scpe9v1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"orm","date":"2020-04-15T12:01:30.000Z","_content":"","source":"_posts/orm/orm.md","raw":"---\ntitle: orm\ntags:\n  - ORM\ncategories:\n  - ORM\n  - orm\ndate: 2020-04-15 20:01:30\n---\n","slug":"orm/orm","published":1,"updated":"2020-04-15T12:01:30.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wqc000rrsja3een0zs6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"microservices","date":"2020-04-15T12:00:43.000Z","_content":"","source":"_posts/microservices/microservices.md","raw":"---\ntitle: microservices\ntags:\n  - 分布式与微服务\ncategories:\n  - 分布式与微服务\n  - microservices\ndate: 2020-04-15 20:00:43\n---\n","slug":"microservices/microservices","published":1,"updated":"2020-04-15T12:00:43.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wqd000trsja997r01mz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"packageManager","date":"2020-04-15T12:03:37.000Z","_content":"","source":"_posts/packageManager/packageManager.md","raw":"---\ntitle: packageManager\ntags:\n  - 包管理\ncategories:\n  - 包管理\n  - packageManager\ndate: 2020-04-15 20:03:37\n---\n","slug":"packageManager/packageManager","published":1,"updated":"2020-04-15T12:03:37.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wqg000yrsja9bu37tqg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"jvm","date":"2020-04-15T08:24:15.000Z","_content":"","source":"_posts/java/jvm.md","raw":"---\ntitle: jvm\ndate: 2020-04-15 16:24:15\ntags:\n    - java\ncategories:\n    - java\n    - jvm\n---\n","slug":"java/jvm","published":1,"updated":"2020-04-15T10:37:13.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wqi0011rsjaejjj56zi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"project","date":"2020-04-15T12:04:32.000Z","_content":"","source":"_posts/project/project.md","raw":"---\ntitle: project\ntags:\n  - 项目\ncategories:\n  - 项目\n  - project\ndate: 2020-04-15 20:04:32\n---\n","slug":"project/project","published":1,"updated":"2020-04-15T12:04:32.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wqj0014rsjagkg84cng","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"server","date":"2020-04-15T12:05:08.000Z","_content":"","source":"_posts/server/server.md","raw":"---\ntitle: server\ntags:\n  - 服务器\ncategories:\n  - 服务器\n  - server\ndate: 2020-04-15 20:05:08\n---\n","slug":"server/server","published":1,"updated":"2020-04-15T12:05:08.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wqp0017rsja5wise7mp","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"spring","date":"2020-04-15T12:06:16.000Z","_content":"","source":"_posts/spring/spring.md","raw":"---\ntitle: spring\ntags:\n  - spring\ncategories:\n  - spring\n  - spring\ndate: 2020-04-15 20:06:16\n---\n","slug":"spring/spring","published":1,"updated":"2020-04-15T12:06:16.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wqr0019rsja6qa41yn8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"sql","date":"2020-04-15T12:05:46.000Z","_content":"","source":"_posts/sql/sql.md","raw":"---\ntitle: sql\ntags:\n  - 数据库\ncategories:\n  - 数据库\n  - sql\ndate: 2020-04-15 20:05:46\n---\n","slug":"sql/sql","published":1,"updated":"2020-04-15T12:05:46.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wqs001drsjag1mw8f90","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"middleware","date":"2020-04-15T11:59:51.000Z","_content":"","source":"_posts/middleware/middleware.md","raw":"---\ntitle: middleware\ntags:\n  - 中间件\ncategories:\n  - 中间件\n  - middleware\ndate: 2020-04-15 19:59:51\n---\n","slug":"middleware/middleware","published":1,"updated":"2020-04-15T11:59:51.314Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wqt001ersjahszyd76g","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Open API","date":"2020-04-15T12:16:19.000Z","_content":"\n#架构图\n### 架构类\n#### 框架上使用\n`spring`/`mybatis`/`undertow`  \n#### 服务治理使用 \n`dubbo`   \n#### 缓存服务使用\n`redis`（身份认证状态缓存，临时性字典数据缓存，提升效率）\n#### MQ\n`RocketMQ`（mq做业务解耦，流量削峰，业务驱动，回调通知队列，消息持久化和定时任务补偿保证数据不被丢失）\n#### 分布式锁服务\nzk\n#### webhook通知服务\nokhttp3、forkjoin框架、rocketMq队列、elasticJob补偿\n#### 流量控制\nnginx、lua、redis、mq\n#### 服务稳定性\nhystrix 熔断\n#### 模块划分\n    接口模块-----api\n        核心模块----core\n        管理端模块----manager\n        webhook回调通知模块----webhook --> 订阅event --> 消息letter生成 -->入库 -->生成待发送队列（两级队列：内存队列20w，rocketMQ消息队列；一个补偿任务elasticJob)-->\n\n   \n![架构](/images/架构.png)\n\n# Open API 介绍\n\nOpenAPI 项目是基于REST标准来设计的，为保证统一和安全，全局编码格式为UTF-8，全局使用https。我们的API具有可预测的面向资源的url，返回json编码的响应，并使用标准的HTTP响应代码、身份验证和请求动词。\n\n为了数据准确性和生产环境数据安全，建议在沙盒环境测试这些接口.\n\n# 版本控制\n\n当我们对API进行向后不兼容的更改时，我们会发布新版本。要使用的版本在URL中指定。当前版本是v1，比如:\n\n    https://api.itmarte.com/payments/v1/...\n\n# 授权认证\n\n在不同的对接场景下Open API存在两种认证方式（用户开发者和第三方应用开发者，通常情况下申请用户开发者），使用http头`Authorization`做认证：   \n![授权图](/images/授权图.png)\n### 用户开发者模式\n\n创建了用户开发者之后，会收到给您返回的`developerId`、`masterToken`（`masterToken`能行使用户所有权限，请您务必安全保管）和`LLP_RSA_PUB_KEY.pem`，身份认证格式如下:\n\n    Authorization: Basic &lt;&lt;Base64.encode(developerId:masterToken)&gt;&gt;\n\n### 第三方应用开发者模式\n\n创建第三方应用开发者之后，会收到`clientId`、`clientSecret`和`LLP_RSA_PUB_KEY.pem`，至于`accessToken`则需要通过OAuth2.0模式向有资源的用户申请，身份认证格式如下:\n\n    Authorization: Bearer &lt;&lt;accessToken&gt;&gt;\n\n# 请求安全\n\n为了请求安全防止重放攻击，要求所有请求都得有签名认证，在http头定义了`xxx-Signature`字段作为签名信息载体，`xxx-Signature`头文件中包含了请求包体和响应的epoch时间戳（是指格林威治时间1970年01月01日00时00分00秒起至现在的总秒数）例如：`xxx-Signature:t=&lt;&lt;epoch&gt;&gt;,v=&lt;&lt;signature&gt;&gt;`，一个请求的有效时间是5分钟。下面介绍下请求的签名格式：\n\n### 请求签名\n\n2. 对`HTTP请求方式`、`URI`、`请求epoch时间`（单位秒）、`请求包体`的数据按照一定顺序用字符串“&”做拼接后使用对接方的`RSA私钥`通过`SHA256WithRSA`算法做签名并用`Base64编码`，生成的签名字符串（`signature`）和`epoch`时间放入HTTP包头的`xxx-Signature`标签中，格式为：\n\n<!---->\n\n   \n    xxx-Signature:t=&lt;&lt;epoch&gt;&gt;,v=&lt;&lt;signature&gt;&gt;\n   \n\n**第一步:** 确定签名`payload`\n\n如下字段请用`&`一次连接\n\n- `HTTP_METHOD`: 对应实际接口的方法（统一用大写），如`POST`、`PUT`、`GET`、`DELETE`等；\n- `URI`: 请求的URI地址（除去host）.  例如`https://api.sandbox.itmarte.com/collections/v1/merchants`中`/collections/v1/merchants`为URI\n- `REQUEST_EPOCH`: 是指格林威治时间1970年01月01日00时00分00秒起至现在的总秒数,该值应与`t`值保持一致\n- `REQUEST_PAYLOAD`: 请求包体  `{\"currency\":\"USD\"}`\n- `QUERY_STRING`: 查询字段例如：`https://api.sandbox.itmarte.com/collections/v1/merchants?attr1=value1&attr2=value2`,其中`QUERY_STRING`=`attr1=value1&attr2=value2`格式化为`attr1%3Dvalue1%26attr2%3Dvalue2`\n\n `payload`示例:\n\n    POST&/collections/v1/merchants&19879234&{\"currency\":\"USD\"}&attr1%3Dvalue1%26attr2%3Dvalue2\n\n**第二部:** 准备 `xxx-Signature` 签名头\n\n你会用到以下内容:\n\n- REQUEST_EPOCH (Seconds elapsed since 1970/1/1 00:00:00 GMT as a string)\n- 连接字符串 `,`\n- payload（第一步的结果）\n- your_rsa_pri_key：你的RSA私钥\n\n<!---->\n\n    xxx-Signature: t=REQUEST_EPOCH,v=BASE64_ENCODE(SHA256WithRSA.sign(&lt;&lt;payload&gt;&gt;, &lt;&lt;your_rsa_pri_key&gt;&gt;))\n\n**请求示例**\n\n    POST /api/mkt/balance HTTP/1.1 \n    Host: api.itmarte.com \n    Content-Type: application/json \n    Authorization: Basic WTgzcHNkcFdqY3J0Vml5eHVveTNyWGp2OWpzMjV3aUs6WTgzcHNkcFdqY3J0Vml5eHVveTNyWGp2OWpzMjV3aUs= \n    xxx-Signature: t=1574130344,v=cJKgD/EpqNVnITR7yZ8BIev5j1E0ub0VbG4uGA69gR4T1FFc7NzqbiBoDEOBvkQtJXytQd7dY+WDo0Qm0c6gCnRHqIEyBen6SnBk/PjhIn7H93sHMyUEbesJqB6NAzOHA4uVj+8aTfREQWxKaizkDTT1dnrBUZ7KPxz4KKzRXtZ6tEh48HKsA5xqviedc+kpilaFbFSaoJmFj760TV8FB+mKCkZSrvX1Y+4x0bqTVBXAt2kE2Z8vCH16BDtlWGLZRSlWtZWyvpz6F0a/VWYVhoBEmgNFevnYDeAMGB6VEDBE1pZLMnhxfLfz6yu/p1pv1c2N2Yk5YSahQw4lLLiqQQ== \n    Accept: */* \n    Cache-Control: no-cache \n    Content-Length: 18 \n    Connection: keep-alive \n\n    {\"currency\":\"USD\"} \n\n### 请求结果签名验证\n\n-   若请求成功返回200，包体格式查看具体接口，对响应包体使用连连支付的RSA私钥用SHA256WithRSA做签名并用Base64编码，生成的签名字符串放入HTTP包头xxx-Signature标签中，格式为xxx-Signature: t = response_epoch, v = signature。\n    其中：\n- t=响应时间戳(格林威治时间1970年01月01日00时00分00秒起至现在的总秒数)\n- v=BASE64_ENCODE(SHA256WithRSA(RESPONSE_EPOCH&RESPONSE_BODY, LLPAY_RSA_PRIVATE_KEY))\n\n**第一步:** 确定 `payload`\n\n如下字段创建`payload`用 `&` 做连接\n\n- Response Timestamp: 响应时间戳(格林威治时间1970年01月01日00时00分00秒起至现在的总秒数)\n- Response Payload: 响应包体，指定为JSON字符串如： `{\"currency\":\"USD\"}`\n\n`payload`示例:\n\n    19879234&{\"currency\":\"USD\"}\n\n**第二部:** 使用连连的RSA公钥校验签名的有效性\n\n    SHA256WithRSA.verify(xxx-Signature, '19879234&{\" currency\":\"USD\"}',  LLPAY_RSA_PRIVATE_KEY)\n\n# 响应结果\n\n**成功返回结果示例**\n\n连连通过http状态码来判断请求的结果，一个成功的请求的http状态码为2XX，请求结果为相应的objects对象，例如:\n\n```\nHTTP/1.1 200 \nstatus: 200 \nContent-Type: application/json \nContent-Length: 61\nConnection: keep-alive \nxxx-Signature:t=1574130398,v=b0VbG4uGA69gR4T1FFc7NzqbiBoDEOBvkQtJXytQd7dY+WDo0QmgR4T1FFc7NzqbiBoDEOBvkQtJXytQpzMjV3aUs6R4T1FFc7NzqbiBoDEOBvWTgzcHNkcFdqY3J0Vml5eHVc6gCnRHqIEyBen6SnBk/PjhIn7H93sHMyUEbesJqB6NAzOHA4uVj+8aTfREQWxKaizkDTT1dnrBUZ7KPxz4KKzRXtZ6tEh48HKsA5xqWGLZRSlWtZWyvpz6F0a/VWYVhoBEmgNFevkE2Z8vCH16VEDBE1pZ6VEDBE1pZ6BDBE1pZ6VEDBE1DtlWGLnYviedc+kpilaFbFSaoJmFj76==\n\n{\"currency\":\"USD\",\"balance\":\"12.25\"}\n\n```\n\n#### Errors\n\n一个失败的请求会收到4XX类的http状态码表示已知错误内容（具体错误码API文档给出），5XX的状态码表示未知的错误类型：\n\n#### Attributes\n\n**_code_** _number_\n失败码类型，数字类型，用于快速定位错误类型\n\n**_message_** _string_\n失败描述\n\n**失败返回结果示例**\n\n    HTTP/1.1 400\n    status: 400\n    Date: Tue, 19 Nov 2019 02:26:38 GMT\n    Content-Type: application/json\n    Content-Length: 77\n    Connection: keep-alive\n\n    {\"code\":\"999995\",\"message\":\"[holderType] is invalid\"}\n\n### HTTP状态码一览表\n\n| CODE               | DESCRIPTION                |\n| ------------------ | -------------------------- |\n| 400                | 请求错误，例如：参数错误               |\n| 401                | 授权认证失败或者是签名认证失败            |\n| 403                | 请求未授权                      |\n| 404                | 资源未找到，这里的资源指的是实际的Objects对象 |\n| 500, 502, 503, 504 | 系统错误                       |\n\n# 请求幂等保证\n\n实际运行场景中，由于网络原因或者其他原因导致的网络中断是不可避免的，所以连连这边特意设计了请求幂等保证操作，所有的POST、PUT、DELETE请求都可以做幂等校验，幂等请求认证成功之后，会返回最初的请求结果（5XX未知异常类型的错误除外）。\n\n你需要在http头加入`Idempotency-Key`以便让系统失败你的幂等请求：\n\n    Idempotency-Key:&lt;&lt;unique id for client &gt;&gt;\n\n# Request IDs\n\n每个API请求都有一个关联的请求标识符。您可以响应头找到`Request-Id`下这个键值。\n\n# 字段命名规范\n\n连连所有的字段命名规范为驼峰式:\n\n    https://api...com/resource/?filterBy=\"filter\"\n\n    {\n      \"storeName\": \"My Store\",\n      \"kycStatus\": \"success\"\n    }\n\n# Webhook\n\n你可以配置webhook地址来接收连连这边的回调信息（`event`），具体的回调信息（`event`）在相应的接口中定义\n\n# 对象关系模型\n![对象关系模型](/images/关系模型.png)\n\n","source":"_posts/project/open-api.md","raw":"---\ntitle: Open API\ntags:\n  - 项目\ncategories:\n  - 项目\n  - Open API\ndate: 2020-04-15 20:16:19\n---\n\n#架构图\n### 架构类\n#### 框架上使用\n`spring`/`mybatis`/`undertow`  \n#### 服务治理使用 \n`dubbo`   \n#### 缓存服务使用\n`redis`（身份认证状态缓存，临时性字典数据缓存，提升效率）\n#### MQ\n`RocketMQ`（mq做业务解耦，流量削峰，业务驱动，回调通知队列，消息持久化和定时任务补偿保证数据不被丢失）\n#### 分布式锁服务\nzk\n#### webhook通知服务\nokhttp3、forkjoin框架、rocketMq队列、elasticJob补偿\n#### 流量控制\nnginx、lua、redis、mq\n#### 服务稳定性\nhystrix 熔断\n#### 模块划分\n    接口模块-----api\n        核心模块----core\n        管理端模块----manager\n        webhook回调通知模块----webhook --> 订阅event --> 消息letter生成 -->入库 -->生成待发送队列（两级队列：内存队列20w，rocketMQ消息队列；一个补偿任务elasticJob)-->\n\n   \n![架构](/images/架构.png)\n\n# Open API 介绍\n\nOpenAPI 项目是基于REST标准来设计的，为保证统一和安全，全局编码格式为UTF-8，全局使用https。我们的API具有可预测的面向资源的url，返回json编码的响应，并使用标准的HTTP响应代码、身份验证和请求动词。\n\n为了数据准确性和生产环境数据安全，建议在沙盒环境测试这些接口.\n\n# 版本控制\n\n当我们对API进行向后不兼容的更改时，我们会发布新版本。要使用的版本在URL中指定。当前版本是v1，比如:\n\n    https://api.itmarte.com/payments/v1/...\n\n# 授权认证\n\n在不同的对接场景下Open API存在两种认证方式（用户开发者和第三方应用开发者，通常情况下申请用户开发者），使用http头`Authorization`做认证：   \n![授权图](/images/授权图.png)\n### 用户开发者模式\n\n创建了用户开发者之后，会收到给您返回的`developerId`、`masterToken`（`masterToken`能行使用户所有权限，请您务必安全保管）和`LLP_RSA_PUB_KEY.pem`，身份认证格式如下:\n\n    Authorization: Basic &lt;&lt;Base64.encode(developerId:masterToken)&gt;&gt;\n\n### 第三方应用开发者模式\n\n创建第三方应用开发者之后，会收到`clientId`、`clientSecret`和`LLP_RSA_PUB_KEY.pem`，至于`accessToken`则需要通过OAuth2.0模式向有资源的用户申请，身份认证格式如下:\n\n    Authorization: Bearer &lt;&lt;accessToken&gt;&gt;\n\n# 请求安全\n\n为了请求安全防止重放攻击，要求所有请求都得有签名认证，在http头定义了`xxx-Signature`字段作为签名信息载体，`xxx-Signature`头文件中包含了请求包体和响应的epoch时间戳（是指格林威治时间1970年01月01日00时00分00秒起至现在的总秒数）例如：`xxx-Signature:t=&lt;&lt;epoch&gt;&gt;,v=&lt;&lt;signature&gt;&gt;`，一个请求的有效时间是5分钟。下面介绍下请求的签名格式：\n\n### 请求签名\n\n2. 对`HTTP请求方式`、`URI`、`请求epoch时间`（单位秒）、`请求包体`的数据按照一定顺序用字符串“&”做拼接后使用对接方的`RSA私钥`通过`SHA256WithRSA`算法做签名并用`Base64编码`，生成的签名字符串（`signature`）和`epoch`时间放入HTTP包头的`xxx-Signature`标签中，格式为：\n\n<!---->\n\n   \n    xxx-Signature:t=&lt;&lt;epoch&gt;&gt;,v=&lt;&lt;signature&gt;&gt;\n   \n\n**第一步:** 确定签名`payload`\n\n如下字段请用`&`一次连接\n\n- `HTTP_METHOD`: 对应实际接口的方法（统一用大写），如`POST`、`PUT`、`GET`、`DELETE`等；\n- `URI`: 请求的URI地址（除去host）.  例如`https://api.sandbox.itmarte.com/collections/v1/merchants`中`/collections/v1/merchants`为URI\n- `REQUEST_EPOCH`: 是指格林威治时间1970年01月01日00时00分00秒起至现在的总秒数,该值应与`t`值保持一致\n- `REQUEST_PAYLOAD`: 请求包体  `{\"currency\":\"USD\"}`\n- `QUERY_STRING`: 查询字段例如：`https://api.sandbox.itmarte.com/collections/v1/merchants?attr1=value1&attr2=value2`,其中`QUERY_STRING`=`attr1=value1&attr2=value2`格式化为`attr1%3Dvalue1%26attr2%3Dvalue2`\n\n `payload`示例:\n\n    POST&/collections/v1/merchants&19879234&{\"currency\":\"USD\"}&attr1%3Dvalue1%26attr2%3Dvalue2\n\n**第二部:** 准备 `xxx-Signature` 签名头\n\n你会用到以下内容:\n\n- REQUEST_EPOCH (Seconds elapsed since 1970/1/1 00:00:00 GMT as a string)\n- 连接字符串 `,`\n- payload（第一步的结果）\n- your_rsa_pri_key：你的RSA私钥\n\n<!---->\n\n    xxx-Signature: t=REQUEST_EPOCH,v=BASE64_ENCODE(SHA256WithRSA.sign(&lt;&lt;payload&gt;&gt;, &lt;&lt;your_rsa_pri_key&gt;&gt;))\n\n**请求示例**\n\n    POST /api/mkt/balance HTTP/1.1 \n    Host: api.itmarte.com \n    Content-Type: application/json \n    Authorization: Basic WTgzcHNkcFdqY3J0Vml5eHVveTNyWGp2OWpzMjV3aUs6WTgzcHNkcFdqY3J0Vml5eHVveTNyWGp2OWpzMjV3aUs= \n    xxx-Signature: t=1574130344,v=cJKgD/EpqNVnITR7yZ8BIev5j1E0ub0VbG4uGA69gR4T1FFc7NzqbiBoDEOBvkQtJXytQd7dY+WDo0Qm0c6gCnRHqIEyBen6SnBk/PjhIn7H93sHMyUEbesJqB6NAzOHA4uVj+8aTfREQWxKaizkDTT1dnrBUZ7KPxz4KKzRXtZ6tEh48HKsA5xqviedc+kpilaFbFSaoJmFj760TV8FB+mKCkZSrvX1Y+4x0bqTVBXAt2kE2Z8vCH16BDtlWGLZRSlWtZWyvpz6F0a/VWYVhoBEmgNFevnYDeAMGB6VEDBE1pZLMnhxfLfz6yu/p1pv1c2N2Yk5YSahQw4lLLiqQQ== \n    Accept: */* \n    Cache-Control: no-cache \n    Content-Length: 18 \n    Connection: keep-alive \n\n    {\"currency\":\"USD\"} \n\n### 请求结果签名验证\n\n-   若请求成功返回200，包体格式查看具体接口，对响应包体使用连连支付的RSA私钥用SHA256WithRSA做签名并用Base64编码，生成的签名字符串放入HTTP包头xxx-Signature标签中，格式为xxx-Signature: t = response_epoch, v = signature。\n    其中：\n- t=响应时间戳(格林威治时间1970年01月01日00时00分00秒起至现在的总秒数)\n- v=BASE64_ENCODE(SHA256WithRSA(RESPONSE_EPOCH&RESPONSE_BODY, LLPAY_RSA_PRIVATE_KEY))\n\n**第一步:** 确定 `payload`\n\n如下字段创建`payload`用 `&` 做连接\n\n- Response Timestamp: 响应时间戳(格林威治时间1970年01月01日00时00分00秒起至现在的总秒数)\n- Response Payload: 响应包体，指定为JSON字符串如： `{\"currency\":\"USD\"}`\n\n`payload`示例:\n\n    19879234&{\"currency\":\"USD\"}\n\n**第二部:** 使用连连的RSA公钥校验签名的有效性\n\n    SHA256WithRSA.verify(xxx-Signature, '19879234&{\" currency\":\"USD\"}',  LLPAY_RSA_PRIVATE_KEY)\n\n# 响应结果\n\n**成功返回结果示例**\n\n连连通过http状态码来判断请求的结果，一个成功的请求的http状态码为2XX，请求结果为相应的objects对象，例如:\n\n```\nHTTP/1.1 200 \nstatus: 200 \nContent-Type: application/json \nContent-Length: 61\nConnection: keep-alive \nxxx-Signature:t=1574130398,v=b0VbG4uGA69gR4T1FFc7NzqbiBoDEOBvkQtJXytQd7dY+WDo0QmgR4T1FFc7NzqbiBoDEOBvkQtJXytQpzMjV3aUs6R4T1FFc7NzqbiBoDEOBvWTgzcHNkcFdqY3J0Vml5eHVc6gCnRHqIEyBen6SnBk/PjhIn7H93sHMyUEbesJqB6NAzOHA4uVj+8aTfREQWxKaizkDTT1dnrBUZ7KPxz4KKzRXtZ6tEh48HKsA5xqWGLZRSlWtZWyvpz6F0a/VWYVhoBEmgNFevkE2Z8vCH16VEDBE1pZ6VEDBE1pZ6BDBE1pZ6VEDBE1DtlWGLnYviedc+kpilaFbFSaoJmFj76==\n\n{\"currency\":\"USD\",\"balance\":\"12.25\"}\n\n```\n\n#### Errors\n\n一个失败的请求会收到4XX类的http状态码表示已知错误内容（具体错误码API文档给出），5XX的状态码表示未知的错误类型：\n\n#### Attributes\n\n**_code_** _number_\n失败码类型，数字类型，用于快速定位错误类型\n\n**_message_** _string_\n失败描述\n\n**失败返回结果示例**\n\n    HTTP/1.1 400\n    status: 400\n    Date: Tue, 19 Nov 2019 02:26:38 GMT\n    Content-Type: application/json\n    Content-Length: 77\n    Connection: keep-alive\n\n    {\"code\":\"999995\",\"message\":\"[holderType] is invalid\"}\n\n### HTTP状态码一览表\n\n| CODE               | DESCRIPTION                |\n| ------------------ | -------------------------- |\n| 400                | 请求错误，例如：参数错误               |\n| 401                | 授权认证失败或者是签名认证失败            |\n| 403                | 请求未授权                      |\n| 404                | 资源未找到，这里的资源指的是实际的Objects对象 |\n| 500, 502, 503, 504 | 系统错误                       |\n\n# 请求幂等保证\n\n实际运行场景中，由于网络原因或者其他原因导致的网络中断是不可避免的，所以连连这边特意设计了请求幂等保证操作，所有的POST、PUT、DELETE请求都可以做幂等校验，幂等请求认证成功之后，会返回最初的请求结果（5XX未知异常类型的错误除外）。\n\n你需要在http头加入`Idempotency-Key`以便让系统失败你的幂等请求：\n\n    Idempotency-Key:&lt;&lt;unique id for client &gt;&gt;\n\n# Request IDs\n\n每个API请求都有一个关联的请求标识符。您可以响应头找到`Request-Id`下这个键值。\n\n# 字段命名规范\n\n连连所有的字段命名规范为驼峰式:\n\n    https://api...com/resource/?filterBy=\"filter\"\n\n    {\n      \"storeName\": \"My Store\",\n      \"kycStatus\": \"success\"\n    }\n\n# Webhook\n\n你可以配置webhook地址来接收连连这边的回调信息（`event`），具体的回调信息（`event`）在相应的接口中定义\n\n# 对象关系模型\n![对象关系模型](/images/关系模型.png)\n\n","slug":"project/open-api","published":1,"updated":"2020-04-17T02:52:48.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9i32wrn0049rsjaetzrg07b","content":"<p>#架构图</p>\n<h3 id=\"架构类\"><a href=\"#架构类\" class=\"headerlink\" title=\"架构类\"></a>架构类</h3><h4 id=\"框架上使用\"><a href=\"#框架上使用\" class=\"headerlink\" title=\"框架上使用\"></a>框架上使用</h4><p><code>spring</code>/<code>mybatis</code>/<code>undertow</code>  </p>\n<h4 id=\"服务治理使用\"><a href=\"#服务治理使用\" class=\"headerlink\" title=\"服务治理使用\"></a>服务治理使用</h4><p><code>dubbo</code>   </p>\n<h4 id=\"缓存服务使用\"><a href=\"#缓存服务使用\" class=\"headerlink\" title=\"缓存服务使用\"></a>缓存服务使用</h4><p><code>redis</code>（身份认证状态缓存，临时性字典数据缓存，提升效率）</p>\n<h4 id=\"MQ\"><a href=\"#MQ\" class=\"headerlink\" title=\"MQ\"></a>MQ</h4><p><code>RocketMQ</code>（mq做业务解耦，流量削峰，业务驱动，回调通知队列，消息持久化和定时任务补偿保证数据不被丢失）</p>\n<h4 id=\"分布式锁服务\"><a href=\"#分布式锁服务\" class=\"headerlink\" title=\"分布式锁服务\"></a>分布式锁服务</h4><p>zk</p>\n<h4 id=\"webhook通知服务\"><a href=\"#webhook通知服务\" class=\"headerlink\" title=\"webhook通知服务\"></a>webhook通知服务</h4><p>okhttp3、forkjoin框架、rocketMq队列、elasticJob补偿</p>\n<h4 id=\"流量控制\"><a href=\"#流量控制\" class=\"headerlink\" title=\"流量控制\"></a>流量控制</h4><p>nginx、lua、redis、mq</p>\n<h4 id=\"服务稳定性\"><a href=\"#服务稳定性\" class=\"headerlink\" title=\"服务稳定性\"></a>服务稳定性</h4><p>hystrix 熔断</p>\n<h4 id=\"模块划分\"><a href=\"#模块划分\" class=\"headerlink\" title=\"模块划分\"></a>模块划分</h4><pre><code>接口模块-----api\n    核心模块----core\n    管理端模块----manager\n    webhook回调通知模块----webhook --&gt; 订阅event --&gt; 消息letter生成 --&gt;入库 --&gt;生成待发送队列（两级队列：内存队列20w，rocketMQ消息队列；一个补偿任务elasticJob)--&gt;</code></pre><p><img src=\"/images/%E6%9E%B6%E6%9E%84.png\" alt=\"架构\"></p>\n<h1 id=\"Open-API-介绍\"><a href=\"#Open-API-介绍\" class=\"headerlink\" title=\"Open API 介绍\"></a>Open API 介绍</h1><p>OpenAPI 项目是基于REST标准来设计的，为保证统一和安全，全局编码格式为UTF-8，全局使用https。我们的API具有可预测的面向资源的url，返回json编码的响应，并使用标准的HTTP响应代码、身份验证和请求动词。</p>\n<p>为了数据准确性和生产环境数据安全，建议在沙盒环境测试这些接口.</p>\n<h1 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h1><p>当我们对API进行向后不兼容的更改时，我们会发布新版本。要使用的版本在URL中指定。当前版本是v1，比如:</p>\n<pre><code>https://api.itmarte.com/payments/v1/...</code></pre><h1 id=\"授权认证\"><a href=\"#授权认证\" class=\"headerlink\" title=\"授权认证\"></a>授权认证</h1><p>在不同的对接场景下Open API存在两种认证方式（用户开发者和第三方应用开发者，通常情况下申请用户开发者），使用http头<code>Authorization</code>做认证：<br><img src=\"/images/%E6%8E%88%E6%9D%83%E5%9B%BE.png\" alt=\"授权图\"></p>\n<h3 id=\"用户开发者模式\"><a href=\"#用户开发者模式\" class=\"headerlink\" title=\"用户开发者模式\"></a>用户开发者模式</h3><p>创建了用户开发者之后，会收到给您返回的<code>developerId</code>、<code>masterToken</code>（<code>masterToken</code>能行使用户所有权限，请您务必安全保管）和<code>LLP_RSA_PUB_KEY.pem</code>，身份认证格式如下:</p>\n<pre><code>Authorization: Basic &amp;lt;&amp;lt;Base64.encode(developerId:masterToken)&amp;gt;&amp;gt;</code></pre><h3 id=\"第三方应用开发者模式\"><a href=\"#第三方应用开发者模式\" class=\"headerlink\" title=\"第三方应用开发者模式\"></a>第三方应用开发者模式</h3><p>创建第三方应用开发者之后，会收到<code>clientId</code>、<code>clientSecret</code>和<code>LLP_RSA_PUB_KEY.pem</code>，至于<code>accessToken</code>则需要通过OAuth2.0模式向有资源的用户申请，身份认证格式如下:</p>\n<pre><code>Authorization: Bearer &amp;lt;&amp;lt;accessToken&amp;gt;&amp;gt;</code></pre><h1 id=\"请求安全\"><a href=\"#请求安全\" class=\"headerlink\" title=\"请求安全\"></a>请求安全</h1><p>为了请求安全防止重放攻击，要求所有请求都得有签名认证，在http头定义了<code>xxx-Signature</code>字段作为签名信息载体，<code>xxx-Signature</code>头文件中包含了请求包体和响应的epoch时间戳（是指格林威治时间1970年01月01日00时00分00秒起至现在的总秒数）例如：<code>xxx-Signature:t=&amp;lt;&amp;lt;epoch&amp;gt;&amp;gt;,v=&amp;lt;&amp;lt;signature&amp;gt;&amp;gt;</code>，一个请求的有效时间是5分钟。下面介绍下请求的签名格式：</p>\n<h3 id=\"请求签名\"><a href=\"#请求签名\" class=\"headerlink\" title=\"请求签名\"></a>请求签名</h3><ol start=\"2\">\n<li>对<code>HTTP请求方式</code>、<code>URI</code>、<code>请求epoch时间</code>（单位秒）、<code>请求包体</code>的数据按照一定顺序用字符串“&amp;”做拼接后使用对接方的<code>RSA私钥</code>通过<code>SHA256WithRSA</code>算法做签名并用<code>Base64编码</code>，生成的签名字符串（<code>signature</code>）和<code>epoch</code>时间放入HTTP包头的<code>xxx-Signature</code>标签中，格式为：</li>\n</ol>\n<!---->\n\n\n<pre><code>xxx-Signature:t=&amp;lt;&amp;lt;epoch&amp;gt;&amp;gt;,v=&amp;lt;&amp;lt;signature&amp;gt;&amp;gt;</code></pre><p><strong>第一步:</strong> 确定签名<code>payload</code></p>\n<p>如下字段请用<code>&amp;</code>一次连接</p>\n<ul>\n<li><p><code>HTTP_METHOD</code>: 对应实际接口的方法（统一用大写），如<code>POST</code>、<code>PUT</code>、<code>GET</code>、<code>DELETE</code>等；</p>\n</li>\n<li><p><code>URI</code>: 请求的URI地址（除去host）.  例如<code>https://api.sandbox.itmarte.com/collections/v1/merchants</code>中<code>/collections/v1/merchants</code>为URI</p>\n</li>\n<li><p><code>REQUEST_EPOCH</code>: 是指格林威治时间1970年01月01日00时00分00秒起至现在的总秒数,该值应与<code>t</code>值保持一致</p>\n</li>\n<li><p><code>REQUEST_PAYLOAD</code>: 请求包体  <code>{&quot;currency&quot;:&quot;USD&quot;}</code></p>\n</li>\n<li><p><code>QUERY_STRING</code>: 查询字段例如：<code>https://api.sandbox.itmarte.com/collections/v1/merchants?attr1=value1&amp;attr2=value2</code>,其中<code>QUERY_STRING</code>=<code>attr1=value1&amp;attr2=value2</code>格式化为<code>attr1%3Dvalue1%26attr2%3Dvalue2</code></p>\n<p><code>payload</code>示例:</p>\n<p>  POST&amp;/collections/v1/merchants&amp;19879234&amp;{“currency”:”USD”}&amp;attr1%3Dvalue1%26attr2%3Dvalue2</p>\n</li>\n</ul>\n<p><strong>第二部:</strong> 准备 <code>xxx-Signature</code> 签名头</p>\n<p>你会用到以下内容:</p>\n<ul>\n<li>REQUEST_EPOCH (Seconds elapsed since 1970/1/1 00:00:00 GMT as a string)</li>\n<li>连接字符串 <code>,</code></li>\n<li>payload（第一步的结果）</li>\n<li>your_rsa_pri_key：你的RSA私钥</li>\n</ul>\n<!---->\n\n<pre><code>xxx-Signature: t=REQUEST_EPOCH,v=BASE64_ENCODE(SHA256WithRSA.sign(&amp;lt;&amp;lt;payload&amp;gt;&amp;gt;, &amp;lt;&amp;lt;your_rsa_pri_key&amp;gt;&amp;gt;))</code></pre><p><strong>请求示例</strong></p>\n<pre><code>POST /api/mkt/balance HTTP/1.1 \nHost: api.itmarte.com \nContent-Type: application/json \nAuthorization: Basic WTgzcHNkcFdqY3J0Vml5eHVveTNyWGp2OWpzMjV3aUs6WTgzcHNkcFdqY3J0Vml5eHVveTNyWGp2OWpzMjV3aUs= \nxxx-Signature: t=1574130344,v=cJKgD/EpqNVnITR7yZ8BIev5j1E0ub0VbG4uGA69gR4T1FFc7NzqbiBoDEOBvkQtJXytQd7dY+WDo0Qm0c6gCnRHqIEyBen6SnBk/PjhIn7H93sHMyUEbesJqB6NAzOHA4uVj+8aTfREQWxKaizkDTT1dnrBUZ7KPxz4KKzRXtZ6tEh48HKsA5xqviedc+kpilaFbFSaoJmFj760TV8FB+mKCkZSrvX1Y+4x0bqTVBXAt2kE2Z8vCH16BDtlWGLZRSlWtZWyvpz6F0a/VWYVhoBEmgNFevnYDeAMGB6VEDBE1pZLMnhxfLfz6yu/p1pv1c2N2Yk5YSahQw4lLLiqQQ== \nAccept: */* \nCache-Control: no-cache \nContent-Length: 18 \nConnection: keep-alive \n\n{&quot;currency&quot;:&quot;USD&quot;} </code></pre><h3 id=\"请求结果签名验证\"><a href=\"#请求结果签名验证\" class=\"headerlink\" title=\"请求结果签名验证\"></a>请求结果签名验证</h3><ul>\n<li>若请求成功返回200，包体格式查看具体接口，对响应包体使用连连支付的RSA私钥用SHA256WithRSA做签名并用Base64编码，生成的签名字符串放入HTTP包头xxx-Signature标签中，格式为xxx-Signature: t = response_epoch, v = signature。<br>其中：</li>\n<li>t=响应时间戳(格林威治时间1970年01月01日00时00分00秒起至现在的总秒数)</li>\n<li>v=BASE64_ENCODE(SHA256WithRSA(RESPONSE_EPOCH&amp;RESPONSE_BODY, LLPAY_RSA_PRIVATE_KEY))</li>\n</ul>\n<p><strong>第一步:</strong> 确定 <code>payload</code></p>\n<p>如下字段创建<code>payload</code>用 <code>&amp;</code> 做连接</p>\n<ul>\n<li>Response Timestamp: 响应时间戳(格林威治时间1970年01月01日00时00分00秒起至现在的总秒数)</li>\n<li>Response Payload: 响应包体，指定为JSON字符串如： <code>{&quot;currency&quot;:&quot;USD&quot;}</code></li>\n</ul>\n<p><code>payload</code>示例:</p>\n<pre><code>19879234&amp;{&quot;currency&quot;:&quot;USD&quot;}</code></pre><p><strong>第二部:</strong> 使用连连的RSA公钥校验签名的有效性</p>\n<pre><code>SHA256WithRSA.verify(xxx-Signature, &apos;19879234&amp;{&quot; currency&quot;:&quot;USD&quot;}&apos;,  LLPAY_RSA_PRIVATE_KEY)</code></pre><h1 id=\"响应结果\"><a href=\"#响应结果\" class=\"headerlink\" title=\"响应结果\"></a>响应结果</h1><p><strong>成功返回结果示例</strong></p>\n<p>连连通过http状态码来判断请求的结果，一个成功的请求的http状态码为2XX，请求结果为相应的objects对象，例如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP&#x2F;1.1 200 </span><br><span class=\"line\">status: 200 </span><br><span class=\"line\">Content-Type: application&#x2F;json </span><br><span class=\"line\">Content-Length: 61</span><br><span class=\"line\">Connection: keep-alive </span><br><span class=\"line\">xxx-Signature:t&#x3D;1574130398,v&#x3D;b0VbG4uGA69gR4T1FFc7NzqbiBoDEOBvkQtJXytQd7dY+WDo0QmgR4T1FFc7NzqbiBoDEOBvkQtJXytQpzMjV3aUs6R4T1FFc7NzqbiBoDEOBvWTgzcHNkcFdqY3J0Vml5eHVc6gCnRHqIEyBen6SnBk&#x2F;PjhIn7H93sHMyUEbesJqB6NAzOHA4uVj+8aTfREQWxKaizkDTT1dnrBUZ7KPxz4KKzRXtZ6tEh48HKsA5xqWGLZRSlWtZWyvpz6F0a&#x2F;VWYVhoBEmgNFevkE2Z8vCH16VEDBE1pZ6VEDBE1pZ6BDBE1pZ6VEDBE1DtlWGLnYviedc+kpilaFbFSaoJmFj76&#x3D;&#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;currency&quot;:&quot;USD&quot;,&quot;balance&quot;:&quot;12.25&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h4><p>一个失败的请求会收到4XX类的http状态码表示已知错误内容（具体错误码API文档给出），5XX的状态码表示未知的错误类型：</p>\n<h4 id=\"Attributes\"><a href=\"#Attributes\" class=\"headerlink\" title=\"Attributes\"></a>Attributes</h4><p><strong><em>code</em></strong> <em>number</em><br>失败码类型，数字类型，用于快速定位错误类型</p>\n<p><strong><em>message</em></strong> <em>string</em><br>失败描述</p>\n<p><strong>失败返回结果示例</strong></p>\n<pre><code>HTTP/1.1 400\nstatus: 400\nDate: Tue, 19 Nov 2019 02:26:38 GMT\nContent-Type: application/json\nContent-Length: 77\nConnection: keep-alive\n\n{&quot;code&quot;:&quot;999995&quot;,&quot;message&quot;:&quot;[holderType] is invalid&quot;}</code></pre><h3 id=\"HTTP状态码一览表\"><a href=\"#HTTP状态码一览表\" class=\"headerlink\" title=\"HTTP状态码一览表\"></a>HTTP状态码一览表</h3><table>\n<thead>\n<tr>\n<th>CODE</th>\n<th>DESCRIPTION</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>400</td>\n<td>请求错误，例如：参数错误</td>\n</tr>\n<tr>\n<td>401</td>\n<td>授权认证失败或者是签名认证失败</td>\n</tr>\n<tr>\n<td>403</td>\n<td>请求未授权</td>\n</tr>\n<tr>\n<td>404</td>\n<td>资源未找到，这里的资源指的是实际的Objects对象</td>\n</tr>\n<tr>\n<td>500, 502, 503, 504</td>\n<td>系统错误</td>\n</tr>\n</tbody></table>\n<h1 id=\"请求幂等保证\"><a href=\"#请求幂等保证\" class=\"headerlink\" title=\"请求幂等保证\"></a>请求幂等保证</h1><p>实际运行场景中，由于网络原因或者其他原因导致的网络中断是不可避免的，所以连连这边特意设计了请求幂等保证操作，所有的POST、PUT、DELETE请求都可以做幂等校验，幂等请求认证成功之后，会返回最初的请求结果（5XX未知异常类型的错误除外）。</p>\n<p>你需要在http头加入<code>Idempotency-Key</code>以便让系统失败你的幂等请求：</p>\n<pre><code>Idempotency-Key:&amp;lt;&amp;lt;unique id for client &amp;gt;&amp;gt;</code></pre><h1 id=\"Request-IDs\"><a href=\"#Request-IDs\" class=\"headerlink\" title=\"Request IDs\"></a>Request IDs</h1><p>每个API请求都有一个关联的请求标识符。您可以响应头找到<code>Request-Id</code>下这个键值。</p>\n<h1 id=\"字段命名规范\"><a href=\"#字段命名规范\" class=\"headerlink\" title=\"字段命名规范\"></a>字段命名规范</h1><p>连连所有的字段命名规范为驼峰式:</p>\n<pre><code>https://api...com/resource/?filterBy=&quot;filter&quot;\n\n{\n  &quot;storeName&quot;: &quot;My Store&quot;,\n  &quot;kycStatus&quot;: &quot;success&quot;\n}</code></pre><h1 id=\"Webhook\"><a href=\"#Webhook\" class=\"headerlink\" title=\"Webhook\"></a>Webhook</h1><p>你可以配置webhook地址来接收连连这边的回调信息（<code>event</code>），具体的回调信息（<code>event</code>）在相应的接口中定义</p>\n<h1 id=\"对象关系模型\"><a href=\"#对象关系模型\" class=\"headerlink\" title=\"对象关系模型\"></a>对象关系模型</h1><p><img src=\"/images/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B.png\" alt=\"对象关系模型\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>#架构图</p>\n<h3 id=\"架构类\"><a href=\"#架构类\" class=\"headerlink\" title=\"架构类\"></a>架构类</h3><h4 id=\"框架上使用\"><a href=\"#框架上使用\" class=\"headerlink\" title=\"框架上使用\"></a>框架上使用</h4><p><code>spring</code>/<code>mybatis</code>/<code>undertow</code>  </p>\n<h4 id=\"服务治理使用\"><a href=\"#服务治理使用\" class=\"headerlink\" title=\"服务治理使用\"></a>服务治理使用</h4><p><code>dubbo</code>   </p>\n<h4 id=\"缓存服务使用\"><a href=\"#缓存服务使用\" class=\"headerlink\" title=\"缓存服务使用\"></a>缓存服务使用</h4><p><code>redis</code>（身份认证状态缓存，临时性字典数据缓存，提升效率）</p>\n<h4 id=\"MQ\"><a href=\"#MQ\" class=\"headerlink\" title=\"MQ\"></a>MQ</h4><p><code>RocketMQ</code>（mq做业务解耦，流量削峰，业务驱动，回调通知队列，消息持久化和定时任务补偿保证数据不被丢失）</p>\n<h4 id=\"分布式锁服务\"><a href=\"#分布式锁服务\" class=\"headerlink\" title=\"分布式锁服务\"></a>分布式锁服务</h4><p>zk</p>\n<h4 id=\"webhook通知服务\"><a href=\"#webhook通知服务\" class=\"headerlink\" title=\"webhook通知服务\"></a>webhook通知服务</h4><p>okhttp3、forkjoin框架、rocketMq队列、elasticJob补偿</p>\n<h4 id=\"流量控制\"><a href=\"#流量控制\" class=\"headerlink\" title=\"流量控制\"></a>流量控制</h4><p>nginx、lua、redis、mq</p>\n<h4 id=\"服务稳定性\"><a href=\"#服务稳定性\" class=\"headerlink\" title=\"服务稳定性\"></a>服务稳定性</h4><p>hystrix 熔断</p>\n<h4 id=\"模块划分\"><a href=\"#模块划分\" class=\"headerlink\" title=\"模块划分\"></a>模块划分</h4><pre><code>接口模块-----api\n    核心模块----core\n    管理端模块----manager\n    webhook回调通知模块----webhook --&gt; 订阅event --&gt; 消息letter生成 --&gt;入库 --&gt;生成待发送队列（两级队列：内存队列20w，rocketMQ消息队列；一个补偿任务elasticJob)--&gt;</code></pre><p><img src=\"/images/%E6%9E%B6%E6%9E%84.png\" alt=\"架构\"></p>\n<h1 id=\"Open-API-介绍\"><a href=\"#Open-API-介绍\" class=\"headerlink\" title=\"Open API 介绍\"></a>Open API 介绍</h1><p>OpenAPI 项目是基于REST标准来设计的，为保证统一和安全，全局编码格式为UTF-8，全局使用https。我们的API具有可预测的面向资源的url，返回json编码的响应，并使用标准的HTTP响应代码、身份验证和请求动词。</p>\n<p>为了数据准确性和生产环境数据安全，建议在沙盒环境测试这些接口.</p>\n<h1 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h1><p>当我们对API进行向后不兼容的更改时，我们会发布新版本。要使用的版本在URL中指定。当前版本是v1，比如:</p>\n<pre><code>https://api.itmarte.com/payments/v1/...</code></pre><h1 id=\"授权认证\"><a href=\"#授权认证\" class=\"headerlink\" title=\"授权认证\"></a>授权认证</h1><p>在不同的对接场景下Open API存在两种认证方式（用户开发者和第三方应用开发者，通常情况下申请用户开发者），使用http头<code>Authorization</code>做认证：<br><img src=\"/images/%E6%8E%88%E6%9D%83%E5%9B%BE.png\" alt=\"授权图\"></p>\n<h3 id=\"用户开发者模式\"><a href=\"#用户开发者模式\" class=\"headerlink\" title=\"用户开发者模式\"></a>用户开发者模式</h3><p>创建了用户开发者之后，会收到给您返回的<code>developerId</code>、<code>masterToken</code>（<code>masterToken</code>能行使用户所有权限，请您务必安全保管）和<code>LLP_RSA_PUB_KEY.pem</code>，身份认证格式如下:</p>\n<pre><code>Authorization: Basic &amp;lt;&amp;lt;Base64.encode(developerId:masterToken)&amp;gt;&amp;gt;</code></pre><h3 id=\"第三方应用开发者模式\"><a href=\"#第三方应用开发者模式\" class=\"headerlink\" title=\"第三方应用开发者模式\"></a>第三方应用开发者模式</h3><p>创建第三方应用开发者之后，会收到<code>clientId</code>、<code>clientSecret</code>和<code>LLP_RSA_PUB_KEY.pem</code>，至于<code>accessToken</code>则需要通过OAuth2.0模式向有资源的用户申请，身份认证格式如下:</p>\n<pre><code>Authorization: Bearer &amp;lt;&amp;lt;accessToken&amp;gt;&amp;gt;</code></pre><h1 id=\"请求安全\"><a href=\"#请求安全\" class=\"headerlink\" title=\"请求安全\"></a>请求安全</h1><p>为了请求安全防止重放攻击，要求所有请求都得有签名认证，在http头定义了<code>xxx-Signature</code>字段作为签名信息载体，<code>xxx-Signature</code>头文件中包含了请求包体和响应的epoch时间戳（是指格林威治时间1970年01月01日00时00分00秒起至现在的总秒数）例如：<code>xxx-Signature:t=&amp;lt;&amp;lt;epoch&amp;gt;&amp;gt;,v=&amp;lt;&amp;lt;signature&amp;gt;&amp;gt;</code>，一个请求的有效时间是5分钟。下面介绍下请求的签名格式：</p>\n<h3 id=\"请求签名\"><a href=\"#请求签名\" class=\"headerlink\" title=\"请求签名\"></a>请求签名</h3><ol start=\"2\">\n<li>对<code>HTTP请求方式</code>、<code>URI</code>、<code>请求epoch时间</code>（单位秒）、<code>请求包体</code>的数据按照一定顺序用字符串“&amp;”做拼接后使用对接方的<code>RSA私钥</code>通过<code>SHA256WithRSA</code>算法做签名并用<code>Base64编码</code>，生成的签名字符串（<code>signature</code>）和<code>epoch</code>时间放入HTTP包头的<code>xxx-Signature</code>标签中，格式为：</li>\n</ol>\n<!---->\n\n\n<pre><code>xxx-Signature:t=&amp;lt;&amp;lt;epoch&amp;gt;&amp;gt;,v=&amp;lt;&amp;lt;signature&amp;gt;&amp;gt;</code></pre><p><strong>第一步:</strong> 确定签名<code>payload</code></p>\n<p>如下字段请用<code>&amp;</code>一次连接</p>\n<ul>\n<li><p><code>HTTP_METHOD</code>: 对应实际接口的方法（统一用大写），如<code>POST</code>、<code>PUT</code>、<code>GET</code>、<code>DELETE</code>等；</p>\n</li>\n<li><p><code>URI</code>: 请求的URI地址（除去host）.  例如<code>https://api.sandbox.itmarte.com/collections/v1/merchants</code>中<code>/collections/v1/merchants</code>为URI</p>\n</li>\n<li><p><code>REQUEST_EPOCH</code>: 是指格林威治时间1970年01月01日00时00分00秒起至现在的总秒数,该值应与<code>t</code>值保持一致</p>\n</li>\n<li><p><code>REQUEST_PAYLOAD</code>: 请求包体  <code>{&quot;currency&quot;:&quot;USD&quot;}</code></p>\n</li>\n<li><p><code>QUERY_STRING</code>: 查询字段例如：<code>https://api.sandbox.itmarte.com/collections/v1/merchants?attr1=value1&amp;attr2=value2</code>,其中<code>QUERY_STRING</code>=<code>attr1=value1&amp;attr2=value2</code>格式化为<code>attr1%3Dvalue1%26attr2%3Dvalue2</code></p>\n<p><code>payload</code>示例:</p>\n<p>  POST&amp;/collections/v1/merchants&amp;19879234&amp;{“currency”:”USD”}&amp;attr1%3Dvalue1%26attr2%3Dvalue2</p>\n</li>\n</ul>\n<p><strong>第二部:</strong> 准备 <code>xxx-Signature</code> 签名头</p>\n<p>你会用到以下内容:</p>\n<ul>\n<li>REQUEST_EPOCH (Seconds elapsed since 1970/1/1 00:00:00 GMT as a string)</li>\n<li>连接字符串 <code>,</code></li>\n<li>payload（第一步的结果）</li>\n<li>your_rsa_pri_key：你的RSA私钥</li>\n</ul>\n<!---->\n\n<pre><code>xxx-Signature: t=REQUEST_EPOCH,v=BASE64_ENCODE(SHA256WithRSA.sign(&amp;lt;&amp;lt;payload&amp;gt;&amp;gt;, &amp;lt;&amp;lt;your_rsa_pri_key&amp;gt;&amp;gt;))</code></pre><p><strong>请求示例</strong></p>\n<pre><code>POST /api/mkt/balance HTTP/1.1 \nHost: api.itmarte.com \nContent-Type: application/json \nAuthorization: Basic WTgzcHNkcFdqY3J0Vml5eHVveTNyWGp2OWpzMjV3aUs6WTgzcHNkcFdqY3J0Vml5eHVveTNyWGp2OWpzMjV3aUs= \nxxx-Signature: t=1574130344,v=cJKgD/EpqNVnITR7yZ8BIev5j1E0ub0VbG4uGA69gR4T1FFc7NzqbiBoDEOBvkQtJXytQd7dY+WDo0Qm0c6gCnRHqIEyBen6SnBk/PjhIn7H93sHMyUEbesJqB6NAzOHA4uVj+8aTfREQWxKaizkDTT1dnrBUZ7KPxz4KKzRXtZ6tEh48HKsA5xqviedc+kpilaFbFSaoJmFj760TV8FB+mKCkZSrvX1Y+4x0bqTVBXAt2kE2Z8vCH16BDtlWGLZRSlWtZWyvpz6F0a/VWYVhoBEmgNFevnYDeAMGB6VEDBE1pZLMnhxfLfz6yu/p1pv1c2N2Yk5YSahQw4lLLiqQQ== \nAccept: */* \nCache-Control: no-cache \nContent-Length: 18 \nConnection: keep-alive \n\n{&quot;currency&quot;:&quot;USD&quot;} </code></pre><h3 id=\"请求结果签名验证\"><a href=\"#请求结果签名验证\" class=\"headerlink\" title=\"请求结果签名验证\"></a>请求结果签名验证</h3><ul>\n<li>若请求成功返回200，包体格式查看具体接口，对响应包体使用连连支付的RSA私钥用SHA256WithRSA做签名并用Base64编码，生成的签名字符串放入HTTP包头xxx-Signature标签中，格式为xxx-Signature: t = response_epoch, v = signature。<br>其中：</li>\n<li>t=响应时间戳(格林威治时间1970年01月01日00时00分00秒起至现在的总秒数)</li>\n<li>v=BASE64_ENCODE(SHA256WithRSA(RESPONSE_EPOCH&amp;RESPONSE_BODY, LLPAY_RSA_PRIVATE_KEY))</li>\n</ul>\n<p><strong>第一步:</strong> 确定 <code>payload</code></p>\n<p>如下字段创建<code>payload</code>用 <code>&amp;</code> 做连接</p>\n<ul>\n<li>Response Timestamp: 响应时间戳(格林威治时间1970年01月01日00时00分00秒起至现在的总秒数)</li>\n<li>Response Payload: 响应包体，指定为JSON字符串如： <code>{&quot;currency&quot;:&quot;USD&quot;}</code></li>\n</ul>\n<p><code>payload</code>示例:</p>\n<pre><code>19879234&amp;{&quot;currency&quot;:&quot;USD&quot;}</code></pre><p><strong>第二部:</strong> 使用连连的RSA公钥校验签名的有效性</p>\n<pre><code>SHA256WithRSA.verify(xxx-Signature, &apos;19879234&amp;{&quot; currency&quot;:&quot;USD&quot;}&apos;,  LLPAY_RSA_PRIVATE_KEY)</code></pre><h1 id=\"响应结果\"><a href=\"#响应结果\" class=\"headerlink\" title=\"响应结果\"></a>响应结果</h1><p><strong>成功返回结果示例</strong></p>\n<p>连连通过http状态码来判断请求的结果，一个成功的请求的http状态码为2XX，请求结果为相应的objects对象，例如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP&#x2F;1.1 200 </span><br><span class=\"line\">status: 200 </span><br><span class=\"line\">Content-Type: application&#x2F;json </span><br><span class=\"line\">Content-Length: 61</span><br><span class=\"line\">Connection: keep-alive </span><br><span class=\"line\">xxx-Signature:t&#x3D;1574130398,v&#x3D;b0VbG4uGA69gR4T1FFc7NzqbiBoDEOBvkQtJXytQd7dY+WDo0QmgR4T1FFc7NzqbiBoDEOBvkQtJXytQpzMjV3aUs6R4T1FFc7NzqbiBoDEOBvWTgzcHNkcFdqY3J0Vml5eHVc6gCnRHqIEyBen6SnBk&#x2F;PjhIn7H93sHMyUEbesJqB6NAzOHA4uVj+8aTfREQWxKaizkDTT1dnrBUZ7KPxz4KKzRXtZ6tEh48HKsA5xqWGLZRSlWtZWyvpz6F0a&#x2F;VWYVhoBEmgNFevkE2Z8vCH16VEDBE1pZ6VEDBE1pZ6BDBE1pZ6VEDBE1DtlWGLnYviedc+kpilaFbFSaoJmFj76&#x3D;&#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;currency&quot;:&quot;USD&quot;,&quot;balance&quot;:&quot;12.25&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h4><p>一个失败的请求会收到4XX类的http状态码表示已知错误内容（具体错误码API文档给出），5XX的状态码表示未知的错误类型：</p>\n<h4 id=\"Attributes\"><a href=\"#Attributes\" class=\"headerlink\" title=\"Attributes\"></a>Attributes</h4><p><strong><em>code</em></strong> <em>number</em><br>失败码类型，数字类型，用于快速定位错误类型</p>\n<p><strong><em>message</em></strong> <em>string</em><br>失败描述</p>\n<p><strong>失败返回结果示例</strong></p>\n<pre><code>HTTP/1.1 400\nstatus: 400\nDate: Tue, 19 Nov 2019 02:26:38 GMT\nContent-Type: application/json\nContent-Length: 77\nConnection: keep-alive\n\n{&quot;code&quot;:&quot;999995&quot;,&quot;message&quot;:&quot;[holderType] is invalid&quot;}</code></pre><h3 id=\"HTTP状态码一览表\"><a href=\"#HTTP状态码一览表\" class=\"headerlink\" title=\"HTTP状态码一览表\"></a>HTTP状态码一览表</h3><table>\n<thead>\n<tr>\n<th>CODE</th>\n<th>DESCRIPTION</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>400</td>\n<td>请求错误，例如：参数错误</td>\n</tr>\n<tr>\n<td>401</td>\n<td>授权认证失败或者是签名认证失败</td>\n</tr>\n<tr>\n<td>403</td>\n<td>请求未授权</td>\n</tr>\n<tr>\n<td>404</td>\n<td>资源未找到，这里的资源指的是实际的Objects对象</td>\n</tr>\n<tr>\n<td>500, 502, 503, 504</td>\n<td>系统错误</td>\n</tr>\n</tbody></table>\n<h1 id=\"请求幂等保证\"><a href=\"#请求幂等保证\" class=\"headerlink\" title=\"请求幂等保证\"></a>请求幂等保证</h1><p>实际运行场景中，由于网络原因或者其他原因导致的网络中断是不可避免的，所以连连这边特意设计了请求幂等保证操作，所有的POST、PUT、DELETE请求都可以做幂等校验，幂等请求认证成功之后，会返回最初的请求结果（5XX未知异常类型的错误除外）。</p>\n<p>你需要在http头加入<code>Idempotency-Key</code>以便让系统失败你的幂等请求：</p>\n<pre><code>Idempotency-Key:&amp;lt;&amp;lt;unique id for client &amp;gt;&amp;gt;</code></pre><h1 id=\"Request-IDs\"><a href=\"#Request-IDs\" class=\"headerlink\" title=\"Request IDs\"></a>Request IDs</h1><p>每个API请求都有一个关联的请求标识符。您可以响应头找到<code>Request-Id</code>下这个键值。</p>\n<h1 id=\"字段命名规范\"><a href=\"#字段命名规范\" class=\"headerlink\" title=\"字段命名规范\"></a>字段命名规范</h1><p>连连所有的字段命名规范为驼峰式:</p>\n<pre><code>https://api...com/resource/?filterBy=&quot;filter&quot;\n\n{\n  &quot;storeName&quot;: &quot;My Store&quot;,\n  &quot;kycStatus&quot;: &quot;success&quot;\n}</code></pre><h1 id=\"Webhook\"><a href=\"#Webhook\" class=\"headerlink\" title=\"Webhook\"></a>Webhook</h1><p>你可以配置webhook地址来接收连连这边的回调信息（<code>event</code>），具体的回调信息（<code>event</code>）在相应的接口中定义</p>\n<h1 id=\"对象关系模型\"><a href=\"#对象关系模型\" class=\"headerlink\" title=\"对象关系模型\"></a>对象关系模型</h1><p><img src=\"/images/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B.png\" alt=\"对象关系模型\"></p>\n"},{"title":"schedule","date":"2020-04-27T05:47:12.000Z","_content":"\n并发编程领域中**定时器** 相关内容经常被一些介绍并发编程书籍所遗忘，属于并发编程学习优先级较低的知识点。在JDK源码中有两种定时器实现，一种是JDK1.3引入的**\\*Timer**类*，它是一种基于单线程操作的简单任务调度器，虽然存在较多设计缺陷，但仍有很多应用场景和使用案例；另一种JDK1.5引入的**ScheduledThreadPoolExecutor**类，是一种基于线程池操作的较复杂任务调度器，同时也是官方推荐的任务调度器实现。\n\n定时器Timer，也称简单任务调度器。它由以下四个类组成，\n\n- 定时任务（TimerTask类）\n- 任务队列（TaskQueue类）\n- 定时线程（TimerThread类）\n- 定时器（Timer类）\n\n## **定时任务**\n\n```\npublic abstract class TimerTask implements Runnable {\n    final Object lock = new Object();\n\n    //任务状态\n    int state = VIRGIN;\n    static final int VIRGIN = 0;\n    static final int SCHEDULED   = 1;\n    static final int EXECUTED    = 2;\n    static final int CANCELLED   = 3;\n    \n    //下次执行时间\n    long nextExecutionTime;\n    //调度至执行间隔时间\n    long period = 0;\n}\n```\n\n抽象类TimerTask实现Runnable接口，表明该类作为定时任务模版，用户可以根据业务场景定义具体任务。TimerTask类要维护**任务状态** (state)、**任务下次执行时间**（nextExecutionTime）和**任务调度至执行的间隔时间**（period）。\n\n> 任务状态\n\n定时器任务生命周期中可能处于下表所示的4种不同的状态，在给定的时刻定时器任务只能处于其中一种状态。\n\n![img](https://pic1.zhimg.com/80/v2-156e3cab41f11ad251640b4286e33cd4_720w.jpg)\n\n> 执行任务\n\nTimerTask类的抽象方法run来自Runnable接口，TimerTask并未实现该接口，延迟至子类实现。用户可在派生类中自定义任务逻辑。\n\n```\npublic abstract void run();\n```\n\n抽象类TimerTask的run方法并不一定要来源于Runnable接口，它并未接受线程调度，而是由TimerThread线程从TimerQueue中消费任务，然后直接调用TimerTask.run()执行任务。基于这种理解，TimerTask类完全可以像这样定义：\n\n```\npublic abstract class TimerTask {  // 舍去implement Runnable\n\n    //由抽象类自己定义,而非来自Runnable接口\n    public abstract void run();\n}\n```\n\nTimerTask类这种写法可以理解为被**过度设计**了，读者可思之。\n\n> 取消任务\n\n如果当前任务正处于SCHEDULED状态，允许撤销当前任务，置任务为CANCELLED状态，返回true表示任务撤销成功；若任务处于其它状态，也置任务为CANCELLED状态，并返回false表示任务撤销失败。\n\n```\npublic boolean cancel() {\n    synchronized(lock) {\n        boolean result = (state == SCHEDULED);\n        //实际上所有任务都能被取消\n        state = CANCELLED;\n        return result;\n    }\n}\n```\n\n调用TimerTask.cancel()，虽然对不同状态有不同的返回值，但不管什么状态都能够被取消。设计逻辑匪夷所思，我认为这种**设计不合理**，读者可思之。\n\n> 调度执行时间\n\nscheduledExecutionTime方法获取任务被调度后最近的开始执行时间点，保证调度时间在下次执行时间之前。\n\n```\npublic long scheduledExecutionTime() {\n    synchronized(lock) {\n        return (period < 0 ? \n            nextExecutionTime + period : nextExecutionTime - period);\n    }\n}\n```\n\n## **定时线程**\n\n从优先级队列里异步消费任务的操作由单线程完成。TimerThread是单线程，因此需要mainLoop循环逻辑来轮询消费任务队列。\n\n```\nclass TimerThread extends Thread {\n\n    boolean newTasksMayBeScheduled = true;\n\n    //内部维护一个队列\n    private TaskQueue queue;\n\n    TimerThread(TaskQueue queue) {\n        this.queue = queue;\n    }\n}\n```\n\n> 轮询任务\n\n```\n@Override\npublic void run() {\n    try {\n        //循环执行逻辑\n        mainLoop();\n    } finally {\n        synchronized(queue) {\n            newTasksMayBeScheduled = false;\n            //清空任务队列. 在结束循环后可能仍有任务被加入到队列,因此需要清空.\n            queue.clear();\n        }\n    }\n}\n\nprivate void mainLoop() {\n    while (true) {\n        try {\n            TimerTask task;\n            boolean taskFired;\n            synchronized(queue) {  \n                //若队列为空且定时器未被撤销,则挂起定时线程直至被唤醒       \n                while (queue.isEmpty() && newTasksMayBeScheduled) {                     \n                    queue.wait();\n                }\n                //若线程被唤醒后队列仍为空,则结束循环. 说明此时定时器被撤销.\n                if (queue.isEmpty()) {\n                    break;            \n                }    \n  \n                long currentTime, executionTime;\n                //获取最近执行时间任务\n                task = queue.getMin();\n                synchronized(task.lock) {\n                    //任务若被取消,则从队列中移除,并继续轮询\n                    if (task.state == TimerTask.CANCELLED) {\n                        queue.removeMin();\n                        continue;\n                    }\n\n                    currentTime = System.currentTimeMillis();\n                    executionTime = task.nextExecutionTime;\n                    //任务最近要执行\n                    if (taskFired = (executionTime<=currentTime)) {\n                        //若为非重复执行任务,从队列中移除该任务,并设置该任务状态为已执行\n                        if (task.period == 0) {\n                            queue.removeMin();\n                            task.state = TimerTask.EXECUTED;\n                        } else {\n                            //若为重复执行任务,则在指定时刻重新调度该任务\n                            queue.rescheduleMin(\n                                task.period<0 ? currentTime-task.period\n                                    : executionTime + task.period);                      \n                        }\n                    }\n                    //若最近无任务要执行,则等待至要执行任务的指定时刻\n                    if (!taskFired) {\n                        queue.wait(executionTime - currentTime);\n                    }\n                }\n            }\n                \n            //任务已释放,运行任务\n            if (taskFired) { \n                task.run();\n            }\n        } catch(InterruptedException e) {\n        }\n    }\n}\n```\n\n## **任务队列**\n\n任务队列是基于完全二叉树实现的小顶堆。队列初始容量为128，由于0位置不存储任务，因此实际初始容量为127，size表示队列的任务数。\n\n```\nclass TaskQueue {\n\n    //基于顺序表实现的定时任务队列\n    private TimerTask[] queue = new TimerTask[128];\n\n    //队列任务数\n    private int size = 0;\n}\n```\n\n> 查询容量\n\n查询队列任务数和判断队列是否为空都直接使用任务队列内部维护的size属性，因此这两个操作的时间复杂度为O(1)。\n\n```\n/** 队列任务数 */\nint size() { return size; }\n\n/** 队列是否为空 */\nboolean isEmpty() { return size==0; }\n```\n\n> 添加任务\n\n主线程向任务队列中注入新任务。如果当前任务队列容量已达极限，则在原容量基础上扩容一倍，并在任务队列末尾追加新任务，并根据任务执行时间作为优先级调整新任务在任务队列中的位置。\n\n```\n/** 新增任务并调整小顶堆 */\nvoid add(TimerTask task) {\n    //任务数达到队列最大容量,则扩容一倍\n    if (size + 1 == queue.length) {\n        queue = Arrays.copyOf(queue, 2*queue.length);\n    }\n    //添加任务\n    queue[++size] = task;\n    //向上调整任务\n    fixUp(size);\n}\n```\n\n![img](https://pic3.zhimg.com/80/v2-3e64d663f2d599d0c7b40a7464dd0072_720w.jpg)\n\n> 获取任务\n\n从任务队列中获取最近将要执行任务的时间复杂度为O(1)；获得指定位置任务的时间复杂度也是O(1)。\n\n```\n/** 获得下次执行时间最小的任务,即最小堆根结点 */\nTimerTask getMin() { return queue[1]; }\n\n/** 获得指定位置的任务 */\nTimerTask get(int i) { return queue[i]; }\n```\n\n![img](https://pic4.zhimg.com/80/v2-1a80040c19ea94d2d18ef6452ae64183_720w.jpg)\n\n> 移除任务\n\n```\n/** 移除下次执行时间最小的任务,即移除堆顶任务 */\nvoid removeMin() {\n    queue[1] = queue[size];\n    queue[size--] = null;\n    fixDown(1);\n}\n```\n\n![img](https://pic4.zhimg.com/80/v2-d0a23892cf5a8aaef780bf8f0e6f0e33_720w.jpg)\n\n```\n/** 快速移除指定位置处任务 */\nvoid quickRemove(int i) {\n    assert i <= size;  //assert生效需要编译器开启断言功能\n    \n    //指定位置元素直接用最后元素代替,不需要向下调整\n    queue[i] = queue[size];\n    queue[size--] = null;\n}\n```\n\n![img](https://pic1.zhimg.com/80/v2-d72f08b8ae0fbaaa9a3da508f9e64b54_720w.jpg)\n\n```\n/** 清空任务队列 */\nvoid clear() {\n    for (int i=1; i<=size; i++)\n        queue[i] = null;\n    size = 0;\n}\n```\n\n> 重新调度任务\n\n重新调度任务不删除堆顶任务，而是将堆顶任务的nextExecutionTime加上period后得到新的nextExecutionTime值，然后根据任务优先级向下调整。\n\n```\nvoid rescheduleMin(long newTime) {\n    queue[1].nextExecutionTime = newTime;\n    fixDown(1);\n}\n```\n\n![img](https://pic3.zhimg.com/80/v2-26395bd09d3fc3d4fd4990a3707aa34a_720w.jpg)\n\n> 基础算法\n\n任务队列是优先级队列，基于顺序结构完全二叉树实现的小顶堆。优先级的依据是任务下次执行时间。\n\n![img](https://pic2.zhimg.com/80/v2-7dbfc6a56603dfc301213dd0ba8cfa0d_720w.jpg)\n\n```\n/** 提升优先级 */\nprivate void fixUp(int k) {\n    while (k > 1) {\n        //父结点位置\n        int j = k >> 1;\n        //如果父结点的下次任务执行时间小于当前结点下次任务执行时间,结束调整操作\n        if (queue[j].nextExecutionTime <= queue[k].nextExecutionTime) {\n            break;\n        }\n\n        //调整任务在任务队列中的位置\n        TimerTask tmp = queue[j];  \n        queue[j] = queue[k]; \n        queue[k] = tmp;\n        k = j;\n    }\n}\n```\n\n```\n/** 降低优先级 */\nprivate void fixDown(int k) {\n    int j;\n    while ((j = k << 1) <= size && j > 0) {\n        //选择左右两侧子结点,选择更小的交换位置\n        if (j < size && \n            queue[j].nextExecutionTime > queue[j+1].nextExecutionTime) {\n            j++; \n        }\n        if (queue[k].nextExecutionTime <= queue[j].nextExecutionTime) {\n            break;\n        }\n\n        //调整任务在任务队列中的位置\n        TimerTask tmp = queue[j];  \n        queue[j] = queue[k]; \n        queue[k] = tmp;\n        k = j;\n    }\n}\n```\n\n调整当前完全二叉树为最小堆。\n\n```\n/** 堆化 */\nvoid heapify() {\n    for (int i = size/2; i >= 1; i--) {\n        fixDown(i);\n    }\n}\n```\n\n## **定时器**\n\n一个定时器内部维护一个任务队列和一个定时线程。在Main线程往任务队列注入任务后，由定时线程异步轮询处理任务队列，这种处理方式实质上是异步串行方式，任务处理并发度为1。\n\n```\npublic class Timer {\n\n    /** 任务队列 */\n    private final TaskQueue queue = new TaskQueue();\n\n    /** 定时线程 */\n    private final TimerThread thread = new TimerThread(queue);\n}\n```\n\n> 构造器\n\n新建Timer实例，同时也新建了任务队列和定时线程，并启动定时线程。启动定时线程前可指定定时线程的名称，以及指定为后台线程。\n\n```\npublic Timer() {\n    this(\"Timer-\" + serialNumber());\n}\npublic Timer(boolean isDaemon) {\n    this(\"Timer-\" + serialNumber(), isDaemon);\n}\npublic Timer(String name) {\n    thread.setName(name);\n    thread.start();\n}\npublic Timer(String name, boolean isDaemon) {\n    thread.setName(name); \n    thread.setDaemon(isDaemon);\n    thread.start();\n}\n\n//单机序列号生成\nprivate final static AtomicInteger nextSerialNumber = new AtomicInteger(0);\nprivate static int serialNumber() {\n    return nextSerialNumber.getAndIncrement();\n}\n```\n\n> 定间隔调度\n\n```\n/** 延迟调度 */\npublic void schedule(TimerTask task, long delay) {\n    if (delay < 0)\n        throw new IllegalArgumentException(\"Negative delay.\");\n\n    //从当前时间开始延时delay毫秒后调度\n    sched(task, System.currentTimeMillis()+delay, 0);\n}\n\n/** 定时调度 */\npublic void schedule(TimerTask task, Date time) {\n\n    //从指定时刻出开始调度\n    sched(task, time.getTime(), 0);\n}\n\n/** 延时周期性调度 */\npublic void schedule(TimerTask task, long delay, long period) {\n    if (delay < 0)\n        throw new IllegalArgumentException(\"Negative delay.\");\n    if (period <= 0)\n        throw new IllegalArgumentException(\"Non-positive period.\");\n    sched(task, System.currentTimeMillis()+delay, -period);\n}\n\n/** 定时周期性调度 */\npublic void schedule(TimerTask task, Date firstTime, long period) {\n    if (period <= 0)\n        throw new IllegalArgumentException(\"Non-positive period.\");\n    sched(task, firstTime.getTime(), -period);\n}\n```\n\nTimer.schedule()侧重period时间的一致性，保证执行任务的间隔时间相同。\n\n![img](https://pic3.zhimg.com/80/v2-367f6ca013b337ab1d2f2547ed871766_720w.png)\n\n> 定频率调度\n\n```\n/** 延时周期性定速调度 */\npublic void scheduleAtFixedRate(TimerTask task, long delay, long period) {\n    if (delay < 0)\n        throw new IllegalArgumentException(\"Negative delay.\");\n    if (period <= 0)\n        throw new IllegalArgumentException(\"Non-positive period.\");\n    sched(task, System.currentTimeMillis()+delay, period);\n}\n\n/** 定时周期性定速调度 */\npublic void scheduleAtFixedRate(TimerTask task, Date firstTime, long period) {\n    if (period <= 0)\n        throw new IllegalArgumentException(\"Non-positive period.\");\n    sched(task, firstTime.getTime(), period);\n}\n```\n\nTimer.scheduleAtFixedRate()侧重执行频率的一致性，任务执行时间加period时间的和相等。\n\n![img](https://pic4.zhimg.com/80/v2-493048111335ad7f57c1f51a29b37753_720w.png)\n\n> 核心调度算法\n\n```\nprivate void sched(TimerTask task, long time, long period) {\n    if (time < 0)\n        throw new IllegalArgumentException(\"Illegal execution time.\");      \n    if (Math.abs(period) > (Long.MAX_VALUE >> 1))\n        period >>= 1;\n\n    synchronized(queue) {\n\n        //保证定时器未被取消\n        if (!thread.newTasksMayBeScheduled) {\n            throw new IllegalStateException(\"Timer already cancelled.\");\n        }\n\n        synchronized(task.lock) {\n            //保证任务最初处于未使用状态\n            if (task.state != TimerTask.VIRGIN) {\n                throw new IllegalStateException(\n                    \"Task already scheduled or cancelled\");\n            }\n\n            //下次任务执行时间\n            task.nextExecutionTime = time;\n            //任务执行周期\n            task.period = period;\n            //设置任务状态为已调度\n            task.state = TimerTask.SCHEDULED;\n        }\n\n        //往任务队列中添加任务\n        queue.add(task);\n\n        //如果队列中该任务为最近要执行的任务,则立即唤醒定时线程处理\n        if (queue.getMin() == task) {\n            queue.notify();\n        }\n    }\n}\n```\n\n> 撤销定时器\n\n```\npublic void cancel() {\n    synchronized(queue) {\n        //撤销定时器\n        thread.newTasksMayBeScheduled = false;\n        //清空任务队列\n        queue.clear();\n        //唤醒定时线程\n        queue.notify();\n    }\n}\n```\n\n> 清理取消状态的任务\n\n```\npublic int purge() {\n    //从队列中移除的任务数\n    int result = 0;\n    synchronized(queue) {\n        for (int i = queue.size(); i > 0; i--) {\n            //从队列中移除取消状态任务\n            if (queue.get(i).state == TimerTask.CANCELLED) {\n                queue.quickRemove(i);\n                result++;\n            }\n        }\n        //如果仍有非取消任务,队列重新堆化\n        if (result != 0)\n            queue.heapify();\n    }\n    return result;\n}\n```\n\n## **总结**\n\n读完源码后总结如下，\n\n> 数据结构\n\n小顶堆实现优先级队列，优先级标准是任务下次执行时间。\n\n> 任务状态转换\n\n![img](https://pic3.zhimg.com/80/v2-ad4c978cc45c7a22464335345f525932_720w.jpg)\n\n> 定时器架构图\n\n![img](https://pic3.zhimg.com/80/v2-08da55ef92a07ae0f90a07f18521bb8e_720w.jpg)\n\n> 架构缺陷\n\n单线程串行消费任务，前置任务消费延迟或失败会直接影响后续任务的消费。如果消费前置任务时抛出异常，线程退出，队列中的任务无法被继续消费，定时器失效。","source":"_posts/java/schedule.md","raw":"---\ntitle: schedule\ntags:\n  - java\n  - schedule\ncategories:\n  - java\n  - schedule\ndate: 2020-04-27 13:47:12\n---\n\n并发编程领域中**定时器** 相关内容经常被一些介绍并发编程书籍所遗忘，属于并发编程学习优先级较低的知识点。在JDK源码中有两种定时器实现，一种是JDK1.3引入的**\\*Timer**类*，它是一种基于单线程操作的简单任务调度器，虽然存在较多设计缺陷，但仍有很多应用场景和使用案例；另一种JDK1.5引入的**ScheduledThreadPoolExecutor**类，是一种基于线程池操作的较复杂任务调度器，同时也是官方推荐的任务调度器实现。\n\n定时器Timer，也称简单任务调度器。它由以下四个类组成，\n\n- 定时任务（TimerTask类）\n- 任务队列（TaskQueue类）\n- 定时线程（TimerThread类）\n- 定时器（Timer类）\n\n## **定时任务**\n\n```\npublic abstract class TimerTask implements Runnable {\n    final Object lock = new Object();\n\n    //任务状态\n    int state = VIRGIN;\n    static final int VIRGIN = 0;\n    static final int SCHEDULED   = 1;\n    static final int EXECUTED    = 2;\n    static final int CANCELLED   = 3;\n    \n    //下次执行时间\n    long nextExecutionTime;\n    //调度至执行间隔时间\n    long period = 0;\n}\n```\n\n抽象类TimerTask实现Runnable接口，表明该类作为定时任务模版，用户可以根据业务场景定义具体任务。TimerTask类要维护**任务状态** (state)、**任务下次执行时间**（nextExecutionTime）和**任务调度至执行的间隔时间**（period）。\n\n> 任务状态\n\n定时器任务生命周期中可能处于下表所示的4种不同的状态，在给定的时刻定时器任务只能处于其中一种状态。\n\n![img](https://pic1.zhimg.com/80/v2-156e3cab41f11ad251640b4286e33cd4_720w.jpg)\n\n> 执行任务\n\nTimerTask类的抽象方法run来自Runnable接口，TimerTask并未实现该接口，延迟至子类实现。用户可在派生类中自定义任务逻辑。\n\n```\npublic abstract void run();\n```\n\n抽象类TimerTask的run方法并不一定要来源于Runnable接口，它并未接受线程调度，而是由TimerThread线程从TimerQueue中消费任务，然后直接调用TimerTask.run()执行任务。基于这种理解，TimerTask类完全可以像这样定义：\n\n```\npublic abstract class TimerTask {  // 舍去implement Runnable\n\n    //由抽象类自己定义,而非来自Runnable接口\n    public abstract void run();\n}\n```\n\nTimerTask类这种写法可以理解为被**过度设计**了，读者可思之。\n\n> 取消任务\n\n如果当前任务正处于SCHEDULED状态，允许撤销当前任务，置任务为CANCELLED状态，返回true表示任务撤销成功；若任务处于其它状态，也置任务为CANCELLED状态，并返回false表示任务撤销失败。\n\n```\npublic boolean cancel() {\n    synchronized(lock) {\n        boolean result = (state == SCHEDULED);\n        //实际上所有任务都能被取消\n        state = CANCELLED;\n        return result;\n    }\n}\n```\n\n调用TimerTask.cancel()，虽然对不同状态有不同的返回值，但不管什么状态都能够被取消。设计逻辑匪夷所思，我认为这种**设计不合理**，读者可思之。\n\n> 调度执行时间\n\nscheduledExecutionTime方法获取任务被调度后最近的开始执行时间点，保证调度时间在下次执行时间之前。\n\n```\npublic long scheduledExecutionTime() {\n    synchronized(lock) {\n        return (period < 0 ? \n            nextExecutionTime + period : nextExecutionTime - period);\n    }\n}\n```\n\n## **定时线程**\n\n从优先级队列里异步消费任务的操作由单线程完成。TimerThread是单线程，因此需要mainLoop循环逻辑来轮询消费任务队列。\n\n```\nclass TimerThread extends Thread {\n\n    boolean newTasksMayBeScheduled = true;\n\n    //内部维护一个队列\n    private TaskQueue queue;\n\n    TimerThread(TaskQueue queue) {\n        this.queue = queue;\n    }\n}\n```\n\n> 轮询任务\n\n```\n@Override\npublic void run() {\n    try {\n        //循环执行逻辑\n        mainLoop();\n    } finally {\n        synchronized(queue) {\n            newTasksMayBeScheduled = false;\n            //清空任务队列. 在结束循环后可能仍有任务被加入到队列,因此需要清空.\n            queue.clear();\n        }\n    }\n}\n\nprivate void mainLoop() {\n    while (true) {\n        try {\n            TimerTask task;\n            boolean taskFired;\n            synchronized(queue) {  \n                //若队列为空且定时器未被撤销,则挂起定时线程直至被唤醒       \n                while (queue.isEmpty() && newTasksMayBeScheduled) {                     \n                    queue.wait();\n                }\n                //若线程被唤醒后队列仍为空,则结束循环. 说明此时定时器被撤销.\n                if (queue.isEmpty()) {\n                    break;            \n                }    \n  \n                long currentTime, executionTime;\n                //获取最近执行时间任务\n                task = queue.getMin();\n                synchronized(task.lock) {\n                    //任务若被取消,则从队列中移除,并继续轮询\n                    if (task.state == TimerTask.CANCELLED) {\n                        queue.removeMin();\n                        continue;\n                    }\n\n                    currentTime = System.currentTimeMillis();\n                    executionTime = task.nextExecutionTime;\n                    //任务最近要执行\n                    if (taskFired = (executionTime<=currentTime)) {\n                        //若为非重复执行任务,从队列中移除该任务,并设置该任务状态为已执行\n                        if (task.period == 0) {\n                            queue.removeMin();\n                            task.state = TimerTask.EXECUTED;\n                        } else {\n                            //若为重复执行任务,则在指定时刻重新调度该任务\n                            queue.rescheduleMin(\n                                task.period<0 ? currentTime-task.period\n                                    : executionTime + task.period);                      \n                        }\n                    }\n                    //若最近无任务要执行,则等待至要执行任务的指定时刻\n                    if (!taskFired) {\n                        queue.wait(executionTime - currentTime);\n                    }\n                }\n            }\n                \n            //任务已释放,运行任务\n            if (taskFired) { \n                task.run();\n            }\n        } catch(InterruptedException e) {\n        }\n    }\n}\n```\n\n## **任务队列**\n\n任务队列是基于完全二叉树实现的小顶堆。队列初始容量为128，由于0位置不存储任务，因此实际初始容量为127，size表示队列的任务数。\n\n```\nclass TaskQueue {\n\n    //基于顺序表实现的定时任务队列\n    private TimerTask[] queue = new TimerTask[128];\n\n    //队列任务数\n    private int size = 0;\n}\n```\n\n> 查询容量\n\n查询队列任务数和判断队列是否为空都直接使用任务队列内部维护的size属性，因此这两个操作的时间复杂度为O(1)。\n\n```\n/** 队列任务数 */\nint size() { return size; }\n\n/** 队列是否为空 */\nboolean isEmpty() { return size==0; }\n```\n\n> 添加任务\n\n主线程向任务队列中注入新任务。如果当前任务队列容量已达极限，则在原容量基础上扩容一倍，并在任务队列末尾追加新任务，并根据任务执行时间作为优先级调整新任务在任务队列中的位置。\n\n```\n/** 新增任务并调整小顶堆 */\nvoid add(TimerTask task) {\n    //任务数达到队列最大容量,则扩容一倍\n    if (size + 1 == queue.length) {\n        queue = Arrays.copyOf(queue, 2*queue.length);\n    }\n    //添加任务\n    queue[++size] = task;\n    //向上调整任务\n    fixUp(size);\n}\n```\n\n![img](https://pic3.zhimg.com/80/v2-3e64d663f2d599d0c7b40a7464dd0072_720w.jpg)\n\n> 获取任务\n\n从任务队列中获取最近将要执行任务的时间复杂度为O(1)；获得指定位置任务的时间复杂度也是O(1)。\n\n```\n/** 获得下次执行时间最小的任务,即最小堆根结点 */\nTimerTask getMin() { return queue[1]; }\n\n/** 获得指定位置的任务 */\nTimerTask get(int i) { return queue[i]; }\n```\n\n![img](https://pic4.zhimg.com/80/v2-1a80040c19ea94d2d18ef6452ae64183_720w.jpg)\n\n> 移除任务\n\n```\n/** 移除下次执行时间最小的任务,即移除堆顶任务 */\nvoid removeMin() {\n    queue[1] = queue[size];\n    queue[size--] = null;\n    fixDown(1);\n}\n```\n\n![img](https://pic4.zhimg.com/80/v2-d0a23892cf5a8aaef780bf8f0e6f0e33_720w.jpg)\n\n```\n/** 快速移除指定位置处任务 */\nvoid quickRemove(int i) {\n    assert i <= size;  //assert生效需要编译器开启断言功能\n    \n    //指定位置元素直接用最后元素代替,不需要向下调整\n    queue[i] = queue[size];\n    queue[size--] = null;\n}\n```\n\n![img](https://pic1.zhimg.com/80/v2-d72f08b8ae0fbaaa9a3da508f9e64b54_720w.jpg)\n\n```\n/** 清空任务队列 */\nvoid clear() {\n    for (int i=1; i<=size; i++)\n        queue[i] = null;\n    size = 0;\n}\n```\n\n> 重新调度任务\n\n重新调度任务不删除堆顶任务，而是将堆顶任务的nextExecutionTime加上period后得到新的nextExecutionTime值，然后根据任务优先级向下调整。\n\n```\nvoid rescheduleMin(long newTime) {\n    queue[1].nextExecutionTime = newTime;\n    fixDown(1);\n}\n```\n\n![img](https://pic3.zhimg.com/80/v2-26395bd09d3fc3d4fd4990a3707aa34a_720w.jpg)\n\n> 基础算法\n\n任务队列是优先级队列，基于顺序结构完全二叉树实现的小顶堆。优先级的依据是任务下次执行时间。\n\n![img](https://pic2.zhimg.com/80/v2-7dbfc6a56603dfc301213dd0ba8cfa0d_720w.jpg)\n\n```\n/** 提升优先级 */\nprivate void fixUp(int k) {\n    while (k > 1) {\n        //父结点位置\n        int j = k >> 1;\n        //如果父结点的下次任务执行时间小于当前结点下次任务执行时间,结束调整操作\n        if (queue[j].nextExecutionTime <= queue[k].nextExecutionTime) {\n            break;\n        }\n\n        //调整任务在任务队列中的位置\n        TimerTask tmp = queue[j];  \n        queue[j] = queue[k]; \n        queue[k] = tmp;\n        k = j;\n    }\n}\n```\n\n```\n/** 降低优先级 */\nprivate void fixDown(int k) {\n    int j;\n    while ((j = k << 1) <= size && j > 0) {\n        //选择左右两侧子结点,选择更小的交换位置\n        if (j < size && \n            queue[j].nextExecutionTime > queue[j+1].nextExecutionTime) {\n            j++; \n        }\n        if (queue[k].nextExecutionTime <= queue[j].nextExecutionTime) {\n            break;\n        }\n\n        //调整任务在任务队列中的位置\n        TimerTask tmp = queue[j];  \n        queue[j] = queue[k]; \n        queue[k] = tmp;\n        k = j;\n    }\n}\n```\n\n调整当前完全二叉树为最小堆。\n\n```\n/** 堆化 */\nvoid heapify() {\n    for (int i = size/2; i >= 1; i--) {\n        fixDown(i);\n    }\n}\n```\n\n## **定时器**\n\n一个定时器内部维护一个任务队列和一个定时线程。在Main线程往任务队列注入任务后，由定时线程异步轮询处理任务队列，这种处理方式实质上是异步串行方式，任务处理并发度为1。\n\n```\npublic class Timer {\n\n    /** 任务队列 */\n    private final TaskQueue queue = new TaskQueue();\n\n    /** 定时线程 */\n    private final TimerThread thread = new TimerThread(queue);\n}\n```\n\n> 构造器\n\n新建Timer实例，同时也新建了任务队列和定时线程，并启动定时线程。启动定时线程前可指定定时线程的名称，以及指定为后台线程。\n\n```\npublic Timer() {\n    this(\"Timer-\" + serialNumber());\n}\npublic Timer(boolean isDaemon) {\n    this(\"Timer-\" + serialNumber(), isDaemon);\n}\npublic Timer(String name) {\n    thread.setName(name);\n    thread.start();\n}\npublic Timer(String name, boolean isDaemon) {\n    thread.setName(name); \n    thread.setDaemon(isDaemon);\n    thread.start();\n}\n\n//单机序列号生成\nprivate final static AtomicInteger nextSerialNumber = new AtomicInteger(0);\nprivate static int serialNumber() {\n    return nextSerialNumber.getAndIncrement();\n}\n```\n\n> 定间隔调度\n\n```\n/** 延迟调度 */\npublic void schedule(TimerTask task, long delay) {\n    if (delay < 0)\n        throw new IllegalArgumentException(\"Negative delay.\");\n\n    //从当前时间开始延时delay毫秒后调度\n    sched(task, System.currentTimeMillis()+delay, 0);\n}\n\n/** 定时调度 */\npublic void schedule(TimerTask task, Date time) {\n\n    //从指定时刻出开始调度\n    sched(task, time.getTime(), 0);\n}\n\n/** 延时周期性调度 */\npublic void schedule(TimerTask task, long delay, long period) {\n    if (delay < 0)\n        throw new IllegalArgumentException(\"Negative delay.\");\n    if (period <= 0)\n        throw new IllegalArgumentException(\"Non-positive period.\");\n    sched(task, System.currentTimeMillis()+delay, -period);\n}\n\n/** 定时周期性调度 */\npublic void schedule(TimerTask task, Date firstTime, long period) {\n    if (period <= 0)\n        throw new IllegalArgumentException(\"Non-positive period.\");\n    sched(task, firstTime.getTime(), -period);\n}\n```\n\nTimer.schedule()侧重period时间的一致性，保证执行任务的间隔时间相同。\n\n![img](https://pic3.zhimg.com/80/v2-367f6ca013b337ab1d2f2547ed871766_720w.png)\n\n> 定频率调度\n\n```\n/** 延时周期性定速调度 */\npublic void scheduleAtFixedRate(TimerTask task, long delay, long period) {\n    if (delay < 0)\n        throw new IllegalArgumentException(\"Negative delay.\");\n    if (period <= 0)\n        throw new IllegalArgumentException(\"Non-positive period.\");\n    sched(task, System.currentTimeMillis()+delay, period);\n}\n\n/** 定时周期性定速调度 */\npublic void scheduleAtFixedRate(TimerTask task, Date firstTime, long period) {\n    if (period <= 0)\n        throw new IllegalArgumentException(\"Non-positive period.\");\n    sched(task, firstTime.getTime(), period);\n}\n```\n\nTimer.scheduleAtFixedRate()侧重执行频率的一致性，任务执行时间加period时间的和相等。\n\n![img](https://pic4.zhimg.com/80/v2-493048111335ad7f57c1f51a29b37753_720w.png)\n\n> 核心调度算法\n\n```\nprivate void sched(TimerTask task, long time, long period) {\n    if (time < 0)\n        throw new IllegalArgumentException(\"Illegal execution time.\");      \n    if (Math.abs(period) > (Long.MAX_VALUE >> 1))\n        period >>= 1;\n\n    synchronized(queue) {\n\n        //保证定时器未被取消\n        if (!thread.newTasksMayBeScheduled) {\n            throw new IllegalStateException(\"Timer already cancelled.\");\n        }\n\n        synchronized(task.lock) {\n            //保证任务最初处于未使用状态\n            if (task.state != TimerTask.VIRGIN) {\n                throw new IllegalStateException(\n                    \"Task already scheduled or cancelled\");\n            }\n\n            //下次任务执行时间\n            task.nextExecutionTime = time;\n            //任务执行周期\n            task.period = period;\n            //设置任务状态为已调度\n            task.state = TimerTask.SCHEDULED;\n        }\n\n        //往任务队列中添加任务\n        queue.add(task);\n\n        //如果队列中该任务为最近要执行的任务,则立即唤醒定时线程处理\n        if (queue.getMin() == task) {\n            queue.notify();\n        }\n    }\n}\n```\n\n> 撤销定时器\n\n```\npublic void cancel() {\n    synchronized(queue) {\n        //撤销定时器\n        thread.newTasksMayBeScheduled = false;\n        //清空任务队列\n        queue.clear();\n        //唤醒定时线程\n        queue.notify();\n    }\n}\n```\n\n> 清理取消状态的任务\n\n```\npublic int purge() {\n    //从队列中移除的任务数\n    int result = 0;\n    synchronized(queue) {\n        for (int i = queue.size(); i > 0; i--) {\n            //从队列中移除取消状态任务\n            if (queue.get(i).state == TimerTask.CANCELLED) {\n                queue.quickRemove(i);\n                result++;\n            }\n        }\n        //如果仍有非取消任务,队列重新堆化\n        if (result != 0)\n            queue.heapify();\n    }\n    return result;\n}\n```\n\n## **总结**\n\n读完源码后总结如下，\n\n> 数据结构\n\n小顶堆实现优先级队列，优先级标准是任务下次执行时间。\n\n> 任务状态转换\n\n![img](https://pic3.zhimg.com/80/v2-ad4c978cc45c7a22464335345f525932_720w.jpg)\n\n> 定时器架构图\n\n![img](https://pic3.zhimg.com/80/v2-08da55ef92a07ae0f90a07f18521bb8e_720w.jpg)\n\n> 架构缺陷\n\n单线程串行消费任务，前置任务消费延迟或失败会直接影响后续任务的消费。如果消费前置任务时抛出异常，线程退出，队列中的任务无法被继续消费，定时器失效。","slug":"java/schedule","published":1,"updated":"2020-04-27T06:13:23.504Z","_id":"ck9i32wry004ersjacvk71j3l","comments":1,"layout":"post","photos":[],"link":"","content":"<p>并发编程领域中<strong>定时器</strong> 相关内容经常被一些介绍并发编程书籍所遗忘，属于并发编程学习优先级较低的知识点。在JDK源码中有两种定时器实现，一种是JDK1.3引入的<strong>*Timer</strong>类<em>，它是一种基于单线程操作的简单任务调度器，虽然存在较多设计缺陷，但仍有很多应用场景和使用案例；另一种JDK1.5引入的*</em>ScheduledThreadPoolExecutor**类，是一种基于线程池操作的较复杂任务调度器，同时也是官方推荐的任务调度器实现。</p>\n<p>定时器Timer，也称简单任务调度器。它由以下四个类组成，</p>\n<ul>\n<li>定时任务（TimerTask类）</li>\n<li>任务队列（TaskQueue类）</li>\n<li>定时线程（TimerThread类）</li>\n<li>定时器（Timer类）</li>\n</ul>\n<h2 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a><strong>定时任务</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class TimerTask implements Runnable &#123;</span><br><span class=\"line\">    final Object lock &#x3D; new Object();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;任务状态</span><br><span class=\"line\">    int state &#x3D; VIRGIN;</span><br><span class=\"line\">    static final int VIRGIN &#x3D; 0;</span><br><span class=\"line\">    static final int SCHEDULED   &#x3D; 1;</span><br><span class=\"line\">    static final int EXECUTED    &#x3D; 2;</span><br><span class=\"line\">    static final int CANCELLED   &#x3D; 3;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;下次执行时间</span><br><span class=\"line\">    long nextExecutionTime;</span><br><span class=\"line\">    &#x2F;&#x2F;调度至执行间隔时间</span><br><span class=\"line\">    long period &#x3D; 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>抽象类TimerTask实现Runnable接口，表明该类作为定时任务模版，用户可以根据业务场景定义具体任务。TimerTask类要维护<strong>任务状态</strong> (state)、<strong>任务下次执行时间</strong>（nextExecutionTime）和<strong>任务调度至执行的间隔时间</strong>（period）。</p>\n<blockquote>\n<p>任务状态</p>\n</blockquote>\n<p>定时器任务生命周期中可能处于下表所示的4种不同的状态，在给定的时刻定时器任务只能处于其中一种状态。</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-156e3cab41f11ad251640b4286e33cd4_720w.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>执行任务</p>\n</blockquote>\n<p>TimerTask类的抽象方法run来自Runnable接口，TimerTask并未实现该接口，延迟至子类实现。用户可在派生类中自定义任务逻辑。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract void run();</span><br></pre></td></tr></table></figure>\n\n<p>抽象类TimerTask的run方法并不一定要来源于Runnable接口，它并未接受线程调度，而是由TimerThread线程从TimerQueue中消费任务，然后直接调用TimerTask.run()执行任务。基于这种理解，TimerTask类完全可以像这样定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class TimerTask &#123;  &#x2F;&#x2F; 舍去implement Runnable</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;由抽象类自己定义,而非来自Runnable接口</span><br><span class=\"line\">    public abstract void run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>TimerTask类这种写法可以理解为被<strong>过度设计</strong>了，读者可思之。</p>\n<blockquote>\n<p>取消任务</p>\n</blockquote>\n<p>如果当前任务正处于SCHEDULED状态，允许撤销当前任务，置任务为CANCELLED状态，返回true表示任务撤销成功；若任务处于其它状态，也置任务为CANCELLED状态，并返回false表示任务撤销失败。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean cancel() &#123;</span><br><span class=\"line\">    synchronized(lock) &#123;</span><br><span class=\"line\">        boolean result &#x3D; (state &#x3D;&#x3D; SCHEDULED);</span><br><span class=\"line\">        &#x2F;&#x2F;实际上所有任务都能被取消</span><br><span class=\"line\">        state &#x3D; CANCELLED;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用TimerTask.cancel()，虽然对不同状态有不同的返回值，但不管什么状态都能够被取消。设计逻辑匪夷所思，我认为这种<strong>设计不合理</strong>，读者可思之。</p>\n<blockquote>\n<p>调度执行时间</p>\n</blockquote>\n<p>scheduledExecutionTime方法获取任务被调度后最近的开始执行时间点，保证调度时间在下次执行时间之前。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public long scheduledExecutionTime() &#123;</span><br><span class=\"line\">    synchronized(lock) &#123;</span><br><span class=\"line\">        return (period &lt; 0 ? </span><br><span class=\"line\">            nextExecutionTime + period : nextExecutionTime - period);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定时线程\"><a href=\"#定时线程\" class=\"headerlink\" title=\"定时线程\"></a><strong>定时线程</strong></h2><p>从优先级队列里异步消费任务的操作由单线程完成。TimerThread是单线程，因此需要mainLoop循环逻辑来轮询消费任务队列。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TimerThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    boolean newTasksMayBeScheduled &#x3D; true;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;内部维护一个队列</span><br><span class=\"line\">    private TaskQueue queue;</span><br><span class=\"line\"></span><br><span class=\"line\">    TimerThread(TaskQueue queue) &#123;</span><br><span class=\"line\">        this.queue &#x3D; queue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>轮询任务</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public void run() &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;循环执行逻辑</span><br><span class=\"line\">        mainLoop();</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        synchronized(queue) &#123;</span><br><span class=\"line\">            newTasksMayBeScheduled &#x3D; false;</span><br><span class=\"line\">            &#x2F;&#x2F;清空任务队列. 在结束循环后可能仍有任务被加入到队列,因此需要清空.</span><br><span class=\"line\">            queue.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private void mainLoop() &#123;</span><br><span class=\"line\">    while (true) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            TimerTask task;</span><br><span class=\"line\">            boolean taskFired;</span><br><span class=\"line\">            synchronized(queue) &#123;  </span><br><span class=\"line\">                &#x2F;&#x2F;若队列为空且定时器未被撤销,则挂起定时线程直至被唤醒       </span><br><span class=\"line\">                while (queue.isEmpty() &amp;&amp; newTasksMayBeScheduled) &#123;                     </span><br><span class=\"line\">                    queue.wait();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                &#x2F;&#x2F;若线程被唤醒后队列仍为空,则结束循环. 说明此时定时器被撤销.</span><br><span class=\"line\">                if (queue.isEmpty()) &#123;</span><br><span class=\"line\">                    break;            </span><br><span class=\"line\">                &#125;    </span><br><span class=\"line\">  </span><br><span class=\"line\">                long currentTime, executionTime;</span><br><span class=\"line\">                &#x2F;&#x2F;获取最近执行时间任务</span><br><span class=\"line\">                task &#x3D; queue.getMin();</span><br><span class=\"line\">                synchronized(task.lock) &#123;</span><br><span class=\"line\">                    &#x2F;&#x2F;任务若被取消,则从队列中移除,并继续轮询</span><br><span class=\"line\">                    if (task.state &#x3D;&#x3D; TimerTask.CANCELLED) &#123;</span><br><span class=\"line\">                        queue.removeMin();</span><br><span class=\"line\">                        continue;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    currentTime &#x3D; System.currentTimeMillis();</span><br><span class=\"line\">                    executionTime &#x3D; task.nextExecutionTime;</span><br><span class=\"line\">                    &#x2F;&#x2F;任务最近要执行</span><br><span class=\"line\">                    if (taskFired &#x3D; (executionTime&lt;&#x3D;currentTime)) &#123;</span><br><span class=\"line\">                        &#x2F;&#x2F;若为非重复执行任务,从队列中移除该任务,并设置该任务状态为已执行</span><br><span class=\"line\">                        if (task.period &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">                            queue.removeMin();</span><br><span class=\"line\">                            task.state &#x3D; TimerTask.EXECUTED;</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            &#x2F;&#x2F;若为重复执行任务,则在指定时刻重新调度该任务</span><br><span class=\"line\">                            queue.rescheduleMin(</span><br><span class=\"line\">                                task.period&lt;0 ? currentTime-task.period</span><br><span class=\"line\">                                    : executionTime + task.period);                      </span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    &#x2F;&#x2F;若最近无任务要执行,则等待至要执行任务的指定时刻</span><br><span class=\"line\">                    if (!taskFired) &#123;</span><br><span class=\"line\">                        queue.wait(executionTime - currentTime);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#x2F;&#x2F;任务已释放,运行任务</span><br><span class=\"line\">            if (taskFired) &#123; </span><br><span class=\"line\">                task.run();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch(InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a><strong>任务队列</strong></h2><p>任务队列是基于完全二叉树实现的小顶堆。队列初始容量为128，由于0位置不存储任务，因此实际初始容量为127，size表示队列的任务数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TaskQueue &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;基于顺序表实现的定时任务队列</span><br><span class=\"line\">    private TimerTask[] queue &#x3D; new TimerTask[128];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;队列任务数</span><br><span class=\"line\">    private int size &#x3D; 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查询容量</p>\n</blockquote>\n<p>查询队列任务数和判断队列是否为空都直接使用任务队列内部维护的size属性，因此这两个操作的时间复杂度为O(1)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 队列任务数 *&#x2F;</span><br><span class=\"line\">int size() &#123; return size; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 队列是否为空 *&#x2F;</span><br><span class=\"line\">boolean isEmpty() &#123; return size&#x3D;&#x3D;0; &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>添加任务</p>\n</blockquote>\n<p>主线程向任务队列中注入新任务。如果当前任务队列容量已达极限，则在原容量基础上扩容一倍，并在任务队列末尾追加新任务，并根据任务执行时间作为优先级调整新任务在任务队列中的位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 新增任务并调整小顶堆 *&#x2F;</span><br><span class=\"line\">void add(TimerTask task) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;任务数达到队列最大容量,则扩容一倍</span><br><span class=\"line\">    if (size + 1 &#x3D;&#x3D; queue.length) &#123;</span><br><span class=\"line\">        queue &#x3D; Arrays.copyOf(queue, 2*queue.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;添加任务</span><br><span class=\"line\">    queue[++size] &#x3D; task;</span><br><span class=\"line\">    &#x2F;&#x2F;向上调整任务</span><br><span class=\"line\">    fixUp(size);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic3.zhimg.com/80/v2-3e64d663f2d599d0c7b40a7464dd0072_720w.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>获取任务</p>\n</blockquote>\n<p>从任务队列中获取最近将要执行任务的时间复杂度为O(1)；获得指定位置任务的时间复杂度也是O(1)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 获得下次执行时间最小的任务,即最小堆根结点 *&#x2F;</span><br><span class=\"line\">TimerTask getMin() &#123; return queue[1]; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 获得指定位置的任务 *&#x2F;</span><br><span class=\"line\">TimerTask get(int i) &#123; return queue[i]; &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic4.zhimg.com/80/v2-1a80040c19ea94d2d18ef6452ae64183_720w.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>移除任务</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 移除下次执行时间最小的任务,即移除堆顶任务 *&#x2F;</span><br><span class=\"line\">void removeMin() &#123;</span><br><span class=\"line\">    queue[1] &#x3D; queue[size];</span><br><span class=\"line\">    queue[size--] &#x3D; null;</span><br><span class=\"line\">    fixDown(1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic4.zhimg.com/80/v2-d0a23892cf5a8aaef780bf8f0e6f0e33_720w.jpg\" alt=\"img\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 快速移除指定位置处任务 *&#x2F;</span><br><span class=\"line\">void quickRemove(int i) &#123;</span><br><span class=\"line\">    assert i &lt;&#x3D; size;  &#x2F;&#x2F;assert生效需要编译器开启断言功能</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;指定位置元素直接用最后元素代替,不需要向下调整</span><br><span class=\"line\">    queue[i] &#x3D; queue[size];</span><br><span class=\"line\">    queue[size--] &#x3D; null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic1.zhimg.com/80/v2-d72f08b8ae0fbaaa9a3da508f9e64b54_720w.jpg\" alt=\"img\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 清空任务队列 *&#x2F;</span><br><span class=\"line\">void clear() &#123;</span><br><span class=\"line\">    for (int i&#x3D;1; i&lt;&#x3D;size; i++)</span><br><span class=\"line\">        queue[i] &#x3D; null;</span><br><span class=\"line\">    size &#x3D; 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重新调度任务</p>\n</blockquote>\n<p>重新调度任务不删除堆顶任务，而是将堆顶任务的nextExecutionTime加上period后得到新的nextExecutionTime值，然后根据任务优先级向下调整。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void rescheduleMin(long newTime) &#123;</span><br><span class=\"line\">    queue[1].nextExecutionTime &#x3D; newTime;</span><br><span class=\"line\">    fixDown(1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic3.zhimg.com/80/v2-26395bd09d3fc3d4fd4990a3707aa34a_720w.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>基础算法</p>\n</blockquote>\n<p>任务队列是优先级队列，基于顺序结构完全二叉树实现的小顶堆。优先级的依据是任务下次执行时间。</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-7dbfc6a56603dfc301213dd0ba8cfa0d_720w.jpg\" alt=\"img\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 提升优先级 *&#x2F;</span><br><span class=\"line\">private void fixUp(int k) &#123;</span><br><span class=\"line\">    while (k &gt; 1) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;父结点位置</span><br><span class=\"line\">        int j &#x3D; k &gt;&gt; 1;</span><br><span class=\"line\">        &#x2F;&#x2F;如果父结点的下次任务执行时间小于当前结点下次任务执行时间,结束调整操作</span><br><span class=\"line\">        if (queue[j].nextExecutionTime &lt;&#x3D; queue[k].nextExecutionTime) &#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;调整任务在任务队列中的位置</span><br><span class=\"line\">        TimerTask tmp &#x3D; queue[j];  </span><br><span class=\"line\">        queue[j] &#x3D; queue[k]; </span><br><span class=\"line\">        queue[k] &#x3D; tmp;</span><br><span class=\"line\">        k &#x3D; j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 降低优先级 *&#x2F;</span><br><span class=\"line\">private void fixDown(int k) &#123;</span><br><span class=\"line\">    int j;</span><br><span class=\"line\">    while ((j &#x3D; k &lt;&lt; 1) &lt;&#x3D; size &amp;&amp; j &gt; 0) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;选择左右两侧子结点,选择更小的交换位置</span><br><span class=\"line\">        if (j &lt; size &amp;&amp; </span><br><span class=\"line\">            queue[j].nextExecutionTime &gt; queue[j+1].nextExecutionTime) &#123;</span><br><span class=\"line\">            j++; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (queue[k].nextExecutionTime &lt;&#x3D; queue[j].nextExecutionTime) &#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;调整任务在任务队列中的位置</span><br><span class=\"line\">        TimerTask tmp &#x3D; queue[j];  </span><br><span class=\"line\">        queue[j] &#x3D; queue[k]; </span><br><span class=\"line\">        queue[k] &#x3D; tmp;</span><br><span class=\"line\">        k &#x3D; j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调整当前完全二叉树为最小堆。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 堆化 *&#x2F;</span><br><span class=\"line\">void heapify() &#123;</span><br><span class=\"line\">    for (int i &#x3D; size&#x2F;2; i &gt;&#x3D; 1; i--) &#123;</span><br><span class=\"line\">        fixDown(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a><strong>定时器</strong></h2><p>一个定时器内部维护一个任务队列和一个定时线程。在Main线程往任务队列注入任务后，由定时线程异步轮询处理任务队列，这种处理方式实质上是异步串行方式，任务处理并发度为1。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Timer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 任务队列 *&#x2F;</span><br><span class=\"line\">    private final TaskQueue queue &#x3D; new TaskQueue();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 定时线程 *&#x2F;</span><br><span class=\"line\">    private final TimerThread thread &#x3D; new TimerThread(queue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>构造器</p>\n</blockquote>\n<p>新建Timer实例，同时也新建了任务队列和定时线程，并启动定时线程。启动定时线程前可指定定时线程的名称，以及指定为后台线程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Timer() &#123;</span><br><span class=\"line\">    this(&quot;Timer-&quot; + serialNumber());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Timer(boolean isDaemon) &#123;</span><br><span class=\"line\">    this(&quot;Timer-&quot; + serialNumber(), isDaemon);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Timer(String name) &#123;</span><br><span class=\"line\">    thread.setName(name);</span><br><span class=\"line\">    thread.start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Timer(String name, boolean isDaemon) &#123;</span><br><span class=\"line\">    thread.setName(name); </span><br><span class=\"line\">    thread.setDaemon(isDaemon);</span><br><span class=\"line\">    thread.start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;单机序列号生成</span><br><span class=\"line\">private final static AtomicInteger nextSerialNumber &#x3D; new AtomicInteger(0);</span><br><span class=\"line\">private static int serialNumber() &#123;</span><br><span class=\"line\">    return nextSerialNumber.getAndIncrement();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>定间隔调度</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 延迟调度 *&#x2F;</span><br><span class=\"line\">public void schedule(TimerTask task, long delay) &#123;</span><br><span class=\"line\">    if (delay &lt; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Negative delay.&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;从当前时间开始延时delay毫秒后调度</span><br><span class=\"line\">    sched(task, System.currentTimeMillis()+delay, 0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 定时调度 *&#x2F;</span><br><span class=\"line\">public void schedule(TimerTask task, Date time) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;从指定时刻出开始调度</span><br><span class=\"line\">    sched(task, time.getTime(), 0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 延时周期性调度 *&#x2F;</span><br><span class=\"line\">public void schedule(TimerTask task, long delay, long period) &#123;</span><br><span class=\"line\">    if (delay &lt; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Negative delay.&quot;);</span><br><span class=\"line\">    if (period &lt;&#x3D; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Non-positive period.&quot;);</span><br><span class=\"line\">    sched(task, System.currentTimeMillis()+delay, -period);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 定时周期性调度 *&#x2F;</span><br><span class=\"line\">public void schedule(TimerTask task, Date firstTime, long period) &#123;</span><br><span class=\"line\">    if (period &lt;&#x3D; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Non-positive period.&quot;);</span><br><span class=\"line\">    sched(task, firstTime.getTime(), -period);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Timer.schedule()侧重period时间的一致性，保证执行任务的间隔时间相同。</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-367f6ca013b337ab1d2f2547ed871766_720w.png\" alt=\"img\"></p>\n<blockquote>\n<p>定频率调度</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 延时周期性定速调度 *&#x2F;</span><br><span class=\"line\">public void scheduleAtFixedRate(TimerTask task, long delay, long period) &#123;</span><br><span class=\"line\">    if (delay &lt; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Negative delay.&quot;);</span><br><span class=\"line\">    if (period &lt;&#x3D; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Non-positive period.&quot;);</span><br><span class=\"line\">    sched(task, System.currentTimeMillis()+delay, period);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 定时周期性定速调度 *&#x2F;</span><br><span class=\"line\">public void scheduleAtFixedRate(TimerTask task, Date firstTime, long period) &#123;</span><br><span class=\"line\">    if (period &lt;&#x3D; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Non-positive period.&quot;);</span><br><span class=\"line\">    sched(task, firstTime.getTime(), period);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Timer.scheduleAtFixedRate()侧重执行频率的一致性，任务执行时间加period时间的和相等。</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-493048111335ad7f57c1f51a29b37753_720w.png\" alt=\"img\"></p>\n<blockquote>\n<p>核心调度算法</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void sched(TimerTask task, long time, long period) &#123;</span><br><span class=\"line\">    if (time &lt; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Illegal execution time.&quot;);      </span><br><span class=\"line\">    if (Math.abs(period) &gt; (Long.MAX_VALUE &gt;&gt; 1))</span><br><span class=\"line\">        period &gt;&gt;&#x3D; 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized(queue) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;保证定时器未被取消</span><br><span class=\"line\">        if (!thread.newTasksMayBeScheduled) &#123;</span><br><span class=\"line\">            throw new IllegalStateException(&quot;Timer already cancelled.&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        synchronized(task.lock) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;保证任务最初处于未使用状态</span><br><span class=\"line\">            if (task.state !&#x3D; TimerTask.VIRGIN) &#123;</span><br><span class=\"line\">                throw new IllegalStateException(</span><br><span class=\"line\">                    &quot;Task already scheduled or cancelled&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F;下次任务执行时间</span><br><span class=\"line\">            task.nextExecutionTime &#x3D; time;</span><br><span class=\"line\">            &#x2F;&#x2F;任务执行周期</span><br><span class=\"line\">            task.period &#x3D; period;</span><br><span class=\"line\">            &#x2F;&#x2F;设置任务状态为已调度</span><br><span class=\"line\">            task.state &#x3D; TimerTask.SCHEDULED;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;往任务队列中添加任务</span><br><span class=\"line\">        queue.add(task);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;如果队列中该任务为最近要执行的任务,则立即唤醒定时线程处理</span><br><span class=\"line\">        if (queue.getMin() &#x3D;&#x3D; task) &#123;</span><br><span class=\"line\">            queue.notify();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>撤销定时器</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void cancel() &#123;</span><br><span class=\"line\">    synchronized(queue) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;撤销定时器</span><br><span class=\"line\">        thread.newTasksMayBeScheduled &#x3D; false;</span><br><span class=\"line\">        &#x2F;&#x2F;清空任务队列</span><br><span class=\"line\">        queue.clear();</span><br><span class=\"line\">        &#x2F;&#x2F;唤醒定时线程</span><br><span class=\"line\">        queue.notify();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>清理取消状态的任务</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int purge() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;从队列中移除的任务数</span><br><span class=\"line\">    int result &#x3D; 0;</span><br><span class=\"line\">    synchronized(queue) &#123;</span><br><span class=\"line\">        for (int i &#x3D; queue.size(); i &gt; 0; i--) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;从队列中移除取消状态任务</span><br><span class=\"line\">            if (queue.get(i).state &#x3D;&#x3D; TimerTask.CANCELLED) &#123;</span><br><span class=\"line\">                queue.quickRemove(i);</span><br><span class=\"line\">                result++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;如果仍有非取消任务,队列重新堆化</span><br><span class=\"line\">        if (result !&#x3D; 0)</span><br><span class=\"line\">            queue.heapify();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h2><p>读完源码后总结如下，</p>\n<blockquote>\n<p>数据结构</p>\n</blockquote>\n<p>小顶堆实现优先级队列，优先级标准是任务下次执行时间。</p>\n<blockquote>\n<p>任务状态转换</p>\n</blockquote>\n<p><img src=\"https://pic3.zhimg.com/80/v2-ad4c978cc45c7a22464335345f525932_720w.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>定时器架构图</p>\n</blockquote>\n<p><img src=\"https://pic3.zhimg.com/80/v2-08da55ef92a07ae0f90a07f18521bb8e_720w.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>架构缺陷</p>\n</blockquote>\n<p>单线程串行消费任务，前置任务消费延迟或失败会直接影响后续任务的消费。如果消费前置任务时抛出异常，线程退出，队列中的任务无法被继续消费，定时器失效。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>并发编程领域中<strong>定时器</strong> 相关内容经常被一些介绍并发编程书籍所遗忘，属于并发编程学习优先级较低的知识点。在JDK源码中有两种定时器实现，一种是JDK1.3引入的<strong>*Timer</strong>类<em>，它是一种基于单线程操作的简单任务调度器，虽然存在较多设计缺陷，但仍有很多应用场景和使用案例；另一种JDK1.5引入的*</em>ScheduledThreadPoolExecutor**类，是一种基于线程池操作的较复杂任务调度器，同时也是官方推荐的任务调度器实现。</p>\n<p>定时器Timer，也称简单任务调度器。它由以下四个类组成，</p>\n<ul>\n<li>定时任务（TimerTask类）</li>\n<li>任务队列（TaskQueue类）</li>\n<li>定时线程（TimerThread类）</li>\n<li>定时器（Timer类）</li>\n</ul>\n<h2 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a><strong>定时任务</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class TimerTask implements Runnable &#123;</span><br><span class=\"line\">    final Object lock &#x3D; new Object();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;任务状态</span><br><span class=\"line\">    int state &#x3D; VIRGIN;</span><br><span class=\"line\">    static final int VIRGIN &#x3D; 0;</span><br><span class=\"line\">    static final int SCHEDULED   &#x3D; 1;</span><br><span class=\"line\">    static final int EXECUTED    &#x3D; 2;</span><br><span class=\"line\">    static final int CANCELLED   &#x3D; 3;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;下次执行时间</span><br><span class=\"line\">    long nextExecutionTime;</span><br><span class=\"line\">    &#x2F;&#x2F;调度至执行间隔时间</span><br><span class=\"line\">    long period &#x3D; 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>抽象类TimerTask实现Runnable接口，表明该类作为定时任务模版，用户可以根据业务场景定义具体任务。TimerTask类要维护<strong>任务状态</strong> (state)、<strong>任务下次执行时间</strong>（nextExecutionTime）和<strong>任务调度至执行的间隔时间</strong>（period）。</p>\n<blockquote>\n<p>任务状态</p>\n</blockquote>\n<p>定时器任务生命周期中可能处于下表所示的4种不同的状态，在给定的时刻定时器任务只能处于其中一种状态。</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-156e3cab41f11ad251640b4286e33cd4_720w.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>执行任务</p>\n</blockquote>\n<p>TimerTask类的抽象方法run来自Runnable接口，TimerTask并未实现该接口，延迟至子类实现。用户可在派生类中自定义任务逻辑。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract void run();</span><br></pre></td></tr></table></figure>\n\n<p>抽象类TimerTask的run方法并不一定要来源于Runnable接口，它并未接受线程调度，而是由TimerThread线程从TimerQueue中消费任务，然后直接调用TimerTask.run()执行任务。基于这种理解，TimerTask类完全可以像这样定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class TimerTask &#123;  &#x2F;&#x2F; 舍去implement Runnable</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;由抽象类自己定义,而非来自Runnable接口</span><br><span class=\"line\">    public abstract void run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>TimerTask类这种写法可以理解为被<strong>过度设计</strong>了，读者可思之。</p>\n<blockquote>\n<p>取消任务</p>\n</blockquote>\n<p>如果当前任务正处于SCHEDULED状态，允许撤销当前任务，置任务为CANCELLED状态，返回true表示任务撤销成功；若任务处于其它状态，也置任务为CANCELLED状态，并返回false表示任务撤销失败。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean cancel() &#123;</span><br><span class=\"line\">    synchronized(lock) &#123;</span><br><span class=\"line\">        boolean result &#x3D; (state &#x3D;&#x3D; SCHEDULED);</span><br><span class=\"line\">        &#x2F;&#x2F;实际上所有任务都能被取消</span><br><span class=\"line\">        state &#x3D; CANCELLED;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用TimerTask.cancel()，虽然对不同状态有不同的返回值，但不管什么状态都能够被取消。设计逻辑匪夷所思，我认为这种<strong>设计不合理</strong>，读者可思之。</p>\n<blockquote>\n<p>调度执行时间</p>\n</blockquote>\n<p>scheduledExecutionTime方法获取任务被调度后最近的开始执行时间点，保证调度时间在下次执行时间之前。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public long scheduledExecutionTime() &#123;</span><br><span class=\"line\">    synchronized(lock) &#123;</span><br><span class=\"line\">        return (period &lt; 0 ? </span><br><span class=\"line\">            nextExecutionTime + period : nextExecutionTime - period);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定时线程\"><a href=\"#定时线程\" class=\"headerlink\" title=\"定时线程\"></a><strong>定时线程</strong></h2><p>从优先级队列里异步消费任务的操作由单线程完成。TimerThread是单线程，因此需要mainLoop循环逻辑来轮询消费任务队列。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TimerThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    boolean newTasksMayBeScheduled &#x3D; true;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;内部维护一个队列</span><br><span class=\"line\">    private TaskQueue queue;</span><br><span class=\"line\"></span><br><span class=\"line\">    TimerThread(TaskQueue queue) &#123;</span><br><span class=\"line\">        this.queue &#x3D; queue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>轮询任务</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public void run() &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;循环执行逻辑</span><br><span class=\"line\">        mainLoop();</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        synchronized(queue) &#123;</span><br><span class=\"line\">            newTasksMayBeScheduled &#x3D; false;</span><br><span class=\"line\">            &#x2F;&#x2F;清空任务队列. 在结束循环后可能仍有任务被加入到队列,因此需要清空.</span><br><span class=\"line\">            queue.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private void mainLoop() &#123;</span><br><span class=\"line\">    while (true) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            TimerTask task;</span><br><span class=\"line\">            boolean taskFired;</span><br><span class=\"line\">            synchronized(queue) &#123;  </span><br><span class=\"line\">                &#x2F;&#x2F;若队列为空且定时器未被撤销,则挂起定时线程直至被唤醒       </span><br><span class=\"line\">                while (queue.isEmpty() &amp;&amp; newTasksMayBeScheduled) &#123;                     </span><br><span class=\"line\">                    queue.wait();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                &#x2F;&#x2F;若线程被唤醒后队列仍为空,则结束循环. 说明此时定时器被撤销.</span><br><span class=\"line\">                if (queue.isEmpty()) &#123;</span><br><span class=\"line\">                    break;            </span><br><span class=\"line\">                &#125;    </span><br><span class=\"line\">  </span><br><span class=\"line\">                long currentTime, executionTime;</span><br><span class=\"line\">                &#x2F;&#x2F;获取最近执行时间任务</span><br><span class=\"line\">                task &#x3D; queue.getMin();</span><br><span class=\"line\">                synchronized(task.lock) &#123;</span><br><span class=\"line\">                    &#x2F;&#x2F;任务若被取消,则从队列中移除,并继续轮询</span><br><span class=\"line\">                    if (task.state &#x3D;&#x3D; TimerTask.CANCELLED) &#123;</span><br><span class=\"line\">                        queue.removeMin();</span><br><span class=\"line\">                        continue;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    currentTime &#x3D; System.currentTimeMillis();</span><br><span class=\"line\">                    executionTime &#x3D; task.nextExecutionTime;</span><br><span class=\"line\">                    &#x2F;&#x2F;任务最近要执行</span><br><span class=\"line\">                    if (taskFired &#x3D; (executionTime&lt;&#x3D;currentTime)) &#123;</span><br><span class=\"line\">                        &#x2F;&#x2F;若为非重复执行任务,从队列中移除该任务,并设置该任务状态为已执行</span><br><span class=\"line\">                        if (task.period &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">                            queue.removeMin();</span><br><span class=\"line\">                            task.state &#x3D; TimerTask.EXECUTED;</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            &#x2F;&#x2F;若为重复执行任务,则在指定时刻重新调度该任务</span><br><span class=\"line\">                            queue.rescheduleMin(</span><br><span class=\"line\">                                task.period&lt;0 ? currentTime-task.period</span><br><span class=\"line\">                                    : executionTime + task.period);                      </span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    &#x2F;&#x2F;若最近无任务要执行,则等待至要执行任务的指定时刻</span><br><span class=\"line\">                    if (!taskFired) &#123;</span><br><span class=\"line\">                        queue.wait(executionTime - currentTime);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#x2F;&#x2F;任务已释放,运行任务</span><br><span class=\"line\">            if (taskFired) &#123; </span><br><span class=\"line\">                task.run();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch(InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a><strong>任务队列</strong></h2><p>任务队列是基于完全二叉树实现的小顶堆。队列初始容量为128，由于0位置不存储任务，因此实际初始容量为127，size表示队列的任务数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TaskQueue &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;基于顺序表实现的定时任务队列</span><br><span class=\"line\">    private TimerTask[] queue &#x3D; new TimerTask[128];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;队列任务数</span><br><span class=\"line\">    private int size &#x3D; 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查询容量</p>\n</blockquote>\n<p>查询队列任务数和判断队列是否为空都直接使用任务队列内部维护的size属性，因此这两个操作的时间复杂度为O(1)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 队列任务数 *&#x2F;</span><br><span class=\"line\">int size() &#123; return size; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 队列是否为空 *&#x2F;</span><br><span class=\"line\">boolean isEmpty() &#123; return size&#x3D;&#x3D;0; &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>添加任务</p>\n</blockquote>\n<p>主线程向任务队列中注入新任务。如果当前任务队列容量已达极限，则在原容量基础上扩容一倍，并在任务队列末尾追加新任务，并根据任务执行时间作为优先级调整新任务在任务队列中的位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 新增任务并调整小顶堆 *&#x2F;</span><br><span class=\"line\">void add(TimerTask task) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;任务数达到队列最大容量,则扩容一倍</span><br><span class=\"line\">    if (size + 1 &#x3D;&#x3D; queue.length) &#123;</span><br><span class=\"line\">        queue &#x3D; Arrays.copyOf(queue, 2*queue.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;添加任务</span><br><span class=\"line\">    queue[++size] &#x3D; task;</span><br><span class=\"line\">    &#x2F;&#x2F;向上调整任务</span><br><span class=\"line\">    fixUp(size);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic3.zhimg.com/80/v2-3e64d663f2d599d0c7b40a7464dd0072_720w.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>获取任务</p>\n</blockquote>\n<p>从任务队列中获取最近将要执行任务的时间复杂度为O(1)；获得指定位置任务的时间复杂度也是O(1)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 获得下次执行时间最小的任务,即最小堆根结点 *&#x2F;</span><br><span class=\"line\">TimerTask getMin() &#123; return queue[1]; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 获得指定位置的任务 *&#x2F;</span><br><span class=\"line\">TimerTask get(int i) &#123; return queue[i]; &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic4.zhimg.com/80/v2-1a80040c19ea94d2d18ef6452ae64183_720w.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>移除任务</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 移除下次执行时间最小的任务,即移除堆顶任务 *&#x2F;</span><br><span class=\"line\">void removeMin() &#123;</span><br><span class=\"line\">    queue[1] &#x3D; queue[size];</span><br><span class=\"line\">    queue[size--] &#x3D; null;</span><br><span class=\"line\">    fixDown(1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic4.zhimg.com/80/v2-d0a23892cf5a8aaef780bf8f0e6f0e33_720w.jpg\" alt=\"img\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 快速移除指定位置处任务 *&#x2F;</span><br><span class=\"line\">void quickRemove(int i) &#123;</span><br><span class=\"line\">    assert i &lt;&#x3D; size;  &#x2F;&#x2F;assert生效需要编译器开启断言功能</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;指定位置元素直接用最后元素代替,不需要向下调整</span><br><span class=\"line\">    queue[i] &#x3D; queue[size];</span><br><span class=\"line\">    queue[size--] &#x3D; null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic1.zhimg.com/80/v2-d72f08b8ae0fbaaa9a3da508f9e64b54_720w.jpg\" alt=\"img\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 清空任务队列 *&#x2F;</span><br><span class=\"line\">void clear() &#123;</span><br><span class=\"line\">    for (int i&#x3D;1; i&lt;&#x3D;size; i++)</span><br><span class=\"line\">        queue[i] &#x3D; null;</span><br><span class=\"line\">    size &#x3D; 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重新调度任务</p>\n</blockquote>\n<p>重新调度任务不删除堆顶任务，而是将堆顶任务的nextExecutionTime加上period后得到新的nextExecutionTime值，然后根据任务优先级向下调整。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void rescheduleMin(long newTime) &#123;</span><br><span class=\"line\">    queue[1].nextExecutionTime &#x3D; newTime;</span><br><span class=\"line\">    fixDown(1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic3.zhimg.com/80/v2-26395bd09d3fc3d4fd4990a3707aa34a_720w.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>基础算法</p>\n</blockquote>\n<p>任务队列是优先级队列，基于顺序结构完全二叉树实现的小顶堆。优先级的依据是任务下次执行时间。</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-7dbfc6a56603dfc301213dd0ba8cfa0d_720w.jpg\" alt=\"img\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 提升优先级 *&#x2F;</span><br><span class=\"line\">private void fixUp(int k) &#123;</span><br><span class=\"line\">    while (k &gt; 1) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;父结点位置</span><br><span class=\"line\">        int j &#x3D; k &gt;&gt; 1;</span><br><span class=\"line\">        &#x2F;&#x2F;如果父结点的下次任务执行时间小于当前结点下次任务执行时间,结束调整操作</span><br><span class=\"line\">        if (queue[j].nextExecutionTime &lt;&#x3D; queue[k].nextExecutionTime) &#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;调整任务在任务队列中的位置</span><br><span class=\"line\">        TimerTask tmp &#x3D; queue[j];  </span><br><span class=\"line\">        queue[j] &#x3D; queue[k]; </span><br><span class=\"line\">        queue[k] &#x3D; tmp;</span><br><span class=\"line\">        k &#x3D; j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 降低优先级 *&#x2F;</span><br><span class=\"line\">private void fixDown(int k) &#123;</span><br><span class=\"line\">    int j;</span><br><span class=\"line\">    while ((j &#x3D; k &lt;&lt; 1) &lt;&#x3D; size &amp;&amp; j &gt; 0) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;选择左右两侧子结点,选择更小的交换位置</span><br><span class=\"line\">        if (j &lt; size &amp;&amp; </span><br><span class=\"line\">            queue[j].nextExecutionTime &gt; queue[j+1].nextExecutionTime) &#123;</span><br><span class=\"line\">            j++; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (queue[k].nextExecutionTime &lt;&#x3D; queue[j].nextExecutionTime) &#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;调整任务在任务队列中的位置</span><br><span class=\"line\">        TimerTask tmp &#x3D; queue[j];  </span><br><span class=\"line\">        queue[j] &#x3D; queue[k]; </span><br><span class=\"line\">        queue[k] &#x3D; tmp;</span><br><span class=\"line\">        k &#x3D; j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调整当前完全二叉树为最小堆。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 堆化 *&#x2F;</span><br><span class=\"line\">void heapify() &#123;</span><br><span class=\"line\">    for (int i &#x3D; size&#x2F;2; i &gt;&#x3D; 1; i--) &#123;</span><br><span class=\"line\">        fixDown(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a><strong>定时器</strong></h2><p>一个定时器内部维护一个任务队列和一个定时线程。在Main线程往任务队列注入任务后，由定时线程异步轮询处理任务队列，这种处理方式实质上是异步串行方式，任务处理并发度为1。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Timer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 任务队列 *&#x2F;</span><br><span class=\"line\">    private final TaskQueue queue &#x3D; new TaskQueue();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 定时线程 *&#x2F;</span><br><span class=\"line\">    private final TimerThread thread &#x3D; new TimerThread(queue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>构造器</p>\n</blockquote>\n<p>新建Timer实例，同时也新建了任务队列和定时线程，并启动定时线程。启动定时线程前可指定定时线程的名称，以及指定为后台线程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Timer() &#123;</span><br><span class=\"line\">    this(&quot;Timer-&quot; + serialNumber());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Timer(boolean isDaemon) &#123;</span><br><span class=\"line\">    this(&quot;Timer-&quot; + serialNumber(), isDaemon);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Timer(String name) &#123;</span><br><span class=\"line\">    thread.setName(name);</span><br><span class=\"line\">    thread.start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Timer(String name, boolean isDaemon) &#123;</span><br><span class=\"line\">    thread.setName(name); </span><br><span class=\"line\">    thread.setDaemon(isDaemon);</span><br><span class=\"line\">    thread.start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;单机序列号生成</span><br><span class=\"line\">private final static AtomicInteger nextSerialNumber &#x3D; new AtomicInteger(0);</span><br><span class=\"line\">private static int serialNumber() &#123;</span><br><span class=\"line\">    return nextSerialNumber.getAndIncrement();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>定间隔调度</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 延迟调度 *&#x2F;</span><br><span class=\"line\">public void schedule(TimerTask task, long delay) &#123;</span><br><span class=\"line\">    if (delay &lt; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Negative delay.&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;从当前时间开始延时delay毫秒后调度</span><br><span class=\"line\">    sched(task, System.currentTimeMillis()+delay, 0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 定时调度 *&#x2F;</span><br><span class=\"line\">public void schedule(TimerTask task, Date time) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;从指定时刻出开始调度</span><br><span class=\"line\">    sched(task, time.getTime(), 0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 延时周期性调度 *&#x2F;</span><br><span class=\"line\">public void schedule(TimerTask task, long delay, long period) &#123;</span><br><span class=\"line\">    if (delay &lt; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Negative delay.&quot;);</span><br><span class=\"line\">    if (period &lt;&#x3D; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Non-positive period.&quot;);</span><br><span class=\"line\">    sched(task, System.currentTimeMillis()+delay, -period);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 定时周期性调度 *&#x2F;</span><br><span class=\"line\">public void schedule(TimerTask task, Date firstTime, long period) &#123;</span><br><span class=\"line\">    if (period &lt;&#x3D; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Non-positive period.&quot;);</span><br><span class=\"line\">    sched(task, firstTime.getTime(), -period);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Timer.schedule()侧重period时间的一致性，保证执行任务的间隔时间相同。</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-367f6ca013b337ab1d2f2547ed871766_720w.png\" alt=\"img\"></p>\n<blockquote>\n<p>定频率调度</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 延时周期性定速调度 *&#x2F;</span><br><span class=\"line\">public void scheduleAtFixedRate(TimerTask task, long delay, long period) &#123;</span><br><span class=\"line\">    if (delay &lt; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Negative delay.&quot;);</span><br><span class=\"line\">    if (period &lt;&#x3D; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Non-positive period.&quot;);</span><br><span class=\"line\">    sched(task, System.currentTimeMillis()+delay, period);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 定时周期性定速调度 *&#x2F;</span><br><span class=\"line\">public void scheduleAtFixedRate(TimerTask task, Date firstTime, long period) &#123;</span><br><span class=\"line\">    if (period &lt;&#x3D; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Non-positive period.&quot;);</span><br><span class=\"line\">    sched(task, firstTime.getTime(), period);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Timer.scheduleAtFixedRate()侧重执行频率的一致性，任务执行时间加period时间的和相等。</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-493048111335ad7f57c1f51a29b37753_720w.png\" alt=\"img\"></p>\n<blockquote>\n<p>核心调度算法</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void sched(TimerTask task, long time, long period) &#123;</span><br><span class=\"line\">    if (time &lt; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Illegal execution time.&quot;);      </span><br><span class=\"line\">    if (Math.abs(period) &gt; (Long.MAX_VALUE &gt;&gt; 1))</span><br><span class=\"line\">        period &gt;&gt;&#x3D; 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized(queue) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;保证定时器未被取消</span><br><span class=\"line\">        if (!thread.newTasksMayBeScheduled) &#123;</span><br><span class=\"line\">            throw new IllegalStateException(&quot;Timer already cancelled.&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        synchronized(task.lock) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;保证任务最初处于未使用状态</span><br><span class=\"line\">            if (task.state !&#x3D; TimerTask.VIRGIN) &#123;</span><br><span class=\"line\">                throw new IllegalStateException(</span><br><span class=\"line\">                    &quot;Task already scheduled or cancelled&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F;下次任务执行时间</span><br><span class=\"line\">            task.nextExecutionTime &#x3D; time;</span><br><span class=\"line\">            &#x2F;&#x2F;任务执行周期</span><br><span class=\"line\">            task.period &#x3D; period;</span><br><span class=\"line\">            &#x2F;&#x2F;设置任务状态为已调度</span><br><span class=\"line\">            task.state &#x3D; TimerTask.SCHEDULED;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;往任务队列中添加任务</span><br><span class=\"line\">        queue.add(task);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;如果队列中该任务为最近要执行的任务,则立即唤醒定时线程处理</span><br><span class=\"line\">        if (queue.getMin() &#x3D;&#x3D; task) &#123;</span><br><span class=\"line\">            queue.notify();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>撤销定时器</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void cancel() &#123;</span><br><span class=\"line\">    synchronized(queue) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;撤销定时器</span><br><span class=\"line\">        thread.newTasksMayBeScheduled &#x3D; false;</span><br><span class=\"line\">        &#x2F;&#x2F;清空任务队列</span><br><span class=\"line\">        queue.clear();</span><br><span class=\"line\">        &#x2F;&#x2F;唤醒定时线程</span><br><span class=\"line\">        queue.notify();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>清理取消状态的任务</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int purge() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;从队列中移除的任务数</span><br><span class=\"line\">    int result &#x3D; 0;</span><br><span class=\"line\">    synchronized(queue) &#123;</span><br><span class=\"line\">        for (int i &#x3D; queue.size(); i &gt; 0; i--) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;从队列中移除取消状态任务</span><br><span class=\"line\">            if (queue.get(i).state &#x3D;&#x3D; TimerTask.CANCELLED) &#123;</span><br><span class=\"line\">                queue.quickRemove(i);</span><br><span class=\"line\">                result++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;如果仍有非取消任务,队列重新堆化</span><br><span class=\"line\">        if (result !&#x3D; 0)</span><br><span class=\"line\">            queue.heapify();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h2><p>读完源码后总结如下，</p>\n<blockquote>\n<p>数据结构</p>\n</blockquote>\n<p>小顶堆实现优先级队列，优先级标准是任务下次执行时间。</p>\n<blockquote>\n<p>任务状态转换</p>\n</blockquote>\n<p><img src=\"https://pic3.zhimg.com/80/v2-ad4c978cc45c7a22464335345f525932_720w.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>定时器架构图</p>\n</blockquote>\n<p><img src=\"https://pic3.zhimg.com/80/v2-08da55ef92a07ae0f90a07f18521bb8e_720w.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>架构缺陷</p>\n</blockquote>\n<p>单线程串行消费任务，前置任务消费延迟或失败会直接影响后续任务的消费。如果消费前置任务时抛出异常，线程退出，队列中的任务无法被继续消费，定时器失效。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck9i32wq9000mrsja3yfr9v3o","category_id":"ck9i32wq1000arsja9myn0se7","_id":"ck9i32wqe000ursja0lrkfjsu"},{"post_id":"ck9i32wps0003rsjah9jqd23j","category_id":"ck9i32wpw0005rsja9kt7d9o8","_id":"ck9i32wqg000zrsjaand17lib"},{"post_id":"ck9i32wps0003rsjah9jqd23j","category_id":"ck9i32wq8000krsja06l5127u","_id":"ck9i32wqj0012rsjadpat0s8d"},{"post_id":"ck9i32wq2000drsjabuubeibf","category_id":"ck9i32wq1000arsja9myn0se7","_id":"ck9i32wqr0018rsjagtdz0tw6"},{"post_id":"ck9i32wq2000drsjabuubeibf","category_id":"ck9i32wqf000vrsja8umoal95","_id":"ck9i32wqs001crsja3alh4jdc"},{"post_id":"ck9i32wpy0007rsja8ezegksh","category_id":"ck9i32wq1000arsja9myn0se7","_id":"ck9i32wqu001frsja1m419644"},{"post_id":"ck9i32wpy0007rsja8ezegksh","category_id":"ck9i32wqj0013rsja97xj9ozx","_id":"ck9i32wqw001irsja7m3i3iz0"},{"post_id":"ck9i32wq3000ersja0t5f5u76","category_id":"ck9i32wq1000arsja9myn0se7","_id":"ck9i32wqw001krsja7fl3amqm"},{"post_id":"ck9i32wq3000ersja0t5f5u76","category_id":"ck9i32wqs001arsja9n37a2bo","_id":"ck9i32wqx001orsjaad0nhmjf"},{"post_id":"ck9i32wq5000irsjab4ttcinv","category_id":"ck9i32wq1000arsja9myn0se7","_id":"ck9i32wqx001rrsja66d0db20"},{"post_id":"ck9i32wq5000irsjab4ttcinv","category_id":"ck9i32wqu001grsjab3j41ghk","_id":"ck9i32wqy001vrsja157914ph"},{"post_id":"ck9i32wpz0008rsja67z1dc1i","category_id":"ck9i32wq1000arsja9myn0se7","_id":"ck9i32wqz001wrsja6n8578z6"},{"post_id":"ck9i32wpz0008rsja67z1dc1i","category_id":"ck9i32wqw001mrsjad8ts104r","_id":"ck9i32wqz001zrsja8iwfe9o1"},{"post_id":"ck9i32wq00009rsja33rr1nm4","category_id":"ck9i32wq1000arsja9myn0se7","_id":"ck9i32wr2002arsjae31ugd5m"},{"post_id":"ck9i32wq00009rsja33rr1nm4","category_id":"ck9i32wr00022rsjad4g0e7i5","_id":"ck9i32wr2002ersjaervje68s"},{"post_id":"ck9i32wqi0011rsjaejjj56zi","category_id":"ck9i32wq1000arsja9myn0se7","_id":"ck9i32wr4002jrsjacmhz4kpa"},{"post_id":"ck9i32wqi0011rsjaejjj56zi","category_id":"ck9i32wr3002frsja1v670lc2","_id":"ck9i32wr4002mrsjaa17v05pz"},{"post_id":"ck9i32wq7000jrsjaanqpeg37","category_id":"ck9i32wqy001srsja4mikcjoa","_id":"ck9i32wrd0038rsjah8q6ck5x"},{"post_id":"ck9i32wq7000jrsjaanqpeg37","category_id":"ck9i32wrb0032rsja69zyg1gd","_id":"ck9i32wre003brsjacjrtbj3b"},{"post_id":"ck9i32wqa000nrsja0scpe9v1","category_id":"ck9i32wqz001xrsja3j56cqxc","_id":"ck9i32wrf003drsja635a5w4q"},{"post_id":"ck9i32wqa000nrsja0scpe9v1","category_id":"ck9i32wrc0035rsjae8tje6hg","_id":"ck9i32wrg003grsja1l9keqn6"},{"post_id":"ck9i32wqc000rrsja3een0zs6","category_id":"ck9i32wr00020rsjagcrpgw02","_id":"ck9i32wrg003irsja7lbk0e2u"},{"post_id":"ck9i32wqc000rrsja3een0zs6","category_id":"ck9i32wrd0039rsja23sxf66m","_id":"ck9i32wrh003lrsjae1u11nlu"},{"post_id":"ck9i32wqd000trsja997r01mz","category_id":"ck9i32wr10026rsja0namdzjk","_id":"ck9i32wrh003nrsja41aj4lws"},{"post_id":"ck9i32wqd000trsja997r01mz","category_id":"ck9i32wrf003ersjahc199cgr","_id":"ck9i32wri003qrsjad37w84gb"},{"post_id":"ck9i32wqg000yrsja9bu37tqg","category_id":"ck9i32wr2002brsjaf0ymhpul","_id":"ck9i32wri003srsjadu62h1vu"},{"post_id":"ck9i32wqg000yrsja9bu37tqg","category_id":"ck9i32wrg003jrsja17go9ox9","_id":"ck9i32wrj003ursja5xo64dyq"},{"post_id":"ck9i32wqj0014rsjagkg84cng","category_id":"ck9i32wr3002hrsjaa8pt9v6q","_id":"ck9i32wrj003wrsja085wbvzc"},{"post_id":"ck9i32wqj0014rsjagkg84cng","category_id":"ck9i32wri003orsjaalsddffa","_id":"ck9i32wrk003yrsjaanv34mhq"},{"post_id":"ck9i32wqp0017rsja5wise7mp","category_id":"ck9i32wr4002krsja2r0m7xv6","_id":"ck9i32wrk003zrsjafv495ypw"},{"post_id":"ck9i32wqp0017rsja5wise7mp","category_id":"ck9i32wrj003trsja6tur7ebl","_id":"ck9i32wrk0041rsja1iy03m5q"},{"post_id":"ck9i32wqr0019rsja6qa41yn8","category_id":"ck9i32wr5002prsjag0yo6rv5","_id":"ck9i32wrk0042rsjaaxg66f6g"},{"post_id":"ck9i32wqr0019rsja6qa41yn8","category_id":"ck9i32wrj003xrsja00iu19qw","_id":"ck9i32wrl0044rsjafnnddnq2"},{"post_id":"ck9i32wqs001drsjag1mw8f90","category_id":"ck9i32wr7002trsja3wib3nsb","_id":"ck9i32wrl0045rsjaca5rfbih"},{"post_id":"ck9i32wqs001drsjag1mw8f90","category_id":"ck9i32wrk0040rsja98jpgvtk","_id":"ck9i32wrl0046rsja6slhfelm"},{"post_id":"ck9i32wqt001ersjahszyd76g","category_id":"ck9i32wr8002xrsjadvdxbi95","_id":"ck9i32wrl0047rsja5npx9x69"},{"post_id":"ck9i32wqt001ersjahszyd76g","category_id":"ck9i32wrl0043rsja7yt40asq","_id":"ck9i32wrm0048rsjacgd4c5zb"},{"post_id":"ck9i32wrn0049rsjaetzrg07b","category_id":"ck9i32wr3002hrsjaa8pt9v6q","_id":"ck9i32wru004crsja6pby74yl"},{"post_id":"ck9i32wrn0049rsjaetzrg07b","category_id":"ck9i32wrs004brsja2l7a7jx6","_id":"ck9i32wrv004drsja1a52b1da"},{"post_id":"ck9i32wry004ersjacvk71j3l","category_id":"ck9i32wq1000arsja9myn0se7","_id":"ck9i32ws1004irsja6d8q4a59"},{"post_id":"ck9i32wry004ersjacvk71j3l","category_id":"ck9i32ws0004grsja97ef0k2h","_id":"ck9i32ws1004jrsjaf04ld9ss"}],"PostTag":[{"post_id":"ck9i32wps0003rsjah9jqd23j","tag_id":"ck9i32wpx0006rsja4wqlhi1i","_id":"ck9i32wq2000crsjae41a8u8h"},{"post_id":"ck9i32wq2000drsjabuubeibf","tag_id":"ck9i32wq1000brsja11oib8af","_id":"ck9i32wq5000hrsja4ip34llu"},{"post_id":"ck9i32wq9000mrsja3yfr9v3o","tag_id":"ck9i32wq1000brsja11oib8af","_id":"ck9i32wqb000prsja28xv3xix"},{"post_id":"ck9i32wpy0007rsja8ezegksh","tag_id":"ck9i32wq1000brsja11oib8af","_id":"ck9i32wqd000srsja84c99r4f"},{"post_id":"ck9i32wpy0007rsja8ezegksh","tag_id":"ck9i32wq4000grsja98hh24ws","_id":"ck9i32wqf000wrsjaf26q7ym4"},{"post_id":"ck9i32wpy0007rsja8ezegksh","tag_id":"ck9i32wq9000lrsja6xj49m86","_id":"ck9i32wqi0010rsja3n33bfs2"},{"post_id":"ck9i32wqi0011rsjaejjj56zi","tag_id":"ck9i32wq1000brsja11oib8af","_id":"ck9i32wqp0016rsja78vw8kak"},{"post_id":"ck9i32wpz0008rsja67z1dc1i","tag_id":"ck9i32wq1000brsja11oib8af","_id":"ck9i32wqw001jrsja0jgbf7qw"},{"post_id":"ck9i32wpz0008rsja67z1dc1i","tag_id":"ck9i32wqf000xrsja8h3egy74","_id":"ck9i32wqw001lrsjab5eh18lh"},{"post_id":"ck9i32wpz0008rsja67z1dc1i","tag_id":"ck9i32wqo0015rsja19vwglbs","_id":"ck9i32wqx001prsja84lf36ef"},{"post_id":"ck9i32wpz0008rsja67z1dc1i","tag_id":"ck9i32wqs001brsja89ite3xi","_id":"ck9i32wqx001qrsja9z0f23bo"},{"post_id":"ck9i32wq00009rsja33rr1nm4","tag_id":"ck9i32wq1000brsja11oib8af","_id":"ck9i32wqy001ursja67qrfhaw"},{"post_id":"ck9i32wq3000ersja0t5f5u76","tag_id":"ck9i32wq1000brsja11oib8af","_id":"ck9i32wr10024rsjad4mn9k68"},{"post_id":"ck9i32wq3000ersja0t5f5u76","tag_id":"ck9i32wqx001nrsja3x4wcltk","_id":"ck9i32wr10025rsja3r3yaqj5"},{"post_id":"ck9i32wq3000ersja0t5f5u76","tag_id":"ck9i32wqy001trsjagx33g6lh","_id":"ck9i32wr10028rsjacf2tcg73"},{"post_id":"ck9i32wq3000ersja0t5f5u76","tag_id":"ck9i32wqz001yrsjahw9ld9pw","_id":"ck9i32wr20029rsja5p2ocqqw"},{"post_id":"ck9i32wq3000ersja0t5f5u76","tag_id":"ck9i32wr00021rsjaavib2028","_id":"ck9i32wr2002drsja5ayt80lx"},{"post_id":"ck9i32wq5000irsjab4ttcinv","tag_id":"ck9i32wq1000brsja11oib8af","_id":"ck9i32wr4002nrsjadqk440ak"},{"post_id":"ck9i32wq5000irsjab4ttcinv","tag_id":"ck9i32wr00023rsja80uh8pkp","_id":"ck9i32wr5002orsja67okhuiv"},{"post_id":"ck9i32wq5000irsjab4ttcinv","tag_id":"ck9i32wr10027rsja4sl5ddg8","_id":"ck9i32wr7002rrsja3ny8alf9"},{"post_id":"ck9i32wq5000irsjab4ttcinv","tag_id":"ck9i32wr2002crsjaef4m2pbl","_id":"ck9i32wr7002srsja2yxahgq6"},{"post_id":"ck9i32wq5000irsjab4ttcinv","tag_id":"ck9i32wr3002grsja426n74cv","_id":"ck9i32wr8002vrsja8eujde9e"},{"post_id":"ck9i32wq5000irsjab4ttcinv","tag_id":"ck9i32wr3002irsjaceekht5b","_id":"ck9i32wr8002wrsjah6a2grn9"},{"post_id":"ck9i32wq7000jrsjaanqpeg37","tag_id":"ck9i32wr4002lrsja7ynd409h","_id":"ck9i32wr9002zrsja72ptgad6"},{"post_id":"ck9i32wqa000nrsja0scpe9v1","tag_id":"ck9i32wr5002qrsja2fjrccj8","_id":"ck9i32wr90030rsjabbrs2uv5"},{"post_id":"ck9i32wqc000rrsja3een0zs6","tag_id":"ck9i32wr7002ursja8rkz751i","_id":"ck9i32wra0031rsja5fbbd58k"},{"post_id":"ck9i32wqd000trsja997r01mz","tag_id":"ck9i32wr8002yrsjae1hq8ky5","_id":"ck9i32wrc0034rsjadobia098"},{"post_id":"ck9i32wqg000yrsja9bu37tqg","tag_id":"ck9i32wrb0033rsja7k3r2xzf","_id":"ck9i32wrd0037rsja5xo8bbfd"},{"post_id":"ck9i32wqj0014rsjagkg84cng","tag_id":"ck9i32wrc0036rsja2zt548vs","_id":"ck9i32wre003crsja2smu1u0n"},{"post_id":"ck9i32wqp0017rsja5wise7mp","tag_id":"ck9i32wre003arsjaewz75814","_id":"ck9i32wrg003hrsjab78n59ce"},{"post_id":"ck9i32wqr0019rsja6qa41yn8","tag_id":"ck9i32wrf003frsjad9o09wh3","_id":"ck9i32wrh003mrsja1i6vgoot"},{"post_id":"ck9i32wqs001drsjag1mw8f90","tag_id":"ck9i32wrh003krsja9wm01b46","_id":"ck9i32wri003rrsja01fzaakm"},{"post_id":"ck9i32wqt001ersjahszyd76g","tag_id":"ck9i32wri003prsja4u1xgddt","_id":"ck9i32wrj003vrsja0wah468n"},{"post_id":"ck9i32wrn0049rsjaetzrg07b","tag_id":"ck9i32wrc0036rsja2zt548vs","_id":"ck9i32wrs004arsjaajix74tv"},{"post_id":"ck9i32wry004ersjacvk71j3l","tag_id":"ck9i32wq1000brsja11oib8af","_id":"ck9i32ws0004frsjadfwk5l4r"},{"post_id":"ck9i32wry004ersjacvk71j3l","tag_id":"ck9i32wr3002irsjaceekht5b","_id":"ck9i32ws1004hrsja1nyrdl6p"}],"Tag":[{"name":"区块链","_id":"ck9i32wpx0006rsja4wqlhi1i"},{"name":"java","_id":"ck9i32wq1000brsja11oib8af"},{"name":"io","_id":"ck9i32wq4000grsja98hh24ws"},{"name":"nio","_id":"ck9i32wq9000lrsja6xj49m86"},{"name":"jdk8","_id":"ck9i32wqf000xrsja8h3egy74"},{"name":"lambda","_id":"ck9i32wqo0015rsja19vwglbs"},{"name":"function/函数式编程","_id":"ck9i32wqs001brsja89ite3xi"},{"name":"proxy","_id":"ck9i32wqx001nrsja3x4wcltk"},{"name":"javassist","_id":"ck9i32wqy001trsjagx33g6lh"},{"name":"jdk 动态代理","_id":"ck9i32wqz001yrsjahw9ld9pw"},{"name":"cglib 动态代理","_id":"ck9i32wr00021rsjaavib2028"},{"name":"thread","_id":"ck9i32wr00023rsja80uh8pkp"},{"name":"synchronized/lock","_id":"ck9i32wr10027rsja4sl5ddg8"},{"name":"ThreadPoolExecutor","_id":"ck9i32wr2002crsjaef4m2pbl"},{"name":"fork/join","_id":"ck9i32wr3002grsja426n74cv"},{"name":"schedule","_id":"ck9i32wr3002irsjaceekht5b"},{"name":"linux","_id":"ck9i32wr4002lrsja7ynd409h"},{"name":"数据结构与算法","_id":"ck9i32wr5002qrsja2fjrccj8"},{"name":"ORM","_id":"ck9i32wr7002ursja8rkz751i"},{"name":"分布式与微服务","_id":"ck9i32wr8002yrsjae1hq8ky5"},{"name":"包管理","_id":"ck9i32wrb0033rsja7k3r2xzf"},{"name":"项目","_id":"ck9i32wrc0036rsja2zt548vs"},{"name":"服务器","_id":"ck9i32wre003arsjaewz75814"},{"name":"spring","_id":"ck9i32wrf003frsjad9o09wh3"},{"name":"数据库","_id":"ck9i32wrh003krsja9wm01b46"},{"name":"中间件","_id":"ck9i32wri003prsja4u1xgddt"}]}}