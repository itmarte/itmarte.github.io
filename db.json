{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/images/1a1746f33bfdcb03da074d8539ebb2f367563.png","path":"images/1a1746f33bfdcb03da074d8539ebb2f367563.png","modified":0,"renderable":0},{"_id":"source/images/31bad766983e212431077ca8da92762050214.png","path":"images/31bad766983e212431077ca8da92762050214.png","modified":0,"renderable":0},{"_id":"source/images/453525.png","path":"images/453525.png","modified":0,"renderable":0},{"_id":"source/images/4d5c410ad23782350cc9f980787151fd54144.png","path":"images/4d5c410ad23782350cc9f980787151fd54144.png","modified":0,"renderable":0},{"_id":"source/images/54546254.png","path":"images/54546254.png","modified":0,"renderable":0},{"_id":"source/images/582d1606d57ff99aa0e5f8fc59c7819329028.png","path":"images/582d1606d57ff99aa0e5f8fc59c7819329028.png","modified":0,"renderable":0},{"_id":"source/images/668e3c90f4b918bfcead2f4280091e9757284.png","path":"images/668e3c90f4b918bfcead2f4280091e9757284.png","modified":0,"renderable":0},{"_id":"source/images/879edb4f06043d76cea27a3ff358cb1d45243.png","path":"images/879edb4f06043d76cea27a3ff358cb1d45243.png","modified":0,"renderable":0},{"_id":"source/images/90ea093549782945f2c968403fdc39d415386.png","path":"images/90ea093549782945f2c968403fdc39d415386.png","modified":0,"renderable":0},{"_id":"source/images/912883e51327e0c7a9d753d11896326511272.png","path":"images/912883e51327e0c7a9d753d11896326511272.png","modified":0,"renderable":0},{"_id":"source/images/9d8dc9cebe59122127460f81a98894bb34085.png","path":"images/9d8dc9cebe59122127460f81a98894bb34085.png","modified":0,"renderable":0},{"_id":"source/images/1df932840b31f41931bb69e16be2932844240.png","path":"images/1df932840b31f41931bb69e16be2932844240.png","modified":0,"renderable":0},{"_id":"source/images/c6caa5be64f39758ada0593b995d65fd25982.png","path":"images/c6caa5be64f39758ada0593b995d65fd25982.png","modified":0,"renderable":0},{"_id":"source/images/f4d89c87acf102b45be8ccf3ed83352a9497.png","path":"images/f4d89c87acf102b45be8ccf3ed83352a9497.png","modified":0,"renderable":0},{"_id":"source/images/forkjoin_任务拆分.png","path":"images/forkjoin_任务拆分.png","modified":0,"renderable":0},{"_id":"source/images/e9a363c8577f211577e4962e9110cb0226733.png","path":"images/e9a363c8577f211577e4962e9110cb0226733.png","modified":0,"renderable":0},{"_id":"source/images/getmint_20200427144736.png","path":"images/getmint_20200427144736.png","modified":0,"renderable":0},{"_id":"source/images/java_time_task.png","path":"images/java_time_task.png","modified":0,"renderable":0},{"_id":"source/images/nio-channels.png","path":"images/nio-channels.png","modified":0,"renderable":0},{"_id":"source/images/nio-buffer.png","path":"images/nio-buffer.png","modified":0,"renderable":0},{"_id":"source/images/thread-pool.png","path":"images/thread-pool.png","modified":0,"renderable":0},{"_id":"source/images/reduceTask-类图.png","path":"images/reduceTask-类图.png","modified":0,"renderable":0},{"_id":"source/images/实际的请求.png","path":"images/实际的请求.png","modified":0,"renderable":0},{"_id":"source/images/授权图.png","path":"images/授权图.png","modified":0,"renderable":0},{"_id":"source/images/03268b9dc49bd30bb63064421bb036bf90315.png","path":"images/03268b9dc49bd30bb63064421bb036bf90315.png","modified":0,"renderable":0},{"_id":"source/images/38d5fbeaebd4998f3a30d44bd20b996f113233.png","path":"images/38d5fbeaebd4998f3a30d44bd20b996f113233.png","modified":0,"renderable":0},{"_id":"source/images/49527b1bb385f0f43529e57b614f59ae145454.png","path":"images/49527b1bb385f0f43529e57b614f59ae145454.png","modified":0,"renderable":0},{"_id":"source/images/49d8041f8480aba5ef59079fcc7143b996706.png","path":"images/49d8041f8480aba5ef59079fcc7143b996706.png","modified":0,"renderable":0},{"_id":"source/images/6c0091e92e90f50f89fd83f3b9eb5472135718.png","path":"images/6c0091e92e90f50f89fd83f3b9eb5472135718.png","modified":0,"renderable":0},{"_id":"source/images/9379fe1666818237f842138812bf63bd85645.png","path":"images/9379fe1666818237f842138812bf63bd85645.png","modified":0,"renderable":0},{"_id":"source/images/efd32f1211e9cf0a3ca9d35b0dc5de8588353.png","path":"images/efd32f1211e9cf0a3ca9d35b0dc5de8588353.png","modified":0,"renderable":0},{"_id":"source/images/forkjoin_工作窃取（双端队列）.png","path":"images/forkjoin_工作窃取（双端队列）.png","modified":0,"renderable":0},{"_id":"source/images/io.png","path":"images/io.png","modified":0,"renderable":0},{"_id":"source/images/关系模型.png","path":"images/关系模型.png","modified":0,"renderable":0},{"_id":"source/images/架构.png","path":"images/架构.png","modified":0,"renderable":0},{"_id":"source/images/414ba7f3abd11e5f805c58635ae10988166121.png","path":"images/414ba7f3abd11e5f805c58635ae10988166121.png","modified":0,"renderable":0},{"_id":"source/images/aba8d9c09e6f054c7061ddd720a04a26147951.png","path":"images/aba8d9c09e6f054c7061ddd720a04a26147951.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"source/images/23a44974ff68a08261fb675242b83648181953.png","path":"images/23a44974ff68a08261fb675242b83648181953.png","modified":0,"renderable":0},{"_id":"source/images/9ffb64cc4c64c0cb8d38dac01c89c905178456.png","path":"images/9ffb64cc4c64c0cb8d38dac01c89c905178456.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"source/images/04e73f7186a91d99181e1b5615ce9e4a318600.png","path":"images/04e73f7186a91d99181e1b5615ce9e4a318600.png","modified":0,"renderable":0},{"_id":"source/images/292888-20190913111130827-1005682912.png","path":"images/292888-20190913111130827-1005682912.png","modified":0,"renderable":0},{"_id":"source/images/cd0b9445c3c93a866201b7cfb24d2ce7214776.png","path":"images/cd0b9445c3c93a866201b7cfb24d2ce7214776.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"source/images/292888-20190913110608100-591376294.png","path":"images/292888-20190913110608100-591376294.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/images/725a3db5114d95675f2098c12dc331c3316963.png","path":"images/725a3db5114d95675f2098c12dc331c3316963.png","modified":0,"renderable":0},{"_id":"source/images/292888-20190913110836624-260052587.png","path":"images/292888-20190913110836624-260052587.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/56ab763273b2c03b2f1c37db7b150338414771.png","path":"images/56ab763273b2c03b2f1c37db7b150338414771.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1586829904665},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1586829904667},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1586829904669},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1586829904668},{"_id":"themes/landscape/_config.yml","hash":"00cae20862725275aa0a822bc31c6f22f669a986","modified":1586932471995},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1586829904750},{"_id":"source/_posts/hello-world.md","hash":"f928c133e09992a944f4c1f9332e70daef42bd64","modified":1587972750284},{"_id":"source/images/1a1746f33bfdcb03da074d8539ebb2f367563.png","hash":"3fca02c8a93e95f30a5800205f318823fa851f47","modified":1590137552812},{"_id":"source/images/31bad766983e212431077ca8da92762050214.png","hash":"2c0de451e4d4489fbeba8678649cd1f8310a7a73","modified":1590137494735},{"_id":"source/images/453525.png","hash":"d01eebe435cc53fd539818975ea4663ccad4338d","modified":1590139058443},{"_id":"source/images/4d5c410ad23782350cc9f980787151fd54144.png","hash":"1a186fbb50ca9cabef65728197f6215c5a5d4550","modified":1590137580556},{"_id":"source/images/54546254.png","hash":"9303b987c671d17121f9fd744c3dd73b5fd76ecc","modified":1590139040071},{"_id":"source/images/582d1606d57ff99aa0e5f8fc59c7819329028.png","hash":"e8b2219d72495f0ce181267012eda4bfa0ab56cc","modified":1590137481326},{"_id":"source/images/668e3c90f4b918bfcead2f4280091e9757284.png","hash":"dbee066e040141b957ea66fe39e587ffef26c502","modified":1590137561088},{"_id":"source/images/879edb4f06043d76cea27a3ff358cb1d45243.png","hash":"666a6c1afe503a1f423f98ab9a2a0ef9c8a5ad4c","modified":1590137539864},{"_id":"source/images/90ea093549782945f2c968403fdc39d415386.png","hash":"b0c998e7ca7f6894a1a024080e344ca73ec24436","modified":1590137535892},{"_id":"source/images/912883e51327e0c7a9d753d11896326511272.png","hash":"760736a96e81c75278cee92fec4ac0cea4e1044f","modified":1590137472891},{"_id":"source/images/9d8dc9cebe59122127460f81a98894bb34085.png","hash":"94aa10857d5caec527636002fea0c32d0223840e","modified":1590137525459},{"_id":"source/images/1df932840b31f41931bb69e16be2932844240.png","hash":"7bdf23635f898212c35938157a2048a24aaf7059","modified":1590137556525},{"_id":"source/images/c6caa5be64f39758ada0593b995d65fd25982.png","hash":"0fbc41534084a1b503d301724ac4733f0e64e251","modified":1590137574608},{"_id":"source/images/f4d89c87acf102b45be8ccf3ed83352a9497.png","hash":"3c1b843f8b28d88448453610b07b26ba9a514d8a","modified":1590137499391},{"_id":"source/images/forkjoin_任务拆分.png","hash":"3721c728c26bdf6000c427c01fe6e5908af4d828","modified":1589300495563},{"_id":"source/images/e9a363c8577f211577e4962e9110cb0226733.png","hash":"a3f29d568d21fbaeefe56090c92aa4c6145099e1","modified":1590137545465},{"_id":"source/images/getmint_20200427144736.png","hash":"879734f8a1873b85a05d8628d118e0b591f757af","modified":1587970065746},{"_id":"source/images/java_time_task.png","hash":"ee743a48922fa17710c2dcfe53ef546a423d2c02","modified":1587969932965},{"_id":"source/images/nio-channels.png","hash":"522fa8d62503a9ac2e1945468f41f0c2123fdfef","modified":1589963436858},{"_id":"source/images/nio-buffer.png","hash":"e724e9416ad18d8c4eab363b8e94bbab81ea823a","modified":1589963365027},{"_id":"source/images/thread-pool.png","hash":"56158822d1748d09df256b6fbb0cc194279bb261","modified":1590137460214},{"_id":"source/images/reduceTask-类图.png","hash":"954e1ff05b583e8b5034ea88e92eb5e8f1aaf51a","modified":1589299908977},{"_id":"source/images/实际的请求.png","hash":"8c8dc9bedb249c32fcbb9b84a9edb1d6b7354bed","modified":1587020200916},{"_id":"source/images/授权图.png","hash":"c53271422e6eec963cdb3a932e9fa7fc5e50d8db","modified":1587090474770},{"_id":"source/about/me.md","hash":"433111ff1e646d26c9d1e0a0053e35f0c6e8d058","modified":1586942818856},{"_id":"source/java/schedule.md","hash":"2b275b4ffc608149aa14c7dc64911392aef296ed","modified":1587966329315},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1586829904673},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1586829904695},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1586829904690},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1586829904696},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1586829904698},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1586829904701},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1586829904702},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1586829904703},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1586829904704},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1586829904705},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1586829904693},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1586829904691},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1586829904743},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1586829904744},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1586829904745},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1586829904747},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1586829904749},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1586829904750},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1586829904754},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1586829904742},{"_id":"source/images/03268b9dc49bd30bb63064421bb036bf90315.png","hash":"b0c262b8fac8719b16e48d682eda551c502e0a0b","modified":1590137521071},{"_id":"source/images/38d5fbeaebd4998f3a30d44bd20b996f113233.png","hash":"7b72510519dab2536f29083bd71927f8297c3cd5","modified":1590137611337},{"_id":"source/images/49527b1bb385f0f43529e57b614f59ae145454.png","hash":"0a074128e2ce0e5b4ecb9150840955c87d56f662","modified":1590137529553},{"_id":"source/images/49d8041f8480aba5ef59079fcc7143b996706.png","hash":"35e854f54bf0d82929391a286f864eecbfce5eb3","modified":1590137509280},{"_id":"source/images/6c0091e92e90f50f89fd83f3b9eb5472135718.png","hash":"b415d338edddade8784d4abf2073da41c110cb24","modified":1590137584437},{"_id":"source/images/9379fe1666818237f842138812bf63bd85645.png","hash":"bb3c7f4e7a804107370b6f0fc4e5474968c071dd","modified":1590137592180},{"_id":"source/images/efd32f1211e9cf0a3ca9d35b0dc5de8588353.png","hash":"fbc0856d57d029002d0f477090119f241492b90f","modified":1590137588531},{"_id":"source/images/forkjoin_工作窃取（双端队列）.png","hash":"aec7d59935c478457f278fb8067889b3796f2c89","modified":1589300818637},{"_id":"source/images/io.png","hash":"1ecf71a3d7e34dc6e795253af7ccee75fbe3a725","modified":1589962492312},{"_id":"source/images/关系模型.png","hash":"ea5cc6af49fcfdebc8043110c4614dc7815fdb2c","modified":1587027123024},{"_id":"source/images/架构.png","hash":"7abeb879caae31427083894e67e82b91aaf27562","modified":1587034586532},{"_id":"source/_posts/java/IO-NIO-reader-line.md","hash":"c7e84bd3db897fc7664ae47b8d376bfba132eb83","modified":1589957320102},{"_id":"source/_posts/blockChain/blockChain.md","hash":"0285bc0b55f33614b77e413b8b41b6c9303de3bd","modified":1586951901906},{"_id":"source/_posts/java/IO-NIO2.md","hash":"bfc6277e6399b560191c03f98db1d7eda8668f76","modified":1589964330726},{"_id":"source/_posts/java/Java-thread-pool.md","hash":"5ff885808df4d94050becd4b1cb550e61a554b59","modified":1590137978696},{"_id":"source/_posts/java/Java.md","hash":"7a6f7138d7f5bdcb7f8c79ab5543d93f7f26d67f","modified":1586938753895},{"_id":"source/_posts/java/disruptor.md","hash":"98f5c1a3963850cdeaab358a73b4064d76e75d5f","modified":1587974892602},{"_id":"source/_posts/java/j2ee.md","hash":"1c27facd0ec5fcdc491ee3bb163407a2572890dc","modified":1586947033515},{"_id":"source/_posts/java/java-syc-AQS.md","hash":"7f5908e23bcf7e2ea26a57f41c2b24584eca58c4","modified":1590140944412},{"_id":"source/_posts/java/IO-NIO.md","hash":"9f4aebc99a43f6872d9a3fc4ccdef2ef31384365","modified":1586938777778},{"_id":"source/_posts/java/jdk8-function-lambda.md","hash":"b8fdd2b76e117b97be872b9ef398c8bfa1b9054a","modified":1586939116918},{"_id":"source/_posts/java/jvm.md","hash":"549a127f6f56a63dcab2b12a0d813e7d64eaadf3","modified":1586947033471},{"_id":"source/_posts/java/proxy.md","hash":"0ddf66131833d0878d5cb86ca7b05f7640befdea","modified":1586939377541},{"_id":"source/_posts/java/schedule.md","hash":"eb9e2153663e2b39c09cd8d7a2fccf2db8a574a6","modified":1587970101795},{"_id":"source/_posts/java/thread-forkJoin.md","hash":"32641e36119794712231308a9d8ee17080f0c05c","modified":1589303510093},{"_id":"source/_posts/java/thread.md","hash":"db8e34ce7d3477474797a2c41d2fd3a9a3d01a7e","modified":1586938754135},{"_id":"source/_posts/about/me.md","hash":"a209e7b777b1a00358864423ac046e2981939922","modified":1586942970033},{"_id":"source/_posts/java/collection.md","hash":"f0a913d70a308236a2d59a96010103d8fdc2de0e","modified":1586941670762},{"_id":"source/_posts/linux/linux.md","hash":"dacbe04658220684c037efe958914c2bbe809c9a","modified":1586951755272},{"_id":"source/_posts/microservices/microservices.md","hash":"332ef5f527d40ed0e65b2dc54187e2b01b35eea7","modified":1586952043880},{"_id":"source/_posts/middleware/middleware.md","hash":"2d5816d2192081a1a10f5f4454c897dbc3c0e5f2","modified":1586951991314},{"_id":"source/_posts/orm/orm.md","hash":"60329922683b54c87bd65dfadfb31c8bda23d390","modified":1586952090865},{"_id":"source/_posts/algorithms/algorithms.md","hash":"5b23eea743e19506dadbc76867a29d871f79548d","modified":1586951830178},{"_id":"source/_posts/packageManager/packageManager.md","hash":"bf55ca08f17ef9c0cde5aac9cc4c2f0a4507c4f5","modified":1586952217449},{"_id":"source/_posts/server/server.md","hash":"68b7bb76ec4e933140e2e0ab408c8712aea1b20b","modified":1586952308746},{"_id":"source/_posts/sql/sql.md","hash":"188c7b1a85b8d138e56971594b326265e7830619","modified":1586952346783},{"_id":"source/_posts/spring/spring.md","hash":"a96e0f8748f1e662f3e0c21ff2f8b3874cb3a3f4","modified":1586952376796},{"_id":"source/images/414ba7f3abd11e5f805c58635ae10988166121.png","hash":"991cedb17c4b3f010a20ee05186544faf16f3c16","modified":1590137596290},{"_id":"source/images/aba8d9c09e6f054c7061ddd720a04a26147951.png","hash":"98c5e3d63e1864765b174120c4736313b317694b","modified":1590137608233},{"_id":"source/_posts/project/open-api.md","hash":"6967addd5a2ca677923541c7f1880d95bd72458c","modified":1587091968129},{"_id":"source/_posts/project/project.md","hash":"009e2197d98cd54fa6bb918e569764b70dafe89f","modified":1586952272237},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1586829904717},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1586829904713},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1586829904719},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1586829904720},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1586829904722},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1586829904712},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1586829904723},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1586829904724},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1586829904734},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1586829904718},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1586829904721},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1586829904738},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1586829904739},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1586829904742},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1586829904741},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1586829904740},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1586829904805},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1586829904806},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1586829904808},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1586829904809},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1586829904811},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1586829904807},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1586829904824},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1586829904823},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1586829904760},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1586829904800},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1586829904781},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1586829904829},{"_id":"source/images/23a44974ff68a08261fb675242b83648181953.png","hash":"e2f58f3b1100e92619e1a74107dc2d55ca285bde","modified":1590137569953},{"_id":"source/images/9ffb64cc4c64c0cb8d38dac01c89c905178456.png","hash":"ddcff2297b29df91df06355ee2c64e46903e9fd6","modified":1590137515554},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1586829904825},{"_id":"source/images/04e73f7186a91d99181e1b5615ce9e4a318600.png","hash":"20d6ff6ee87bb71b567d7aa35d589302c1c128b3","modified":1590137600451},{"_id":"source/images/292888-20190913111130827-1005682912.png","hash":"93e9dc44fdca0337500b3070e416afb22deb0586","modified":1589301419445},{"_id":"source/images/cd0b9445c3c93a866201b7cfb24d2ce7214776.png","hash":"2aa653ffef16579745f10034f6a8e3d7658579a3","modified":1590137604764},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1586829904727},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1586829904732},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1586829904733},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1586829904729},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1586829904731},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1586829904728},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1586829904817},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1586829904818},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1586829904822},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1586829904820},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1586829904819},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1586829904816},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1586829904767},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1586829904766},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1586829904765},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1586829904769},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1586829904770},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1586829904771},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1586829904772},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1586829904773},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1586829904774},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1586829904768},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1586829904786},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1586829904792},{"_id":"source/images/292888-20190913110608100-591376294.png","hash":"81c72625037f2c6de6f174dab59340be8714b5d7","modified":1589301323603},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1586829904778},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1586829904779},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1586829904787},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1586829904791},{"_id":"source/images/725a3db5114d95675f2098c12dc331c3316963.png","hash":"191638b733691e36493144f333e79997540748ee","modified":1590137504881},{"_id":"source/images/292888-20190913110836624-260052587.png","hash":"89eea925e392aad647ff6891936a0c1fb70a1ad1","modified":1589301489894},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1586829904789},{"_id":"source/images/56ab763273b2c03b2f1c37db7b150338414771.png","hash":"10995c179425878633d71e640aaa3230e2f32f76","modified":1590137565716},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1586829904799},{"_id":"public/about/me.html","hash":"309ad6ed5497193448dc9c9df598ce1fcb07f81d","modified":1590140970533},{"_id":"public/java/schedule.html","hash":"fe01e6a53419dde1cb8a98125b115838ad34f62a","modified":1590140970533},{"_id":"public/2020/05/22/java/java-syc-AQS/index.html","hash":"8338f77a0901c89f37b41f6036f3667b8156d8da","modified":1590140970533},{"_id":"public/2020/05/22/java/Java-thread-pool/index.html","hash":"cf364b1f6e09d4618cfba81b5d90f9a4b8bae6f9","modified":1590140970533},{"_id":"public/2020/05/20/java/IO-NIO2/index.html","hash":"c81b759f20ca37e5ce85c0d2dd9ebaa615436784","modified":1590140970533},{"_id":"public/2020/05/20/java/IO-NIO-reader-line/index.html","hash":"52d12492ea67236afabdfc6f052906923ce3ff95","modified":1590140970533},{"_id":"public/2020/05/13/java/thread-forkJoin/index.html","hash":"e880828bf2169abeae49a48f0044d71939c70770","modified":1590140970533},{"_id":"public/2020/04/27/java/disruptor/index.html","hash":"e59f46e181077a0196a667665d22734a77b1dea8","modified":1590140970533},{"_id":"public/2020/04/27/hello-world/index.html","hash":"eb0e3fa8f5f57fd970f0c927f332ea8524a64e6b","modified":1590140970533},{"_id":"public/2020/04/27/java/schedule/index.html","hash":"a6739c29033c5538ded616aaa3f28958679c2373","modified":1590140970533},{"_id":"public/2020/04/15/project/open-api/index.html","hash":"64c29c2ad559abca29ccba08861fd3dfa4b08f86","modified":1590140970533},{"_id":"public/2020/04/15/spring/spring/index.html","hash":"7b959e84d2cc47648565eb44419a5f163c67b3ee","modified":1590140970533},{"_id":"public/2020/04/15/sql/sql/index.html","hash":"1cb4b7b72bdc002a8326eb199eba7d3d103d85ab","modified":1590140970533},{"_id":"public/2020/04/15/server/server/index.html","hash":"6e19bd2272f11556d74ab5b9df45e37b8f6f7d78","modified":1590140970533},{"_id":"public/2020/04/15/project/project/index.html","hash":"61b4241d1363888d3a99045f3f4c148dc136ae87","modified":1590140970533},{"_id":"public/2020/04/15/packageManager/packageManager/index.html","hash":"39998b339336eae0661228c291c774013ac6af4c","modified":1590140970533},{"_id":"public/2020/04/15/orm/orm/index.html","hash":"f51d66a6ce37bfc9d8d9fcbbe0ab3e57d6720def","modified":1590140970533},{"_id":"public/2020/04/15/microservices/microservices/index.html","hash":"53ae7c39494583974e902b217cb5f50e05bfe4d1","modified":1590140970533},{"_id":"public/2020/04/15/middleware/middleware/index.html","hash":"7c452d8b5761ee606e5629c7d6ee1ce2f65dcb9f","modified":1590140970533},{"_id":"public/2020/04/15/blockChain/blockChain/index.html","hash":"3a19a69c87ce540fc8c6a6c281f1a96e4c60b386","modified":1590140970533},{"_id":"public/2020/04/15/algorithms/algorithms/index.html","hash":"b2c0a4a3925a133c31a3c80bc7115141b15d1623","modified":1590140970533},{"_id":"public/2020/04/15/linux/linux/index.html","hash":"21e620d12118f55ce48ec1b6ef660b631164f8ac","modified":1590140970533},{"_id":"public/2020/04/15/about/me/index.html","hash":"3c5df5e8b684e345d1299acebafb9427e2497ae5","modified":1590140970533},{"_id":"public/2020/04/15/java/collection/index.html","hash":"ecd32a6ae72027fbe37b4ee77483fdb157bff6ec","modified":1590140970533},{"_id":"public/2020/04/15/java/jvm/index.html","hash":"fe8984747b0dca2a88da73907875026b63d6fee4","modified":1590140970533},{"_id":"public/2020/04/15/java/proxy/index.html","hash":"0012a8efabd57f79513f49d02e90f7d46dd38422","modified":1590140970533},{"_id":"public/2020/04/15/java/j2ee/index.html","hash":"0a8e0751908a636fd79a2a0798eaf87539cbfb3c","modified":1590140970533},{"_id":"public/2020/04/15/java/thread/index.html","hash":"3ba6dc984c869aeb396afd5987d5532b181403e2","modified":1590140970533},{"_id":"public/2020/04/15/java/jdk8-function-lambda/index.html","hash":"8ace1e217dae8553bfb84f9842582f6b9b0167a3","modified":1590140970533},{"_id":"public/2020/04/15/java/IO-NIO/index.html","hash":"0312912ba1e3936be66e83c2acdae17099f9e8b7","modified":1590140970533},{"_id":"public/2020/04/15/java/Java/index.html","hash":"52ab08023c1f116cd02e674912a0443a5c0d3f52","modified":1590140970533},{"_id":"public/index.html","hash":"02ebdfd97d854357c92e9b715f40c13faac1fcda","modified":1590140970533},{"_id":"public/page/2/index.html","hash":"6b2d34976de81f96aae0e713ad6a238bdc3b7eae","modified":1590140970533},{"_id":"public/page/3/index.html","hash":"e9e24b4548cdb9ba2c1ced178d1ddc720a5f73ce","modified":1590140970533},{"_id":"public/archives/index.html","hash":"42e5e90f6850ec084666dc57a0becae246798483","modified":1590140970533},{"_id":"public/archives/page/2/index.html","hash":"1efad33947ab2ae552f7d7a46e49d131936845b5","modified":1590140970533},{"_id":"public/archives/page/3/index.html","hash":"96a006bd1d3cfee0eed9730453c9c0e9dc02e6c1","modified":1590140970533},{"_id":"public/archives/2020/index.html","hash":"387ae65553a9826e841059e99fa8b17f31fd982b","modified":1590140970533},{"_id":"public/archives/2020/page/2/index.html","hash":"14a457815c2ceaf37077569e9ade03d92de11776","modified":1590140970533},{"_id":"public/archives/2020/page/3/index.html","hash":"be89551933ce94bcb92dae69c4c8ccbffa824b41","modified":1590140970533},{"_id":"public/archives/2020/04/index.html","hash":"34e5d35ceaf939da5e216267914b66a346f1c5ba","modified":1590140970533},{"_id":"public/archives/2020/04/page/2/index.html","hash":"c96d31342bb37ebc174109e4363da95ecd81fdf6","modified":1590140970533},{"_id":"public/archives/2020/04/page/3/index.html","hash":"4002cccf190bf70962bad7fb0f45d3f783b651ec","modified":1590140970533},{"_id":"public/archives/2020/05/index.html","hash":"633b1031677905bc5267e52c105da2d78d935cad","modified":1590140970533},{"_id":"public/categories/区块链/index.html","hash":"5308db8e7dc3ca79fea8ab449812b3de6290914c","modified":1590140970533},{"_id":"public/categories/java/index.html","hash":"e3249029ea2dd5df30f6725eaef203e694e76ac3","modified":1590140970533},{"_id":"public/categories/java/page/2/index.html","hash":"a7cd7fc357f05aa2c4fbbe31309073036b1e505d","modified":1590140970533},{"_id":"public/categories/区块链/blockChina/index.html","hash":"2c2a549190349e05d047490b77b3f7665580862c","modified":1590140970533},{"_id":"public/categories/java/jvm/index.html","hash":"03038d86113333f3aa1692dab0946de34e999e05","modified":1590140970533},{"_id":"public/categories/java/proxy/index.html","hash":"338772e31f28d722b5e1afded5fe1e7d6b5c030a","modified":1590140970533},{"_id":"public/categories/java/j2ee/index.html","hash":"95aac15566d2a79bcd7719661401cb08de39502a","modified":1590140970533},{"_id":"public/categories/java/thread/index.html","hash":"6d22de7fbb890f275f3a9da7d4e79c58b6a97e7c","modified":1590140970533},{"_id":"public/categories/java/collection/index.html","hash":"16d08852cc2ca01a7c4da1850c154a5f2bb97315","modified":1590140970533},{"_id":"public/categories/java/IO-NIO/index.html","hash":"e0d6beb869e3cf66cb8c4073304c98cbefb30b5f","modified":1590140970533},{"_id":"public/categories/linux/index.html","hash":"f4dd9ab8e5ff12edcf8d25f7adbd8ab6ab54ed8d","modified":1590140970533},{"_id":"public/categories/分布式与微服务/index.html","hash":"64a60e5981e2912ef83b8aa591d61fd1db72e999","modified":1590140970533},{"_id":"public/categories/中间件/index.html","hash":"076d39a18f3e2db11baa7585f36d881129565423","modified":1590140970533},{"_id":"public/categories/ORM/index.html","hash":"41eef14918c9805dead564a7ee890ca9c5b4ae50","modified":1590140970533},{"_id":"public/categories/java/jdk8/index.html","hash":"299dd5ab8b64123f5364aeb5dba2e40c17698e4a","modified":1590140970533},{"_id":"public/categories/数据结构与算法/index.html","hash":"ebd30f8d03270b7138edeeab05187ab7eb4d631b","modified":1590140970533},{"_id":"public/categories/数据库/index.html","hash":"8757d5e6d2953bb12acceb1c3b74f4c04a91af3c","modified":1590140970533},{"_id":"public/categories/包管理/index.html","hash":"8bfa3d69019cfbbb3a4c1f755ee1f1de272641cc","modified":1590140970533},{"_id":"public/categories/服务器/index.html","hash":"025610158c259d45b4cfb73f81589ad90aedc402","modified":1590140970533},{"_id":"public/categories/spring/index.html","hash":"77f81acb1c93d002268a56cd5cdb1f087a9baba8","modified":1590140970533},{"_id":"public/categories/linux/linux/index.html","hash":"ded03b2ed86c82a6fd83ff7a4401e8ba4d1646f3","modified":1590140970533},{"_id":"public/categories/分布式与微服务/microservices/index.html","hash":"e7109f3c1bbe5d7e45f4424e6a0bba8365309a8f","modified":1590140970533},{"_id":"public/categories/中间件/middleware/index.html","hash":"78ff4954d0201fd557b172f1a95b9bcbb4b29310","modified":1590140970533},{"_id":"public/categories/ORM/orm/index.html","hash":"b0a8d27c0025ecc59aaab2fa0341c25f801c82a1","modified":1590140970533},{"_id":"public/categories/数据结构与算法/algorithms/index.html","hash":"cb8a2b382e41bc30f2860a7ea0935bd51b84d221","modified":1590140970533},{"_id":"public/categories/数据库/sql/index.html","hash":"4685a68069da45d29f3ebe67e58a99c64b2aa6d3","modified":1590140970533},{"_id":"public/categories/包管理/packageManager/index.html","hash":"bcc589defaa857c6288c492d02aae237da8233cf","modified":1590140970533},{"_id":"public/categories/服务器/server/index.html","hash":"dd72cc7c5b51390d16e078f3a45531b9ff986f51","modified":1590140970533},{"_id":"public/categories/spring/spring/index.html","hash":"d5a87d16d614ce1c6e7640f73f11a2795a6c3c6c","modified":1590140970533},{"_id":"public/categories/项目/index.html","hash":"875b00c36b09897573bc1e632df0c80c3a2576cc","modified":1590140970533},{"_id":"public/categories/java/read-line/index.html","hash":"4460caf1af8235eef9f1ed4bea1ca2eb25044f36","modified":1590140970533},{"_id":"public/categories/项目/project/index.html","hash":"cb348aea6ad228254e0eac173f711fac5fa3198e","modified":1590140970533},{"_id":"public/categories/项目/Open-API/index.html","hash":"5e66b9aaad89ac0cadeb83006c0e2fe43b48a56b","modified":1590140970533},{"_id":"public/categories/java/schedule/index.html","hash":"db14c122bb815c9077741c030dfe9cfebdab1d0b","modified":1590140970533},{"_id":"public/categories/java/collection/queue/index.html","hash":"bca53c84a89da484d7fb749ef8880c244a2ab638","modified":1590140970533},{"_id":"public/categories/java/collection/queue/disruptor/index.html","hash":"25f4b499d940c2f1d8b84a2fb5e4fad5eea666f3","modified":1590140970533},{"_id":"public/categories/java/thread-pool/index.html","hash":"9ff0c0a3997d0ca857e27958d697cc00e218eb38","modified":1590140970533},{"_id":"public/categories/java/concurrent/index.html","hash":"b0e03f175d6d851d6aa330002af3f3019c4b4e8b","modified":1590140970533},{"_id":"public/categories/java/concurrent/AQS/index.html","hash":"0de5391de7b7dd17f5a06ad686d3bc7b9994b8bc","modified":1590140970533},{"_id":"public/tags/区块链/index.html","hash":"200200725b316620c2b17538182b5edcc594a10c","modified":1590140970533},{"_id":"public/categories/java/thread/fork-join/index.html","hash":"9520250788fdedc428d98a8ad0c2fcdffbf3f7d6","modified":1590140970533},{"_id":"public/tags/java/index.html","hash":"027546cbbc093988d62315a5e7498a4bab14305a","modified":1590140970533},{"_id":"public/tags/java/page/2/index.html","hash":"96f29e6f2473938f262c9e02546ad72235c04286","modified":1590140970533},{"_id":"public/tags/io/index.html","hash":"0dda74d1be4dd0fe5bc6c33198fa66ff56b6db39","modified":1590140970533},{"_id":"public/tags/nio/index.html","hash":"0a92f27c478c3a44286a93939ee49e9327593446","modified":1590140970533},{"_id":"public/tags/jdk8/index.html","hash":"c5acd31ab6f636cf1483d469044c23999285dfd5","modified":1590140970533},{"_id":"public/tags/lambda/index.html","hash":"f21b3f9653904b94e3283fb91b860d72f50ee314","modified":1590140970533},{"_id":"public/tags/function-函数式编程/index.html","hash":"374e59a52a61d058b9862aeb3bf0944f0bd0a84e","modified":1590140970533},{"_id":"public/tags/proxy/index.html","hash":"5bdc3a2879ab56987efe92348c98546a01188c86","modified":1590140970533},{"_id":"public/tags/javassist/index.html","hash":"d61267bf16382f939aad4492354656d5698b678d","modified":1590140970533},{"_id":"public/tags/jdk-动态代理/index.html","hash":"a9cc203801defaebfc7f6f5c726c7e1ff0d0b59f","modified":1590140970533},{"_id":"public/tags/cglib-动态代理/index.html","hash":"922db33219def629b61b7720ccfc0253c7c8c17f","modified":1590140970533},{"_id":"public/tags/thread/index.html","hash":"270289095f37a9d1d385ed6db730d3d1f7f16b47","modified":1590140970533},{"_id":"public/tags/synchronized-lock/index.html","hash":"7d8be3bb04cd29d9feac4ff56f51a7f98239f537","modified":1590140970533},{"_id":"public/tags/ThreadPoolExecutor/index.html","hash":"7b2bfeb738f25a32ff1f1045f3c91a10e7f51a6c","modified":1590140970533},{"_id":"public/tags/fork-join/index.html","hash":"b332bd620e7889549542a3891b93c9e2fb598b98","modified":1590140970533},{"_id":"public/tags/schedule/index.html","hash":"6344fc1b2444949073228128b7d934e2c7b37081","modified":1590140970533},{"_id":"public/tags/linux/index.html","hash":"fc1c221630957318a7c363eaaf16b21a14e07865","modified":1590140970533},{"_id":"public/tags/分布式与微服务/index.html","hash":"c3b7354b580970d9018d293c25799a0e5a49789d","modified":1590140970533},{"_id":"public/tags/中间件/index.html","hash":"753efd62a6ea0574220c9d40124fca5b14d84d4d","modified":1590140970533},{"_id":"public/tags/ORM/index.html","hash":"769fcd92774ae622b1629ba3c4492077646da63a","modified":1590140970533},{"_id":"public/tags/数据结构与算法/index.html","hash":"9cad855d0d72a6b39b9d5ee257ea054c66dd1ad4","modified":1590140970533},{"_id":"public/tags/数据库/index.html","hash":"cf24c333fcb65d8cafc2a0620285cb4ca1c6469b","modified":1590140970533},{"_id":"public/tags/包管理/index.html","hash":"6111ed5e74d6408cb258d5423e94ea56adb5b30c","modified":1590140970533},{"_id":"public/tags/服务器/index.html","hash":"cc8b336e97127c32be951c67ad0b158514587f99","modified":1590140970533},{"_id":"public/tags/spring/index.html","hash":"661d59e5b03d82393000ffdb4af1b8acb37c832f","modified":1590140970533},{"_id":"public/tags/项目/index.html","hash":"654c04f34350789f652c3238bbd121845e3373a5","modified":1590140970533},{"_id":"public/tags/collection/index.html","hash":"279da06258a40c70ec7b0641f793ed99ed291569","modified":1590140970533},{"_id":"public/tags/disruptor/index.html","hash":"e7920bcd29e227f17382fb5cfe422b13d5842f4c","modified":1590140970533},{"_id":"public/tags/队列/index.html","hash":"76ea90aef8add8cd2abc68b0450d365daa3d7946","modified":1590140970533},{"_id":"public/tags/thread-pool/index.html","hash":"aea9716fb860eeeb923f743a8d78c23965dcf5f2","modified":1590140970533},{"_id":"public/tags/concurrent/index.html","hash":"91fbc329a0112c52e0509a8fc73544b7be6bbd8a","modified":1590140970533},{"_id":"public/tags/AQS/index.html","hash":"cfd8052acf0e3d8966d50d24c55ae30c144d7e31","modified":1590140970533},{"_id":"public/images/453525.png","hash":"d01eebe435cc53fd539818975ea4663ccad4338d","modified":1590140970533},{"_id":"public/images/668e3c90f4b918bfcead2f4280091e9757284.png","hash":"dbee066e040141b957ea66fe39e587ffef26c502","modified":1590140970533},{"_id":"public/images/879edb4f06043d76cea27a3ff358cb1d45243.png","hash":"666a6c1afe503a1f423f98ab9a2a0ef9c8a5ad4c","modified":1590140970533},{"_id":"public/images/90ea093549782945f2c968403fdc39d415386.png","hash":"b0c998e7ca7f6894a1a024080e344ca73ec24436","modified":1590140970533},{"_id":"public/images/912883e51327e0c7a9d753d11896326511272.png","hash":"760736a96e81c75278cee92fec4ac0cea4e1044f","modified":1590140970533},{"_id":"public/images/9d8dc9cebe59122127460f81a98894bb34085.png","hash":"94aa10857d5caec527636002fea0c32d0223840e","modified":1590140970533},{"_id":"public/images/1df932840b31f41931bb69e16be2932844240.png","hash":"7bdf23635f898212c35938157a2048a24aaf7059","modified":1590140970533},{"_id":"public/images/c6caa5be64f39758ada0593b995d65fd25982.png","hash":"0fbc41534084a1b503d301724ac4733f0e64e251","modified":1590140970533},{"_id":"public/images/f4d89c87acf102b45be8ccf3ed83352a9497.png","hash":"3c1b843f8b28d88448453610b07b26ba9a514d8a","modified":1590140970533},{"_id":"public/images/forkjoin_任务拆分.png","hash":"3721c728c26bdf6000c427c01fe6e5908af4d828","modified":1590140970533},{"_id":"public/images/e9a363c8577f211577e4962e9110cb0226733.png","hash":"a3f29d568d21fbaeefe56090c92aa4c6145099e1","modified":1590140970533},{"_id":"public/images/getmint_20200427144736.png","hash":"879734f8a1873b85a05d8628d118e0b591f757af","modified":1590140970533},{"_id":"public/images/java_time_task.png","hash":"ee743a48922fa17710c2dcfe53ef546a423d2c02","modified":1590140970533},{"_id":"public/images/thread-pool.png","hash":"56158822d1748d09df256b6fbb0cc194279bb261","modified":1590140970533},{"_id":"public/images/reduceTask-类图.png","hash":"954e1ff05b583e8b5034ea88e92eb5e8f1aaf51a","modified":1590140970533},{"_id":"public/images/实际的请求.png","hash":"8c8dc9bedb249c32fcbb9b84a9edb1d6b7354bed","modified":1590140970533},{"_id":"public/images/授权图.png","hash":"c53271422e6eec963cdb3a932e9fa7fc5e50d8db","modified":1590140970533},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1590140970533},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1590140970533},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1590140970533},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1590140970533},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1590140970533},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1590140970533},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1590140970533},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1590140970533},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1590140970533},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1590140970533},{"_id":"public/images/1a1746f33bfdcb03da074d8539ebb2f367563.png","hash":"3fca02c8a93e95f30a5800205f318823fa851f47","modified":1590140970533},{"_id":"public/images/31bad766983e212431077ca8da92762050214.png","hash":"2c0de451e4d4489fbeba8678649cd1f8310a7a73","modified":1590140970533},{"_id":"public/images/4d5c410ad23782350cc9f980787151fd54144.png","hash":"1a186fbb50ca9cabef65728197f6215c5a5d4550","modified":1590140970533},{"_id":"public/images/54546254.png","hash":"9303b987c671d17121f9fd744c3dd73b5fd76ecc","modified":1590140970533},{"_id":"public/images/582d1606d57ff99aa0e5f8fc59c7819329028.png","hash":"e8b2219d72495f0ce181267012eda4bfa0ab56cc","modified":1590140970533},{"_id":"public/images/nio-channels.png","hash":"522fa8d62503a9ac2e1945468f41f0c2123fdfef","modified":1590140970533},{"_id":"public/images/nio-buffer.png","hash":"e724e9416ad18d8c4eab363b8e94bbab81ea823a","modified":1590140970533},{"_id":"public/images/03268b9dc49bd30bb63064421bb036bf90315.png","hash":"b0c262b8fac8719b16e48d682eda551c502e0a0b","modified":1590140970533},{"_id":"public/images/38d5fbeaebd4998f3a30d44bd20b996f113233.png","hash":"7b72510519dab2536f29083bd71927f8297c3cd5","modified":1590140970533},{"_id":"public/images/49d8041f8480aba5ef59079fcc7143b996706.png","hash":"35e854f54bf0d82929391a286f864eecbfce5eb3","modified":1590140970533},{"_id":"public/images/9379fe1666818237f842138812bf63bd85645.png","hash":"bb3c7f4e7a804107370b6f0fc4e5474968c071dd","modified":1590140970533},{"_id":"public/images/efd32f1211e9cf0a3ca9d35b0dc5de8588353.png","hash":"fbc0856d57d029002d0f477090119f241492b90f","modified":1590140970533},{"_id":"public/images/forkjoin_工作窃取（双端队列）.png","hash":"aec7d59935c478457f278fb8067889b3796f2c89","modified":1590140970533},{"_id":"public/images/io.png","hash":"1ecf71a3d7e34dc6e795253af7ccee75fbe3a725","modified":1590140970533},{"_id":"public/images/架构.png","hash":"7abeb879caae31427083894e67e82b91aaf27562","modified":1590140970533},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1590140970533},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1590140970533},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1590140970533},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1590140970533},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1590140970533},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1590140970533},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1590140970533},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1590140970533},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1590140970533},{"_id":"public/images/49527b1bb385f0f43529e57b614f59ae145454.png","hash":"0a074128e2ce0e5b4ecb9150840955c87d56f662","modified":1590140970533},{"_id":"public/images/6c0091e92e90f50f89fd83f3b9eb5472135718.png","hash":"b415d338edddade8784d4abf2073da41c110cb24","modified":1590140970533},{"_id":"public/images/414ba7f3abd11e5f805c58635ae10988166121.png","hash":"991cedb17c4b3f010a20ee05186544faf16f3c16","modified":1590140970533},{"_id":"public/images/aba8d9c09e6f054c7061ddd720a04a26147951.png","hash":"98c5e3d63e1864765b174120c4736313b317694b","modified":1590140970533},{"_id":"public/images/23a44974ff68a08261fb675242b83648181953.png","hash":"e2f58f3b1100e92619e1a74107dc2d55ca285bde","modified":1590140970533},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1590140970533},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1590140970533},{"_id":"public/images/关系模型.png","hash":"ea5cc6af49fcfdebc8043110c4614dc7815fdb2c","modified":1590140970533},{"_id":"public/images/9ffb64cc4c64c0cb8d38dac01c89c905178456.png","hash":"ddcff2297b29df91df06355ee2c64e46903e9fd6","modified":1590140970533},{"_id":"public/images/04e73f7186a91d99181e1b5615ce9e4a318600.png","hash":"20d6ff6ee87bb71b567d7aa35d589302c1c128b3","modified":1590140970533},{"_id":"public/images/cd0b9445c3c93a866201b7cfb24d2ce7214776.png","hash":"2aa653ffef16579745f10034f6a8e3d7658579a3","modified":1590140970533},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1590140970533},{"_id":"public/images/292888-20190913111130827-1005682912.png","hash":"93e9dc44fdca0337500b3070e416afb22deb0586","modified":1590140970533},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1590140970533},{"_id":"public/images/725a3db5114d95675f2098c12dc331c3316963.png","hash":"191638b733691e36493144f333e79997540748ee","modified":1590140970533},{"_id":"public/images/292888-20190913110608100-591376294.png","hash":"81c72625037f2c6de6f174dab59340be8714b5d7","modified":1590140970533},{"_id":"public/images/292888-20190913110836624-260052587.png","hash":"89eea925e392aad647ff6891936a0c1fb70a1ad1","modified":1590140970533},{"_id":"public/images/56ab763273b2c03b2f1c37db7b150338414771.png","hash":"10995c179425878633d71e640aaa3230e2f32f76","modified":1590140970533}],"Category":[{"name":"区块链","_id":"ckai0vmv30005a4ja0thif37o"},{"name":"java","_id":"ckai0vmv9000aa4jaadgc23jg"},{"name":"blockChina","parent":"ckai0vmv30005a4ja0thif37o","_id":"ckai0vmvj000ra4jad4ty2qgx"},{"name":"jvm","parent":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmvq0010a4jaczftbqox"},{"name":"proxy","parent":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmvu0018a4ja7jrtbijh"},{"name":"j2ee","parent":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmw1001ea4ja2v2g5qq3"},{"name":"thread","parent":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmw2001ia4ja1o8z5ilv"},{"name":"collection","parent":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmw4001ma4jaey7q7xrf"},{"name":"IO/NIO","parent":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmw6001sa4jafj7t7oak"},{"name":"linux","_id":"ckai0vmw9001ya4ja3jqy7psy"},{"name":"分布式与微服务","_id":"ckai0vmwa0022a4ja68khfxnr"},{"name":"中间件","_id":"ckai0vmwb0025a4jaa4p223cz"},{"name":"ORM","_id":"ckai0vmwc0029a4ja42fc6hsp"},{"name":"jdk8","parent":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmwd002da4ja8lrkaabx"},{"name":"数据结构与算法","_id":"ckai0vmwf002ga4ja2vsh7l8w"},{"name":"数据库","_id":"ckai0vmwg002ja4jadr5d6jfd"},{"name":"包管理","_id":"ckai0vmwg002ma4ja18l94k8r"},{"name":"服务器","_id":"ckai0vmwi002qa4ja3dwcce5y"},{"name":"spring","_id":"ckai0vmwj002ua4ja0wc4aotm"},{"name":"linux","parent":"ckai0vmw9001ya4ja3jqy7psy","_id":"ckai0vmwk002ya4ja1ooudzzt"},{"name":"microservices","parent":"ckai0vmwa0022a4ja68khfxnr","_id":"ckai0vmwl0033a4ja7deihtd4"},{"name":"middleware","parent":"ckai0vmwb0025a4jaa4p223cz","_id":"ckai0vmwm0037a4ja86qvduxy"},{"name":"orm","parent":"ckai0vmwc0029a4ja42fc6hsp","_id":"ckai0vmwn003ca4jafv1sh4vz"},{"name":"algorithms","parent":"ckai0vmwf002ga4ja2vsh7l8w","_id":"ckai0vmwo003ha4ja594z9e98"},{"name":"sql","parent":"ckai0vmwg002ja4jadr5d6jfd","_id":"ckai0vmwp003ma4jabw0t5oiw"},{"name":"packageManager","parent":"ckai0vmwg002ma4ja18l94k8r","_id":"ckai0vmwq003ra4ja14gie8h3"},{"name":"server","parent":"ckai0vmwi002qa4ja3dwcce5y","_id":"ckai0vmwr003va4jacob9cwg9"},{"name":"spring","parent":"ckai0vmwj002ua4ja0wc4aotm","_id":"ckai0vmws003ya4jahbzdh05c"},{"name":"项目","_id":"ckai0vmx40046a4ja529zcwll"},{"name":"read line","parent":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmx8004ba4jacyno8hz3"},{"name":"project","parent":"ckai0vmx40046a4ja529zcwll","_id":"ckai0vmxa004ha4jad33nhpgp"},{"name":"Open API","parent":"ckai0vmx40046a4ja529zcwll","_id":"ckai0vmxb004ka4jac05kbxe4"},{"name":"schedule","parent":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmxi004ta4ja53n5ccgj"},{"name":"queue","parent":"ckai0vmw4001ma4jaey7q7xrf","_id":"ckai0vmxo0053a4ja4bww1go4"},{"name":"disruptor","parent":"ckai0vmxo0053a4ja4bww1go4","_id":"ckai0vmxq0055a4jabfhu6hdp"},{"name":"thread-pool","parent":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmxx005ia4jagsnl413t"},{"name":"concurrent","parent":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmxz005ka4ja5zn8997a"},{"name":"AQS","parent":"ckai0vmxz005ka4ja5zn8997a","_id":"ckai0vmy0005qa4jacsnwgcoa"},{"name":"fork/join","parent":"ckai0vmw2001ia4ja1o8z5ilv","_id":"ckai0vmy6005za4jaga6s2acv"}],"Data":[],"Page":[{"title":"About me","date":"2020-04-15T09:26:58.000Z","_content":"","source":"about/me.md","raw":"---\ntitle: About me\ndate: 2020-04-15 17:26:58\n---\n","updated":"2020-04-15T09:26:58.856Z","path":"about/me.html","comments":1,"layout":"page","_id":"ckai0vmtr0000a4jahremdw9l","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"schedule","date":"2020-04-27T05:45:29.000Z","_content":"","source":"java/schedule.md","raw":"---\ntitle: schedule\ndate: 2020-04-27 13:45:29\n---\n","updated":"2020-04-27T05:45:29.315Z","path":"java/schedule.html","comments":1,"layout":"page","_id":"ckai0vmu00002a4jaf9pf5xxc","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n## test\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n# 创建layout为 `post-java` 且路径为 java/schedule 文件名为chedule\n$ hexo new post-java  -p \"java/schedule\" schedule\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n## test\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n# 创建layout为 `post-java` 且路径为 java/schedule 文件名为chedule\n$ hexo new post-java  -p \"java/schedule\" schedule\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-04-27T07:32:30.284Z","updated":"2020-04-27T07:32:30.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmtv0001a4ja94750zp2","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><h2 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br><span class=\"line\"><span class=\"comment\"># 创建layout为 `post-java` 且路径为 java/schedule 文件名为chedule</span></span><br><span class=\"line\">$ hexo new post-java  -p <span class=\"string\">\"java/schedule\"</span> schedule</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><h2 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br><span class=\"line\"><span class=\"comment\"># 创建layout为 `post-java` 且路径为 java/schedule 文件名为chedule</span></span><br><span class=\"line\">$ hexo new post-java  -p <span class=\"string\">\"java/schedule\"</span> schedule</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"blockChina","date":"2020-04-15T11:58:21.000Z","_content":"","source":"_posts/blockChain/blockChain.md","raw":"---\ntitle: blockChina\ntags:\n  - 区块链\ncategories:\n  - 区块链\n  - blockChina\ndate: 2020-04-15 19:58:21\n---\n","slug":"blockChain/blockChain","published":1,"updated":"2020-04-15T11:58:21.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmuz0003a4ja03eg2691","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Java","date":"2020-04-15T07:38:43.000Z","_content":"","source":"_posts/java/Java.md","raw":"---\ntitle: Java\ndate: 2020-04-15 15:38:43\ntags:\n    - java\ncategories:\n    - java\n---\n","slug":"java/Java","published":1,"updated":"2020-04-15T08:19:13.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmv10004a4ja4gz63zul","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"j2ee","date":"2020-04-15T08:21:08.000Z","_content":"","source":"_posts/java/j2ee.md","raw":"---\ntitle: j2ee\ndate: 2020-04-15 16:21:08\ntags:\n    - java\ncategories:\n    - java\n    - j2ee\n---\n","slug":"java/j2ee","published":1,"updated":"2020-04-15T10:37:13.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmv70007a4ja2djm515c","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Java IO/NIO 对比","date":"2020-04-15T07:59:27.000Z","_content":"#### JAVA IO VS NIO\n* JDK 1.4 之前，java.io 包，面向流的I/O系统（字节流或者字符流）\n  * 系统一次处理一个字节\n  * 处理速度慢\n* JDK 1.4 提供，java.nio 包，面向块的I/O系统\n  * 系统一次处理一个块\n  * 处理速度快","source":"_posts/java/IO-NIO.md","raw":"---\ntitle: Java IO/NIO 对比\ndate: 2020-04-15 15:59:27\ntags:\n    - java\n    - io\n    - nio\ncategories:\n    - java\n    - IO/NIO\n---\n#### JAVA IO VS NIO\n* JDK 1.4 之前，java.io 包，面向流的I/O系统（字节流或者字符流）\n  * 系统一次处理一个字节\n  * 处理速度慢\n* JDK 1.4 提供，java.nio 包，面向块的I/O系统\n  * 系统一次处理一个块\n  * 处理速度快","slug":"java/IO-NIO","published":1,"updated":"2020-04-15T08:19:37.778Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmv80008a4jaante7q1v","content":"<h4 id=\"JAVA-IO-VS-NIO\"><a href=\"#JAVA-IO-VS-NIO\" class=\"headerlink\" title=\"JAVA IO VS NIO\"></a>JAVA IO VS NIO</h4><ul>\n<li>JDK 1.4 之前，java.io 包，面向流的I/O系统（字节流或者字符流）<ul>\n<li>系统一次处理一个字节</li>\n<li>处理速度慢</li>\n</ul>\n</li>\n<li>JDK 1.4 提供，java.nio 包，面向块的I/O系统<ul>\n<li>系统一次处理一个块</li>\n<li>处理速度快</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"JAVA-IO-VS-NIO\"><a href=\"#JAVA-IO-VS-NIO\" class=\"headerlink\" title=\"JAVA IO VS NIO\"></a>JAVA IO VS NIO</h4><ul>\n<li>JDK 1.4 之前，java.io 包，面向流的I/O系统（字节流或者字符流）<ul>\n<li>系统一次处理一个字节</li>\n<li>处理速度慢</li>\n</ul>\n</li>\n<li>JDK 1.4 提供，java.nio 包，面向块的I/O系统<ul>\n<li>系统一次处理一个块</li>\n<li>处理速度快</li>\n</ul>\n</li>\n</ul>\n"},{"title":"jdk8 function lambda","date":"2020-04-15T08:09:14.000Z","_content":"","source":"_posts/java/jdk8-function-lambda.md","raw":"---\ntitle: jdk8 function lambda\ndate: 2020-04-15 16:09:14\ntags:\n    - java\n    - jdk8\n    - lambda\n    - function/函数式编程\ncategories:\n    - java\n    - jdk8\n---\n","slug":"java/jdk8-function-lambda","published":1,"updated":"2020-04-15T08:25:16.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmv90009a4ja83a46125","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"jvm","date":"2020-04-15T08:24:15.000Z","_content":"","source":"_posts/java/jvm.md","raw":"---\ntitle: jvm\ndate: 2020-04-15 16:24:15\ntags:\n    - java\ncategories:\n    - java\n    - jvm\n---\n","slug":"java/jvm","published":1,"updated":"2020-04-15T10:37:13.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmva000da4jacd71de37","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"proxy","date":"2020-04-15T08:21:41.000Z","_content":"","source":"_posts/java/proxy.md","raw":"---\ntitle: proxy\ndate: 2020-04-15 16:21:41\ntags:\n    - java\n    - proxy\n    - javassist\n    - jdk 动态代理\n    - cglib 动态代理\ncategories:\n    - java\n    - proxy\n---\n","slug":"java/proxy","published":1,"updated":"2020-04-15T08:29:37.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmvb000ea4jaekhsbp9r","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"page","date":"2020-04-15T09:29:29.000Z","_content":"","source":"_posts/about/me.md","raw":"---\ntitle: page\ndate: 2020-04-15 17:29:29\ntags:\n---\n","slug":"about/me","published":1,"updated":"2020-04-15T09:29:30.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmve000ia4ja1b8o7l6y","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Java 线程相关 线程池","date":"2020-04-15T08:14:40.000Z","_content":"","source":"_posts/java/thread.md","raw":"---\ntitle: Java 线程相关 线程池\ndate: 2020-04-15 16:14:40\ntags:\n    - java\n    - thread\n    - synchronized/lock\n    - ThreadPoolExecutor\n    - fork/join\n    - schedule\ncategories:\n    - java\n    - thread\n---\n","slug":"java/thread","published":1,"updated":"2020-04-15T08:19:14.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmvf000ka4jagdze0ehv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"java 容器","date":"2020-04-15T09:06:56.000Z","_content":"","source":"_posts/java/collection.md","raw":"---\ntitle: java 容器\ntags:\n  - java\ncategories:\n  - java\n  - collection\ndate: 2020-04-15 17:06:56\n---\n","slug":"java/collection","published":1,"updated":"2020-04-15T09:07:50.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmvg000oa4ja96x22c94","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"linux","date":"2020-04-15T11:55:55.000Z","_content":"","source":"_posts/linux/linux.md","raw":"---\ntitle: linux\ntags:\n  - linux\ncategories:\n  - linux\n  - linux\ndate: 2020-04-15 19:55:55\n---\n","slug":"linux/linux","published":1,"updated":"2020-04-15T11:55:55.272Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmvi000qa4ja489e69wt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"microservices","date":"2020-04-15T12:00:43.000Z","_content":"","source":"_posts/microservices/microservices.md","raw":"---\ntitle: microservices\ntags:\n  - 分布式与微服务\ncategories:\n  - 分布式与微服务\n  - microservices\ndate: 2020-04-15 20:00:43\n---\n","slug":"microservices/microservices","published":1,"updated":"2020-04-15T12:00:43.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmvl000ua4jaa76i214q","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"middleware","date":"2020-04-15T11:59:51.000Z","_content":"","source":"_posts/middleware/middleware.md","raw":"---\ntitle: middleware\ntags:\n  - 中间件\ncategories:\n  - 中间件\n  - middleware\ndate: 2020-04-15 19:59:51\n---\n","slug":"middleware/middleware","published":1,"updated":"2020-04-15T11:59:51.314Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmvn000va4jaeqla8lbc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"orm","date":"2020-04-15T12:01:30.000Z","_content":"","source":"_posts/orm/orm.md","raw":"---\ntitle: orm\ntags:\n  - ORM\ncategories:\n  - ORM\n  - orm\ndate: 2020-04-15 20:01:30\n---\n","slug":"orm/orm","published":1,"updated":"2020-04-15T12:01:30.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmvo000ya4ja6ebpbliu","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"algorithms","date":"2020-04-15T11:57:09.000Z","_content":"","source":"_posts/algorithms/algorithms.md","raw":"---\ntitle: algorithms\ntags:\n  - 数据结构与算法\ncategories:\n  - 数据结构与算法\n  - algorithms\ndate: 2020-04-15 19:57:09\n---\n","slug":"algorithms/algorithms","published":1,"updated":"2020-04-15T11:57:10.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmvp000za4ja4qak09ac","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"sql","date":"2020-04-15T12:05:46.000Z","_content":"","source":"_posts/sql/sql.md","raw":"---\ntitle: sql\ntags:\n  - 数据库\ncategories:\n  - 数据库\n  - sql\ndate: 2020-04-15 20:05:46\n---\n","slug":"sql/sql","published":1,"updated":"2020-04-15T12:05:46.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmvr0013a4jacgok27jg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"packageManager","date":"2020-04-15T12:03:37.000Z","_content":"","source":"_posts/packageManager/packageManager.md","raw":"---\ntitle: packageManager\ntags:\n  - 包管理\ncategories:\n  - 包管理\n  - packageManager\ndate: 2020-04-15 20:03:37\n---\n","slug":"packageManager/packageManager","published":1,"updated":"2020-04-15T12:03:37.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmvt0016a4ja47iw0ton","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"server","date":"2020-04-15T12:05:08.000Z","_content":"","source":"_posts/server/server.md","raw":"---\ntitle: server\ntags:\n  - 服务器\ncategories:\n  - 服务器\n  - server\ndate: 2020-04-15 20:05:08\n---\n","slug":"server/server","published":1,"updated":"2020-04-15T12:05:08.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmvz001aa4ja6f5549le","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"spring","date":"2020-04-15T12:06:16.000Z","_content":"","source":"_posts/spring/spring.md","raw":"---\ntitle: spring\ntags:\n  - spring\ncategories:\n  - spring\n  - spring\ndate: 2020-04-15 20:06:16\n---\n","slug":"spring/spring","published":1,"updated":"2020-04-15T12:06:16.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmw0001ca4ja3757gsrp","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"project","date":"2020-04-15T12:04:32.000Z","_content":"","source":"_posts/project/project.md","raw":"---\ntitle: project\ntags:\n  - 项目\ncategories:\n  - 项目\n  - project\ndate: 2020-04-15 20:04:32\n---\n","slug":"project/project","published":1,"updated":"2020-04-15T12:04:32.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmx30044a4ja3c8242uj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"scanner、buffer reader、jdk8 stream、apache common io 效率对比","date":"2020-05-20T06:48:27.000Z","_content":"  \n## 文件行读效率测试\n\n## scanner、buffer reader、jdk8 stream、apache common io\n\n### 一、先看下代码\n\n```java\npublic static void main(String[] args) throws IOException {\n        File file = new File(FILE_PATH);\n\n        // scanner\n        System.out.println(\"------------************************-------------\");\n        System.out.println(\">>>>>>scanner 开始 >>>>>>>\");\n        Long cur = System.currentTimeMillis();\n        scanner(file);\n        System.out.println(\"scanner 耗时[\" + (System.currentTimeMillis() - cur) + \"]ms\");\n        System.out.println(\"<<<<<<<scanner 结束 <<<<<<<\");\n        System.out.println(\"------------************************-------------\");\n        System.out.println();\n\n        // buffer reader\n        System.out.println(\"------------************************-------------\");\n        System.out.println(\">>>>>>buffer reader 开始 >>>>>>>\");\n        cur = System.currentTimeMillis();\n        bufferReader(file);\n        System.out.println(\"buffer reader 耗时[\" + (System.currentTimeMillis() - cur) + \"]ms\");\n        System.out.println(\"<<<<<<<buffer reader 结束 <<<<<<<\");\n        System.out.println(\"------------************************-------------\");\n        System.out.println();\n\n        // JDK8\n        System.out.println(\"------------************************-------------\");\n        System.out.println(\">>>>>>JDK8 stream开始 >>>>>>>\");\n        cur = System.currentTimeMillis();\n        jdk8Reader(FILE_PATH);\n        System.out.println(\"JDK8 stream 耗时[\" + (System.currentTimeMillis() - cur) + \"]ms\");\n        System.out.println(\"<<<<<<<JDK8 stream 结束 <<<<<<<\");\n        System.out.println(\"------------************************-------------\");\n        System.out.println();\n\n        // apache common io\n        System.out.println(\"------------************************-------------\");\n        System.out.println(\">>>>>>apache common io >>>>>>>\");\n        cur = System.currentTimeMillis();\n        commonIo(file);\n        System.out.println(\"apache common io 耗时[\" + (System.currentTimeMillis() - cur) + \"]ms\");\n        System.out.println(\"<<<<<<<apache common io 结束 <<<<<<<\");\n        System.out.println(\"------------************************-------------\");\n\n    }\n\n    private static void commonIo(File file) throws IOException {\n        int total = 0;\n        try (LineIterator lineIterator = FileUtils.lineIterator(file, \"UTF-8\")) {\n            while (lineIterator.hasNext()) {\n                lineIterator.next();\n                total += 1;\n            }\n        } finally {\n            System.out.println(\"[总行数]:\" + total);\n        }\n    }\n\n    /**\n     * JDK8\n     *\n     * @param filePath\n     * @throws IOException\n     */\n    private static void jdk8Reader(String filePath) throws IOException {\n        // Files.readAllLine 内部使用的是buffer reader\n//        Files.readAllLines(file.toPath());\n        int total = 0;\n        try (Stream<String> stream = Files.lines(Paths.get(filePath), StandardCharsets.UTF_8)) {\n            total = stream.reduce(0, (cur, op) -> cur + 1, (a, b) -> a + b);\n        } finally {\n            System.out.println(\"[总行数]:\" + total);\n        }\n    }\n\n    /**\n     * buffer reader\n     *\n     * @param file\n     * @throws IOException\n     */\n    private static void bufferReader(File file) throws IOException {\n        int total = 0;\n        try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n            for (String line; (line = br.readLine()) != null; total++);\n            // line is not visible here.\n        } finally {\n            System.out.println(\"[总行数]:\" + total);\n        }\n    }\n\n    private static void scanner(File file) throws FileNotFoundException {\n        int total = 0;\n        try(Scanner scanner = new Scanner(file)){\n            while (scanner.hasNextLine()) {\n                scanner.nextLine();\n                total+=1;\n            }\n        } finally {\n            System.out.println(\"[总行数]:\" + total);\n        }\n    }\n```\n\n#### 100W条真实数据测试结果：\n\n```java\n------------************************-------------\n>>>>>>scanner 开始 >>>>>>>\n[总行数]:1056322\nscanner 耗时[8379]ms\n<<<<<<<scanner 结束 <<<<<<<\n------------************************-------------\n    \n------------************************-------------\n>>>>>>buffer reader 开始 >>>>>>>\n[总行数]:1056322\nbuffer reader 耗时[901]ms\n<<<<<<<buffer reader 结束 <<<<<<<\n------------************************-------------\n    \n------------************************-------------\n>>>>>>JDK8 stream开始 >>>>>>>\n[总行数]:1056322\nJDK8 stream 耗时[916]ms\n<<<<<<<JDK8 stream 结束 <<<<<<<\n------------************************-------------\n    \n------------************************-------------\n>>>>>>apache common io >>>>>>>\n[总行数]:1056322\napache common io 耗时[929]ms\n<<<<<<<apache common io 结束 <<<<<<<\n------------************************-------------\n```\n\n#### 1000W条真实数据测试结果：\n\n```java\n------------************************-------------\n>>>>>>scanner 开始 >>>>>>>\n[总行数]:10563211\nscanner 耗时[79109]ms\n<<<<<<<scanner 结束 <<<<<<<\n------------************************-------------\n\n------------************************-------------\n>>>>>>buffer reader 开始 >>>>>>>\n[总行数]:10563211\nbuffer reader 耗时[8477]ms\n<<<<<<<buffer reader 结束 <<<<<<<\n------------************************-------------\n\n------------************************-------------\n>>>>>>JDK8 stream开始 >>>>>>>\n[总行数]:10563211\nJDK8 stream 耗时[8623]ms\n<<<<<<<JDK8 stream 结束 <<<<<<<\n------------************************-------------\n\n------------************************-------------\n>>>>>>apache common io >>>>>>>\n[总行数]:10563211\napache common io 耗时[8573]ms\n<<<<<<<apache common io 结束 <<<<<<<\n------------************************-------------\n```\n\n总结：\n\nscanner：\n\n```java\n// Tries to read more input. May block.\nprivate void readInput() {\n    if (buf.limit() == buf.capacity())\n        makeSpace();\n\n    // Prepare to receive data\n    int p = buf.position();\n    buf.position(buf.limit());\n    buf.limit(buf.capacity());\n\n    int n = 0;\n    try {\n        n = source.read(buf);\n    } catch (IOException ioe) {\n        lastException = ioe;\n        n = -1;\n    }\n\n    if (n == -1) {\n        sourceClosed = true;\n        needInput = false;\n    }\n\n    if (n > 0)\n        needInput = false;\n\n    // Restore current position and limit for reading\n    buf.limit(buf.position());\n    buf.position(p);\n}\n```\n\nbuffer reader\n\n```java\n// 初始大小为8192字节\nprivate static int defaultCharBufferSize = 8192;\nprivate static int defaultExpectedLineLength = 80;\n\nString readLine(boolean ignoreLF) throws IOException {\n    StringBuffer s = null;\n    int startChar;\n\n    synchronized (lock) {\n        ensureOpen();\n        boolean omitLF = ignoreLF || skipLF;\n\n    bufferLoop:\n        for (;;) {\n\n            if (nextChar >= nChars)\n                fill();\n            if (nextChar >= nChars) { /* EOF */\n                if (s != null && s.length() > 0)\n                    return s.toString();\n                else\n                    return null;\n            }\n            boolean eol = false;\n            char c = 0;\n            int i;\n\n            /* Skip a leftover '\\n', if necessary */\n            if (omitLF && (cb[nextChar] == '\\n'))\n                nextChar++;\n            skipLF = false;\n            omitLF = false;\n\n        charLoop:\n            for (i = nextChar; i < nChars; i++) {\n                c = cb[i];\n                if ((c == '\\n') || (c == '\\r')) {\n                    eol = true;\n                    break charLoop;\n                }\n            }\n\n            startChar = nextChar;\n            nextChar = i;\n\n            if (eol) {\n                String str;\n                if (s == null) {\n                    str = new String(cb, startChar, i - startChar);\n                } else {\n                    s.append(cb, startChar, i - startChar);\n                    str = s.toString();\n                }\n                nextChar++;\n                if (c == '\\r') {\n                    skipLF = true;\n                }\n                return str;\n            }\n\n            if (s == null)\n                s = new StringBuffer(defaultExpectedLineLength);\n            s.append(cb, startChar, i - startChar);\n        }\n    }\n}\n```\n\nJDK stream\n\n```java\npublic static Stream<String> lines(Path path, Charset cs) throws IOException {\n    // 实际也用的buffer reader\n    BufferedReader br = Files.newBufferedReader(path, cs);\n    try {\n        return br.lines().onClose(asUncheckedRunnable(br));\n    } catch (Error|RuntimeException e) {\n        try {\n            br.close();\n        } catch (IOException ex) {\n            try {\n                e.addSuppressed(ex);\n            } catch (Throwable ignore) {}\n        }\n        throw e;\n    }\n}\n```\n\ncommon io\n\n```java\npublic boolean hasNext() {\n    if (this.cachedLine != null) {\n        return true;\n    } else if (this.finished) {\n        return false;\n    } else {\n        try {\n            String line;\n            do {\n                line = this.bufferedReader.readLine();\n                if (line == null) {\n                    this.finished = true;\n                    return false;\n                }\n            } while(!this.isValidLine(line));\n\n            this.cachedLine = line;\n            return true;\n        } catch (IOException var4) {\n            try {\n                this.close();\n            } catch (IOException var3) {\n                var4.addSuppressed(var3);\n            }\n\n            throw new IllegalStateException(var4);\n        }\n    }\n}\n```\n\n所以出了Scanner用的自己的缓存机制，其他的都用的buffer reader的缓存机制，所以后面的三种方法效果差不多，不过笔者还是喜欢jdk8的stream机制，所以选择了jdk8的","source":"_posts/java/IO-NIO-reader-line.md","raw":"---\ntitle: scanner、buffer reader、jdk8 stream、apache common io 效率对比\ndate: 2020-05-20 14:48:27\ntags:\n    - java\n    - io\n    - nio\ncategories:\n    - java\n    - read line\n---\n  \n## 文件行读效率测试\n\n## scanner、buffer reader、jdk8 stream、apache common io\n\n### 一、先看下代码\n\n```java\npublic static void main(String[] args) throws IOException {\n        File file = new File(FILE_PATH);\n\n        // scanner\n        System.out.println(\"------------************************-------------\");\n        System.out.println(\">>>>>>scanner 开始 >>>>>>>\");\n        Long cur = System.currentTimeMillis();\n        scanner(file);\n        System.out.println(\"scanner 耗时[\" + (System.currentTimeMillis() - cur) + \"]ms\");\n        System.out.println(\"<<<<<<<scanner 结束 <<<<<<<\");\n        System.out.println(\"------------************************-------------\");\n        System.out.println();\n\n        // buffer reader\n        System.out.println(\"------------************************-------------\");\n        System.out.println(\">>>>>>buffer reader 开始 >>>>>>>\");\n        cur = System.currentTimeMillis();\n        bufferReader(file);\n        System.out.println(\"buffer reader 耗时[\" + (System.currentTimeMillis() - cur) + \"]ms\");\n        System.out.println(\"<<<<<<<buffer reader 结束 <<<<<<<\");\n        System.out.println(\"------------************************-------------\");\n        System.out.println();\n\n        // JDK8\n        System.out.println(\"------------************************-------------\");\n        System.out.println(\">>>>>>JDK8 stream开始 >>>>>>>\");\n        cur = System.currentTimeMillis();\n        jdk8Reader(FILE_PATH);\n        System.out.println(\"JDK8 stream 耗时[\" + (System.currentTimeMillis() - cur) + \"]ms\");\n        System.out.println(\"<<<<<<<JDK8 stream 结束 <<<<<<<\");\n        System.out.println(\"------------************************-------------\");\n        System.out.println();\n\n        // apache common io\n        System.out.println(\"------------************************-------------\");\n        System.out.println(\">>>>>>apache common io >>>>>>>\");\n        cur = System.currentTimeMillis();\n        commonIo(file);\n        System.out.println(\"apache common io 耗时[\" + (System.currentTimeMillis() - cur) + \"]ms\");\n        System.out.println(\"<<<<<<<apache common io 结束 <<<<<<<\");\n        System.out.println(\"------------************************-------------\");\n\n    }\n\n    private static void commonIo(File file) throws IOException {\n        int total = 0;\n        try (LineIterator lineIterator = FileUtils.lineIterator(file, \"UTF-8\")) {\n            while (lineIterator.hasNext()) {\n                lineIterator.next();\n                total += 1;\n            }\n        } finally {\n            System.out.println(\"[总行数]:\" + total);\n        }\n    }\n\n    /**\n     * JDK8\n     *\n     * @param filePath\n     * @throws IOException\n     */\n    private static void jdk8Reader(String filePath) throws IOException {\n        // Files.readAllLine 内部使用的是buffer reader\n//        Files.readAllLines(file.toPath());\n        int total = 0;\n        try (Stream<String> stream = Files.lines(Paths.get(filePath), StandardCharsets.UTF_8)) {\n            total = stream.reduce(0, (cur, op) -> cur + 1, (a, b) -> a + b);\n        } finally {\n            System.out.println(\"[总行数]:\" + total);\n        }\n    }\n\n    /**\n     * buffer reader\n     *\n     * @param file\n     * @throws IOException\n     */\n    private static void bufferReader(File file) throws IOException {\n        int total = 0;\n        try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n            for (String line; (line = br.readLine()) != null; total++);\n            // line is not visible here.\n        } finally {\n            System.out.println(\"[总行数]:\" + total);\n        }\n    }\n\n    private static void scanner(File file) throws FileNotFoundException {\n        int total = 0;\n        try(Scanner scanner = new Scanner(file)){\n            while (scanner.hasNextLine()) {\n                scanner.nextLine();\n                total+=1;\n            }\n        } finally {\n            System.out.println(\"[总行数]:\" + total);\n        }\n    }\n```\n\n#### 100W条真实数据测试结果：\n\n```java\n------------************************-------------\n>>>>>>scanner 开始 >>>>>>>\n[总行数]:1056322\nscanner 耗时[8379]ms\n<<<<<<<scanner 结束 <<<<<<<\n------------************************-------------\n    \n------------************************-------------\n>>>>>>buffer reader 开始 >>>>>>>\n[总行数]:1056322\nbuffer reader 耗时[901]ms\n<<<<<<<buffer reader 结束 <<<<<<<\n------------************************-------------\n    \n------------************************-------------\n>>>>>>JDK8 stream开始 >>>>>>>\n[总行数]:1056322\nJDK8 stream 耗时[916]ms\n<<<<<<<JDK8 stream 结束 <<<<<<<\n------------************************-------------\n    \n------------************************-------------\n>>>>>>apache common io >>>>>>>\n[总行数]:1056322\napache common io 耗时[929]ms\n<<<<<<<apache common io 结束 <<<<<<<\n------------************************-------------\n```\n\n#### 1000W条真实数据测试结果：\n\n```java\n------------************************-------------\n>>>>>>scanner 开始 >>>>>>>\n[总行数]:10563211\nscanner 耗时[79109]ms\n<<<<<<<scanner 结束 <<<<<<<\n------------************************-------------\n\n------------************************-------------\n>>>>>>buffer reader 开始 >>>>>>>\n[总行数]:10563211\nbuffer reader 耗时[8477]ms\n<<<<<<<buffer reader 结束 <<<<<<<\n------------************************-------------\n\n------------************************-------------\n>>>>>>JDK8 stream开始 >>>>>>>\n[总行数]:10563211\nJDK8 stream 耗时[8623]ms\n<<<<<<<JDK8 stream 结束 <<<<<<<\n------------************************-------------\n\n------------************************-------------\n>>>>>>apache common io >>>>>>>\n[总行数]:10563211\napache common io 耗时[8573]ms\n<<<<<<<apache common io 结束 <<<<<<<\n------------************************-------------\n```\n\n总结：\n\nscanner：\n\n```java\n// Tries to read more input. May block.\nprivate void readInput() {\n    if (buf.limit() == buf.capacity())\n        makeSpace();\n\n    // Prepare to receive data\n    int p = buf.position();\n    buf.position(buf.limit());\n    buf.limit(buf.capacity());\n\n    int n = 0;\n    try {\n        n = source.read(buf);\n    } catch (IOException ioe) {\n        lastException = ioe;\n        n = -1;\n    }\n\n    if (n == -1) {\n        sourceClosed = true;\n        needInput = false;\n    }\n\n    if (n > 0)\n        needInput = false;\n\n    // Restore current position and limit for reading\n    buf.limit(buf.position());\n    buf.position(p);\n}\n```\n\nbuffer reader\n\n```java\n// 初始大小为8192字节\nprivate static int defaultCharBufferSize = 8192;\nprivate static int defaultExpectedLineLength = 80;\n\nString readLine(boolean ignoreLF) throws IOException {\n    StringBuffer s = null;\n    int startChar;\n\n    synchronized (lock) {\n        ensureOpen();\n        boolean omitLF = ignoreLF || skipLF;\n\n    bufferLoop:\n        for (;;) {\n\n            if (nextChar >= nChars)\n                fill();\n            if (nextChar >= nChars) { /* EOF */\n                if (s != null && s.length() > 0)\n                    return s.toString();\n                else\n                    return null;\n            }\n            boolean eol = false;\n            char c = 0;\n            int i;\n\n            /* Skip a leftover '\\n', if necessary */\n            if (omitLF && (cb[nextChar] == '\\n'))\n                nextChar++;\n            skipLF = false;\n            omitLF = false;\n\n        charLoop:\n            for (i = nextChar; i < nChars; i++) {\n                c = cb[i];\n                if ((c == '\\n') || (c == '\\r')) {\n                    eol = true;\n                    break charLoop;\n                }\n            }\n\n            startChar = nextChar;\n            nextChar = i;\n\n            if (eol) {\n                String str;\n                if (s == null) {\n                    str = new String(cb, startChar, i - startChar);\n                } else {\n                    s.append(cb, startChar, i - startChar);\n                    str = s.toString();\n                }\n                nextChar++;\n                if (c == '\\r') {\n                    skipLF = true;\n                }\n                return str;\n            }\n\n            if (s == null)\n                s = new StringBuffer(defaultExpectedLineLength);\n            s.append(cb, startChar, i - startChar);\n        }\n    }\n}\n```\n\nJDK stream\n\n```java\npublic static Stream<String> lines(Path path, Charset cs) throws IOException {\n    // 实际也用的buffer reader\n    BufferedReader br = Files.newBufferedReader(path, cs);\n    try {\n        return br.lines().onClose(asUncheckedRunnable(br));\n    } catch (Error|RuntimeException e) {\n        try {\n            br.close();\n        } catch (IOException ex) {\n            try {\n                e.addSuppressed(ex);\n            } catch (Throwable ignore) {}\n        }\n        throw e;\n    }\n}\n```\n\ncommon io\n\n```java\npublic boolean hasNext() {\n    if (this.cachedLine != null) {\n        return true;\n    } else if (this.finished) {\n        return false;\n    } else {\n        try {\n            String line;\n            do {\n                line = this.bufferedReader.readLine();\n                if (line == null) {\n                    this.finished = true;\n                    return false;\n                }\n            } while(!this.isValidLine(line));\n\n            this.cachedLine = line;\n            return true;\n        } catch (IOException var4) {\n            try {\n                this.close();\n            } catch (IOException var3) {\n                var4.addSuppressed(var3);\n            }\n\n            throw new IllegalStateException(var4);\n        }\n    }\n}\n```\n\n所以出了Scanner用的自己的缓存机制，其他的都用的buffer reader的缓存机制，所以后面的三种方法效果差不多，不过笔者还是喜欢jdk8的stream机制，所以选择了jdk8的","slug":"java/IO-NIO-reader-line","published":1,"updated":"2020-05-20T06:48:40.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmx40045a4jaceqs4ge4","content":"<h2 id=\"文件行读效率测试\"><a href=\"#文件行读效率测试\" class=\"headerlink\" title=\"文件行读效率测试\"></a>文件行读效率测试</h2><h2 id=\"scanner、buffer-reader、jdk8-stream、apache-common-io\"><a href=\"#scanner、buffer-reader、jdk8-stream、apache-common-io\" class=\"headerlink\" title=\"scanner、buffer reader、jdk8 stream、apache common io\"></a>scanner、buffer reader、jdk8 stream、apache common io</h2><h3 id=\"一、先看下代码\"><a href=\"#一、先看下代码\" class=\"headerlink\" title=\"一、先看下代码\"></a>一、先看下代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(FILE_PATH);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// scanner</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"------------************************-------------\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt;&gt;scanner 开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">        Long cur = System.currentTimeMillis();</span><br><span class=\"line\">        scanner(file);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"scanner 耗时[\"</span> + (System.currentTimeMillis() - cur) + <span class=\"string\">\"]ms\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt;&lt;&lt;scanner 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"------------************************-------------\"</span>);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// buffer reader</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"------------************************-------------\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt;&gt;buffer reader 开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">        cur = System.currentTimeMillis();</span><br><span class=\"line\">        bufferReader(file);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"buffer reader 耗时[\"</span> + (System.currentTimeMillis() - cur) + <span class=\"string\">\"]ms\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt;&lt;&lt;buffer reader 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"------------************************-------------\"</span>);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// JDK8</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"------------************************-------------\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt;&gt;JDK8 stream开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">        cur = System.currentTimeMillis();</span><br><span class=\"line\">        jdk8Reader(FILE_PATH);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"JDK8 stream 耗时[\"</span> + (System.currentTimeMillis() - cur) + <span class=\"string\">\"]ms\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt;&lt;&lt;JDK8 stream 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"------------************************-------------\"</span>);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// apache common io</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"------------************************-------------\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt;&gt;apache common io &gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">        cur = System.currentTimeMillis();</span><br><span class=\"line\">        commonIo(file);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"apache common io 耗时[\"</span> + (System.currentTimeMillis() - cur) + <span class=\"string\">\"]ms\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt;&lt;&lt;apache common io 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"------------************************-------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">commonIo</span><span class=\"params\">(File file)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (LineIterator lineIterator = FileUtils.lineIterator(file, <span class=\"string\">\"UTF-8\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (lineIterator.hasNext()) &#123;</span><br><span class=\"line\">                lineIterator.next();</span><br><span class=\"line\">                total += <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"[总行数]:\"</span> + total);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * JDK8</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> filePath</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdk8Reader</span><span class=\"params\">(String filePath)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Files.readAllLine 内部使用的是buffer reader</span></span><br><span class=\"line\"><span class=\"comment\">//        Files.readAllLines(file.toPath());</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (Stream&lt;String&gt; stream = Files.lines(Paths.get(filePath), StandardCharsets.UTF_8)) &#123;</span><br><span class=\"line\">            total = stream.reduce(<span class=\"number\">0</span>, (cur, op) -&gt; cur + <span class=\"number\">1</span>, (a, b) -&gt; a + b);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"[总行数]:\"</span> + total);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * buffer reader</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bufferReader</span><span class=\"params\">(File file)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(file))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String line; (line = br.readLine()) != <span class=\"keyword\">null</span>; total++);</span><br><span class=\"line\">            <span class=\"comment\">// line is not visible here.</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"[总行数]:\"</span> + total);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">scanner</span><span class=\"params\">(File file)</span> <span class=\"keyword\">throws</span> FileNotFoundException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>(Scanner scanner = <span class=\"keyword\">new</span> Scanner(file))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (scanner.hasNextLine()) &#123;</span><br><span class=\"line\">                scanner.nextLine();</span><br><span class=\"line\">                total+=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"[总行数]:\"</span> + total);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"100W条真实数据测试结果：\"><a href=\"#100W条真实数据测试结果：\" class=\"headerlink\" title=\"100W条真实数据测试结果：\"></a>100W条真实数据测试结果：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">------------************************-------------</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;scanner 开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">[总行数]:<span class=\"number\">1056322</span></span><br><span class=\"line\">scanner 耗时[<span class=\"number\">8379</span>]ms</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;scanner 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\">    </span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;buffer reader 开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">[总行数]:<span class=\"number\">1056322</span></span><br><span class=\"line\">buffer reader 耗时[<span class=\"number\">901</span>]ms</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;buffer reader 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\">    </span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;JDK8 stream开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">[总行数]:<span class=\"number\">1056322</span></span><br><span class=\"line\">JDK8 stream 耗时[<span class=\"number\">916</span>]ms</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;JDK8 stream 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\">    </span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;apache common io &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">[总行数]:<span class=\"number\">1056322</span></span><br><span class=\"line\">apache common io 耗时[<span class=\"number\">929</span>]ms</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;apache common io 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class=\"line\">------------************************-------------</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1000W条真实数据测试结果：\"><a href=\"#1000W条真实数据测试结果：\" class=\"headerlink\" title=\"1000W条真实数据测试结果：\"></a>1000W条真实数据测试结果：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">------------************************-------------</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;scanner 开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">[总行数]:<span class=\"number\">10563211</span></span><br><span class=\"line\">scanner 耗时[<span class=\"number\">79109</span>]ms</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;scanner 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\"></span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;buffer reader 开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">[总行数]:<span class=\"number\">10563211</span></span><br><span class=\"line\">buffer reader 耗时[<span class=\"number\">8477</span>]ms</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;buffer reader 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\"></span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;JDK8 stream开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">[总行数]:<span class=\"number\">10563211</span></span><br><span class=\"line\">JDK8 stream 耗时[<span class=\"number\">8623</span>]ms</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;JDK8 stream 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\"></span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;apache common io &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">[总行数]:<span class=\"number\">10563211</span></span><br><span class=\"line\">apache common io 耗时[<span class=\"number\">8573</span>]ms</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;apache common io 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class=\"line\">------------************************-------------</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<p>scanner：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Tries to read more input. May block.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">readInput</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (buf.limit() == buf.capacity())</span><br><span class=\"line\">        makeSpace();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Prepare to receive data</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = buf.position();</span><br><span class=\"line\">    buf.position(buf.limit());</span><br><span class=\"line\">    buf.limit(buf.capacity());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        n = source.read(buf);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException ioe) &#123;</span><br><span class=\"line\">        lastException = ioe;</span><br><span class=\"line\">        n = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        sourceClosed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        needInput = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        needInput = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Restore current position and limit for reading</span></span><br><span class=\"line\">    buf.limit(buf.position());</span><br><span class=\"line\">    buf.position(p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>buffer reader</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始大小为8192字节</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> defaultCharBufferSize = <span class=\"number\">8192</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> defaultExpectedLineLength = <span class=\"number\">80</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">readLine</span><span class=\"params\">(<span class=\"keyword\">boolean</span> ignoreLF)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    StringBuffer s = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> startChar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">        ensureOpen();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> omitLF = ignoreLF || skipLF;</span><br><span class=\"line\"></span><br><span class=\"line\">    bufferLoop:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nextChar &gt;= nChars)</span><br><span class=\"line\">                fill();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nextChar &gt;= nChars) &#123; <span class=\"comment\">/* EOF */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s != <span class=\"keyword\">null</span> &amp;&amp; s.length() &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> s.toString();</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> eol = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/* Skip a leftover '\\n', if necessary */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (omitLF &amp;&amp; (cb[nextChar] == <span class=\"string\">'\\n'</span>))</span><br><span class=\"line\">                nextChar++;</span><br><span class=\"line\">            skipLF = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            omitLF = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        charLoop:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i = nextChar; i &lt; nChars; i++) &#123;</span><br><span class=\"line\">                c = cb[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((c == <span class=\"string\">'\\n'</span>) || (c == <span class=\"string\">'\\r'</span>)) &#123;</span><br><span class=\"line\">                    eol = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span> charLoop;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            startChar = nextChar;</span><br><span class=\"line\">            nextChar = i;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (eol) &#123;</span><br><span class=\"line\">                String str;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    str = <span class=\"keyword\">new</span> String(cb, startChar, i - startChar);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    s.append(cb, startChar, i - startChar);</span><br><span class=\"line\">                    str = s.toString();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                nextChar++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c == <span class=\"string\">'\\r'</span>) &#123;</span><br><span class=\"line\">                    skipLF = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                s = <span class=\"keyword\">new</span> StringBuffer(defaultExpectedLineLength);</span><br><span class=\"line\">            s.append(cb, startChar, i - startChar);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JDK stream</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Stream&lt;String&gt; <span class=\"title\">lines</span><span class=\"params\">(Path path, Charset cs)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实际也用的buffer reader</span></span><br><span class=\"line\">    BufferedReader br = Files.newBufferedReader(path, cs);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> br.lines().onClose(asUncheckedRunnable(br));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Error|RuntimeException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            br.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                e.addSuppressed(ex);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable ignore) &#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>common io</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.cachedLine != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.finished) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                line = <span class=\"keyword\">this</span>.bufferedReader.readLine();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (line == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.finished = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span>(!<span class=\"keyword\">this</span>.isValidLine(line));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.cachedLine = line;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException var4) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException var3) &#123;</span><br><span class=\"line\">                var4.addSuppressed(var3);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(var4);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以出了Scanner用的自己的缓存机制，其他的都用的buffer reader的缓存机制，所以后面的三种方法效果差不多，不过笔者还是喜欢jdk8的stream机制，所以选择了jdk8的</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"文件行读效率测试\"><a href=\"#文件行读效率测试\" class=\"headerlink\" title=\"文件行读效率测试\"></a>文件行读效率测试</h2><h2 id=\"scanner、buffer-reader、jdk8-stream、apache-common-io\"><a href=\"#scanner、buffer-reader、jdk8-stream、apache-common-io\" class=\"headerlink\" title=\"scanner、buffer reader、jdk8 stream、apache common io\"></a>scanner、buffer reader、jdk8 stream、apache common io</h2><h3 id=\"一、先看下代码\"><a href=\"#一、先看下代码\" class=\"headerlink\" title=\"一、先看下代码\"></a>一、先看下代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(FILE_PATH);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// scanner</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"------------************************-------------\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt;&gt;scanner 开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">        Long cur = System.currentTimeMillis();</span><br><span class=\"line\">        scanner(file);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"scanner 耗时[\"</span> + (System.currentTimeMillis() - cur) + <span class=\"string\">\"]ms\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt;&lt;&lt;scanner 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"------------************************-------------\"</span>);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// buffer reader</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"------------************************-------------\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt;&gt;buffer reader 开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">        cur = System.currentTimeMillis();</span><br><span class=\"line\">        bufferReader(file);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"buffer reader 耗时[\"</span> + (System.currentTimeMillis() - cur) + <span class=\"string\">\"]ms\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt;&lt;&lt;buffer reader 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"------------************************-------------\"</span>);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// JDK8</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"------------************************-------------\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt;&gt;JDK8 stream开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">        cur = System.currentTimeMillis();</span><br><span class=\"line\">        jdk8Reader(FILE_PATH);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"JDK8 stream 耗时[\"</span> + (System.currentTimeMillis() - cur) + <span class=\"string\">\"]ms\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt;&lt;&lt;JDK8 stream 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"------------************************-------------\"</span>);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// apache common io</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"------------************************-------------\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt;&gt;apache common io &gt;&gt;&gt;&gt;&gt;&gt;&gt;\"</span>);</span><br><span class=\"line\">        cur = System.currentTimeMillis();</span><br><span class=\"line\">        commonIo(file);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"apache common io 耗时[\"</span> + (System.currentTimeMillis() - cur) + <span class=\"string\">\"]ms\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt;&lt;&lt;apache common io 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"------------************************-------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">commonIo</span><span class=\"params\">(File file)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (LineIterator lineIterator = FileUtils.lineIterator(file, <span class=\"string\">\"UTF-8\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (lineIterator.hasNext()) &#123;</span><br><span class=\"line\">                lineIterator.next();</span><br><span class=\"line\">                total += <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"[总行数]:\"</span> + total);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * JDK8</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> filePath</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdk8Reader</span><span class=\"params\">(String filePath)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Files.readAllLine 内部使用的是buffer reader</span></span><br><span class=\"line\"><span class=\"comment\">//        Files.readAllLines(file.toPath());</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (Stream&lt;String&gt; stream = Files.lines(Paths.get(filePath), StandardCharsets.UTF_8)) &#123;</span><br><span class=\"line\">            total = stream.reduce(<span class=\"number\">0</span>, (cur, op) -&gt; cur + <span class=\"number\">1</span>, (a, b) -&gt; a + b);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"[总行数]:\"</span> + total);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * buffer reader</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bufferReader</span><span class=\"params\">(File file)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(file))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String line; (line = br.readLine()) != <span class=\"keyword\">null</span>; total++);</span><br><span class=\"line\">            <span class=\"comment\">// line is not visible here.</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"[总行数]:\"</span> + total);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">scanner</span><span class=\"params\">(File file)</span> <span class=\"keyword\">throws</span> FileNotFoundException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>(Scanner scanner = <span class=\"keyword\">new</span> Scanner(file))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (scanner.hasNextLine()) &#123;</span><br><span class=\"line\">                scanner.nextLine();</span><br><span class=\"line\">                total+=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"[总行数]:\"</span> + total);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"100W条真实数据测试结果：\"><a href=\"#100W条真实数据测试结果：\" class=\"headerlink\" title=\"100W条真实数据测试结果：\"></a>100W条真实数据测试结果：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">------------************************-------------</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;scanner 开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">[总行数]:<span class=\"number\">1056322</span></span><br><span class=\"line\">scanner 耗时[<span class=\"number\">8379</span>]ms</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;scanner 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\">    </span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;buffer reader 开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">[总行数]:<span class=\"number\">1056322</span></span><br><span class=\"line\">buffer reader 耗时[<span class=\"number\">901</span>]ms</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;buffer reader 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\">    </span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;JDK8 stream开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">[总行数]:<span class=\"number\">1056322</span></span><br><span class=\"line\">JDK8 stream 耗时[<span class=\"number\">916</span>]ms</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;JDK8 stream 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\">    </span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;apache common io &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">[总行数]:<span class=\"number\">1056322</span></span><br><span class=\"line\">apache common io 耗时[<span class=\"number\">929</span>]ms</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;apache common io 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class=\"line\">------------************************-------------</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1000W条真实数据测试结果：\"><a href=\"#1000W条真实数据测试结果：\" class=\"headerlink\" title=\"1000W条真实数据测试结果：\"></a>1000W条真实数据测试结果：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">------------************************-------------</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;scanner 开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">[总行数]:<span class=\"number\">10563211</span></span><br><span class=\"line\">scanner 耗时[<span class=\"number\">79109</span>]ms</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;scanner 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\"></span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;buffer reader 开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">[总行数]:<span class=\"number\">10563211</span></span><br><span class=\"line\">buffer reader 耗时[<span class=\"number\">8477</span>]ms</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;buffer reader 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\"></span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;JDK8 stream开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">[总行数]:<span class=\"number\">10563211</span></span><br><span class=\"line\">JDK8 stream 耗时[<span class=\"number\">8623</span>]ms</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;JDK8 stream 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\"></span><br><span class=\"line\">------------************************-------------</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;apache common io &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class=\"line\">[总行数]:<span class=\"number\">10563211</span></span><br><span class=\"line\">apache common io 耗时[<span class=\"number\">8573</span>]ms</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;apache common io 结束 &lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class=\"line\">------------************************-------------</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<p>scanner：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Tries to read more input. May block.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">readInput</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (buf.limit() == buf.capacity())</span><br><span class=\"line\">        makeSpace();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Prepare to receive data</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = buf.position();</span><br><span class=\"line\">    buf.position(buf.limit());</span><br><span class=\"line\">    buf.limit(buf.capacity());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        n = source.read(buf);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException ioe) &#123;</span><br><span class=\"line\">        lastException = ioe;</span><br><span class=\"line\">        n = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        sourceClosed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        needInput = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        needInput = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Restore current position and limit for reading</span></span><br><span class=\"line\">    buf.limit(buf.position());</span><br><span class=\"line\">    buf.position(p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>buffer reader</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始大小为8192字节</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> defaultCharBufferSize = <span class=\"number\">8192</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> defaultExpectedLineLength = <span class=\"number\">80</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">readLine</span><span class=\"params\">(<span class=\"keyword\">boolean</span> ignoreLF)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    StringBuffer s = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> startChar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">        ensureOpen();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> omitLF = ignoreLF || skipLF;</span><br><span class=\"line\"></span><br><span class=\"line\">    bufferLoop:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nextChar &gt;= nChars)</span><br><span class=\"line\">                fill();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nextChar &gt;= nChars) &#123; <span class=\"comment\">/* EOF */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s != <span class=\"keyword\">null</span> &amp;&amp; s.length() &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> s.toString();</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> eol = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/* Skip a leftover '\\n', if necessary */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (omitLF &amp;&amp; (cb[nextChar] == <span class=\"string\">'\\n'</span>))</span><br><span class=\"line\">                nextChar++;</span><br><span class=\"line\">            skipLF = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            omitLF = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        charLoop:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i = nextChar; i &lt; nChars; i++) &#123;</span><br><span class=\"line\">                c = cb[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((c == <span class=\"string\">'\\n'</span>) || (c == <span class=\"string\">'\\r'</span>)) &#123;</span><br><span class=\"line\">                    eol = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span> charLoop;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            startChar = nextChar;</span><br><span class=\"line\">            nextChar = i;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (eol) &#123;</span><br><span class=\"line\">                String str;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    str = <span class=\"keyword\">new</span> String(cb, startChar, i - startChar);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    s.append(cb, startChar, i - startChar);</span><br><span class=\"line\">                    str = s.toString();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                nextChar++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c == <span class=\"string\">'\\r'</span>) &#123;</span><br><span class=\"line\">                    skipLF = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                s = <span class=\"keyword\">new</span> StringBuffer(defaultExpectedLineLength);</span><br><span class=\"line\">            s.append(cb, startChar, i - startChar);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JDK stream</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Stream&lt;String&gt; <span class=\"title\">lines</span><span class=\"params\">(Path path, Charset cs)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实际也用的buffer reader</span></span><br><span class=\"line\">    BufferedReader br = Files.newBufferedReader(path, cs);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> br.lines().onClose(asUncheckedRunnable(br));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Error|RuntimeException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            br.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                e.addSuppressed(ex);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable ignore) &#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>common io</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.cachedLine != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.finished) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                line = <span class=\"keyword\">this</span>.bufferedReader.readLine();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (line == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.finished = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span>(!<span class=\"keyword\">this</span>.isValidLine(line));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.cachedLine = line;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException var4) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException var3) &#123;</span><br><span class=\"line\">                var4.addSuppressed(var3);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(var4);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以出了Scanner用的自己的缓存机制，其他的都用的buffer reader的缓存机制，所以后面的三种方法效果差不多，不过笔者还是喜欢jdk8的stream机制，所以选择了jdk8的</p>\n"},{"title":"Open API","date":"2020-04-15T12:16:19.000Z","_content":"\n#架构图\n### 架构类\n#### 框架上使用\n`spring`/`mybatis`/`undertow`  \n#### 服务治理使用 \n`dubbo`   \n#### 缓存服务使用\n`redis`（身份认证状态缓存，临时性字典数据缓存，提升效率）\n#### MQ\n`RocketMQ`（mq做业务解耦，流量削峰，业务驱动，回调通知队列，消息持久化和定时任务补偿保证数据不被丢失）\n#### 分布式锁服务\nzk\n#### webhook通知服务\nokhttp3、forkjoin框架、rocketMq队列、elasticJob补偿\n#### 流量控制\nnginx、lua、redis、mq\n#### 服务稳定性\nhystrix 熔断\n#### 模块划分\n    接口模块-----api\n        核心模块----core\n        管理端模块----manager\n        webhook回调通知模块----webhook --> 订阅event --> 消息letter生成 -->入库 -->生成待发送队列（两级队列：内存队列20w，rocketMQ消息队列；一个补偿任务elasticJob)-->\n\n   \n![架构](/images/架构.png)\n\n# Open API 介绍\n\nOpenAPI 项目是基于REST标准来设计的，为保证统一和安全，全局编码格式为UTF-8，全局使用https。我们的API具有可预测的面向资源的url，返回json编码的响应，并使用标准的HTTP响应代码、身份验证和请求动词。\n\n为了数据准确性和生产环境数据安全，建议在沙盒环境测试这些接口.\n\n# 版本控制\n\n当我们对API进行向后不兼容的更改时，我们会发布新版本。要使用的版本在URL中指定。当前版本是v1，比如:\n\n    https://api.itmarte.com/payments/v1/...\n\n# 授权认证\n\n在不同的对接场景下Open API存在两种认证方式（用户开发者和第三方应用开发者，通常情况下申请用户开发者），使用http头`Authorization`做认证：   \n![授权图](/images/授权图.png)\n### 用户开发者模式\n\n创建了用户开发者之后，会收到给您返回的`developerId`、`masterToken`（`masterToken`能行使用户所有权限，请您务必安全保管）和`LLP_RSA_PUB_KEY.pem`，身份认证格式如下:\n\n    Authorization: Basic &lt;&lt;Base64.encode(developerId:masterToken)&gt;&gt;\n\n### 第三方应用开发者模式\n\n创建第三方应用开发者之后，会收到`clientId`、`clientSecret`和`LLP_RSA_PUB_KEY.pem`，至于`accessToken`则需要通过OAuth2.0模式向有资源的用户申请，身份认证格式如下:\n\n    Authorization: Bearer &lt;&lt;accessToken&gt;&gt;\n\n# 请求安全\n\n为了请求安全防止重放攻击，要求所有请求都得有签名认证，在http头定义了`xxx-Signature`字段作为签名信息载体，`xxx-Signature`头文件中包含了请求包体和响应的epoch时间戳（是指格林威治时间1970年01月01日00时00分00秒起至现在的总秒数）例如：`xxx-Signature:t=&lt;&lt;epoch&gt;&gt;,v=&lt;&lt;signature&gt;&gt;`，一个请求的有效时间是5分钟。下面介绍下请求的签名格式：\n\n### 请求签名\n\n2. 对`HTTP请求方式`、`URI`、`请求epoch时间`（单位秒）、`请求包体`的数据按照一定顺序用字符串“&”做拼接后使用对接方的`RSA私钥`通过`SHA256WithRSA`算法做签名并用`Base64编码`，生成的签名字符串（`signature`）和`epoch`时间放入HTTP包头的`xxx-Signature`标签中，格式为：\n\n<!---->\n\n   \n    xxx-Signature:t=&lt;&lt;epoch&gt;&gt;,v=&lt;&lt;signature&gt;&gt;\n   \n\n**第一步:** 确定签名`payload`\n\n如下字段请用`&`一次连接\n\n- `HTTP_METHOD`: 对应实际接口的方法（统一用大写），如`POST`、`PUT`、`GET`、`DELETE`等；\n- `URI`: 请求的URI地址（除去host）.  例如`https://api.sandbox.itmarte.com/collections/v1/merchants`中`/collections/v1/merchants`为URI\n- `REQUEST_EPOCH`: 是指格林威治时间1970年01月01日00时00分00秒起至现在的总秒数,该值应与`t`值保持一致\n- `REQUEST_PAYLOAD`: 请求包体  `{\"currency\":\"USD\"}`\n- `QUERY_STRING`: 查询字段例如：`https://api.sandbox.itmarte.com/collections/v1/merchants?attr1=value1&attr2=value2`,其中`QUERY_STRING`=`attr1=value1&attr2=value2`格式化为`attr1%3Dvalue1%26attr2%3Dvalue2`\n\n `payload`示例:\n\n    POST&/collections/v1/merchants&19879234&{\"currency\":\"USD\"}&attr1%3Dvalue1%26attr2%3Dvalue2\n\n**第二部:** 准备 `xxx-Signature` 签名头\n\n你会用到以下内容:\n\n- REQUEST_EPOCH (Seconds elapsed since 1970/1/1 00:00:00 GMT as a string)\n- 连接字符串 `,`\n- payload（第一步的结果）\n- your_rsa_pri_key：你的RSA私钥\n\n<!---->\n\n    xxx-Signature: t=REQUEST_EPOCH,v=BASE64_ENCODE(SHA256WithRSA.sign(&lt;&lt;payload&gt;&gt;, &lt;&lt;your_rsa_pri_key&gt;&gt;))\n\n**请求示例**\n\n    POST /api/mkt/balance HTTP/1.1 \n    Host: api.itmarte.com \n    Content-Type: application/json \n    Authorization: Basic WTgzcHNkcFdqY3J0Vml5eHVveTNyWGp2OWpzMjV3aUs6WTgzcHNkcFdqY3J0Vml5eHVveTNyWGp2OWpzMjV3aUs= \n    xxx-Signature: t=1574130344,v=cJKgD/EpqNVnITR7yZ8BIev5j1E0ub0VbG4uGA69gR4T1FFc7NzqbiBoDEOBvkQtJXytQd7dY+WDo0Qm0c6gCnRHqIEyBen6SnBk/PjhIn7H93sHMyUEbesJqB6NAzOHA4uVj+8aTfREQWxKaizkDTT1dnrBUZ7KPxz4KKzRXtZ6tEh48HKsA5xqviedc+kpilaFbFSaoJmFj760TV8FB+mKCkZSrvX1Y+4x0bqTVBXAt2kE2Z8vCH16BDtlWGLZRSlWtZWyvpz6F0a/VWYVhoBEmgNFevnYDeAMGB6VEDBE1pZLMnhxfLfz6yu/p1pv1c2N2Yk5YSahQw4lLLiqQQ== \n    Accept: */* \n    Cache-Control: no-cache \n    Content-Length: 18 \n    Connection: keep-alive \n\n    {\"currency\":\"USD\"} \n\n### 请求结果签名验证\n\n-   若请求成功返回200，包体格式查看具体接口，对响应包体使用连连支付的RSA私钥用SHA256WithRSA做签名并用Base64编码，生成的签名字符串放入HTTP包头xxx-Signature标签中，格式为xxx-Signature: t = response_epoch, v = signature。\n    其中：\n- t=响应时间戳(格林威治时间1970年01月01日00时00分00秒起至现在的总秒数)\n- v=BASE64_ENCODE(SHA256WithRSA(RESPONSE_EPOCH&RESPONSE_BODY, LLPAY_RSA_PRIVATE_KEY))\n\n**第一步:** 确定 `payload`\n\n如下字段创建`payload`用 `&` 做连接\n\n- Response Timestamp: 响应时间戳(格林威治时间1970年01月01日00时00分00秒起至现在的总秒数)\n- Response Payload: 响应包体，指定为JSON字符串如： `{\"currency\":\"USD\"}`\n\n`payload`示例:\n\n    19879234&{\"currency\":\"USD\"}\n\n**第二部:** 使用连连的RSA公钥校验签名的有效性\n\n    SHA256WithRSA.verify(xxx-Signature, '19879234&{\" currency\":\"USD\"}',  LLPAY_RSA_PRIVATE_KEY)\n\n# 响应结果\n\n**成功返回结果示例**\n\n连连通过http状态码来判断请求的结果，一个成功的请求的http状态码为2XX，请求结果为相应的objects对象，例如:\n\n```\nHTTP/1.1 200 \nstatus: 200 \nContent-Type: application/json \nContent-Length: 61\nConnection: keep-alive \nxxx-Signature:t=1574130398,v=b0VbG4uGA69gR4T1FFc7NzqbiBoDEOBvkQtJXytQd7dY+WDo0QmgR4T1FFc7NzqbiBoDEOBvkQtJXytQpzMjV3aUs6R4T1FFc7NzqbiBoDEOBvWTgzcHNkcFdqY3J0Vml5eHVc6gCnRHqIEyBen6SnBk/PjhIn7H93sHMyUEbesJqB6NAzOHA4uVj+8aTfREQWxKaizkDTT1dnrBUZ7KPxz4KKzRXtZ6tEh48HKsA5xqWGLZRSlWtZWyvpz6F0a/VWYVhoBEmgNFevkE2Z8vCH16VEDBE1pZ6VEDBE1pZ6BDBE1pZ6VEDBE1DtlWGLnYviedc+kpilaFbFSaoJmFj76==\n\n{\"currency\":\"USD\",\"balance\":\"12.25\"}\n\n```\n\n#### Errors\n\n一个失败的请求会收到4XX类的http状态码表示已知错误内容（具体错误码API文档给出），5XX的状态码表示未知的错误类型：\n\n#### Attributes\n\n**_code_** _number_\n失败码类型，数字类型，用于快速定位错误类型\n\n**_message_** _string_\n失败描述\n\n**失败返回结果示例**\n\n    HTTP/1.1 400\n    status: 400\n    Date: Tue, 19 Nov 2019 02:26:38 GMT\n    Content-Type: application/json\n    Content-Length: 77\n    Connection: keep-alive\n\n    {\"code\":\"999995\",\"message\":\"[holderType] is invalid\"}\n\n### HTTP状态码一览表\n\n| CODE               | DESCRIPTION                |\n| ------------------ | -------------------------- |\n| 400                | 请求错误，例如：参数错误               |\n| 401                | 授权认证失败或者是签名认证失败            |\n| 403                | 请求未授权                      |\n| 404                | 资源未找到，这里的资源指的是实际的Objects对象 |\n| 500, 502, 503, 504 | 系统错误                       |\n\n# 请求幂等保证\n\n实际运行场景中，由于网络原因或者其他原因导致的网络中断是不可避免的，所以连连这边特意设计了请求幂等保证操作，所有的POST、PUT、DELETE请求都可以做幂等校验，幂等请求认证成功之后，会返回最初的请求结果（5XX未知异常类型的错误除外）。\n\n你需要在http头加入`Idempotency-Key`以便让系统失败你的幂等请求：\n\n    Idempotency-Key:&lt;&lt;unique id for client &gt;&gt;\n\n# Request IDs\n\n每个API请求都有一个关联的请求标识符。您可以响应头找到`Request-Id`下这个键值。\n\n# 字段命名规范\n\n连连所有的字段命名规范为驼峰式:\n\n    https://api...com/resource/?filterBy=\"filter\"\n\n    {\n      \"storeName\": \"My Store\",\n      \"kycStatus\": \"success\"\n    }\n\n# Webhook\n\n你可以配置webhook地址来接收连连这边的回调信息（`event`），具体的回调信息（`event`）在相应的接口中定义\n\n# 对象关系模型\n![对象关系模型](/images/关系模型.png)\n\n","source":"_posts/project/open-api.md","raw":"---\ntitle: Open API\ntags:\n  - 项目\ncategories:\n  - 项目\n  - Open API\ndate: 2020-04-15 20:16:19\n---\n\n#架构图\n### 架构类\n#### 框架上使用\n`spring`/`mybatis`/`undertow`  \n#### 服务治理使用 \n`dubbo`   \n#### 缓存服务使用\n`redis`（身份认证状态缓存，临时性字典数据缓存，提升效率）\n#### MQ\n`RocketMQ`（mq做业务解耦，流量削峰，业务驱动，回调通知队列，消息持久化和定时任务补偿保证数据不被丢失）\n#### 分布式锁服务\nzk\n#### webhook通知服务\nokhttp3、forkjoin框架、rocketMq队列、elasticJob补偿\n#### 流量控制\nnginx、lua、redis、mq\n#### 服务稳定性\nhystrix 熔断\n#### 模块划分\n    接口模块-----api\n        核心模块----core\n        管理端模块----manager\n        webhook回调通知模块----webhook --> 订阅event --> 消息letter生成 -->入库 -->生成待发送队列（两级队列：内存队列20w，rocketMQ消息队列；一个补偿任务elasticJob)-->\n\n   \n![架构](/images/架构.png)\n\n# Open API 介绍\n\nOpenAPI 项目是基于REST标准来设计的，为保证统一和安全，全局编码格式为UTF-8，全局使用https。我们的API具有可预测的面向资源的url，返回json编码的响应，并使用标准的HTTP响应代码、身份验证和请求动词。\n\n为了数据准确性和生产环境数据安全，建议在沙盒环境测试这些接口.\n\n# 版本控制\n\n当我们对API进行向后不兼容的更改时，我们会发布新版本。要使用的版本在URL中指定。当前版本是v1，比如:\n\n    https://api.itmarte.com/payments/v1/...\n\n# 授权认证\n\n在不同的对接场景下Open API存在两种认证方式（用户开发者和第三方应用开发者，通常情况下申请用户开发者），使用http头`Authorization`做认证：   \n![授权图](/images/授权图.png)\n### 用户开发者模式\n\n创建了用户开发者之后，会收到给您返回的`developerId`、`masterToken`（`masterToken`能行使用户所有权限，请您务必安全保管）和`LLP_RSA_PUB_KEY.pem`，身份认证格式如下:\n\n    Authorization: Basic &lt;&lt;Base64.encode(developerId:masterToken)&gt;&gt;\n\n### 第三方应用开发者模式\n\n创建第三方应用开发者之后，会收到`clientId`、`clientSecret`和`LLP_RSA_PUB_KEY.pem`，至于`accessToken`则需要通过OAuth2.0模式向有资源的用户申请，身份认证格式如下:\n\n    Authorization: Bearer &lt;&lt;accessToken&gt;&gt;\n\n# 请求安全\n\n为了请求安全防止重放攻击，要求所有请求都得有签名认证，在http头定义了`xxx-Signature`字段作为签名信息载体，`xxx-Signature`头文件中包含了请求包体和响应的epoch时间戳（是指格林威治时间1970年01月01日00时00分00秒起至现在的总秒数）例如：`xxx-Signature:t=&lt;&lt;epoch&gt;&gt;,v=&lt;&lt;signature&gt;&gt;`，一个请求的有效时间是5分钟。下面介绍下请求的签名格式：\n\n### 请求签名\n\n2. 对`HTTP请求方式`、`URI`、`请求epoch时间`（单位秒）、`请求包体`的数据按照一定顺序用字符串“&”做拼接后使用对接方的`RSA私钥`通过`SHA256WithRSA`算法做签名并用`Base64编码`，生成的签名字符串（`signature`）和`epoch`时间放入HTTP包头的`xxx-Signature`标签中，格式为：\n\n<!---->\n\n   \n    xxx-Signature:t=&lt;&lt;epoch&gt;&gt;,v=&lt;&lt;signature&gt;&gt;\n   \n\n**第一步:** 确定签名`payload`\n\n如下字段请用`&`一次连接\n\n- `HTTP_METHOD`: 对应实际接口的方法（统一用大写），如`POST`、`PUT`、`GET`、`DELETE`等；\n- `URI`: 请求的URI地址（除去host）.  例如`https://api.sandbox.itmarte.com/collections/v1/merchants`中`/collections/v1/merchants`为URI\n- `REQUEST_EPOCH`: 是指格林威治时间1970年01月01日00时00分00秒起至现在的总秒数,该值应与`t`值保持一致\n- `REQUEST_PAYLOAD`: 请求包体  `{\"currency\":\"USD\"}`\n- `QUERY_STRING`: 查询字段例如：`https://api.sandbox.itmarte.com/collections/v1/merchants?attr1=value1&attr2=value2`,其中`QUERY_STRING`=`attr1=value1&attr2=value2`格式化为`attr1%3Dvalue1%26attr2%3Dvalue2`\n\n `payload`示例:\n\n    POST&/collections/v1/merchants&19879234&{\"currency\":\"USD\"}&attr1%3Dvalue1%26attr2%3Dvalue2\n\n**第二部:** 准备 `xxx-Signature` 签名头\n\n你会用到以下内容:\n\n- REQUEST_EPOCH (Seconds elapsed since 1970/1/1 00:00:00 GMT as a string)\n- 连接字符串 `,`\n- payload（第一步的结果）\n- your_rsa_pri_key：你的RSA私钥\n\n<!---->\n\n    xxx-Signature: t=REQUEST_EPOCH,v=BASE64_ENCODE(SHA256WithRSA.sign(&lt;&lt;payload&gt;&gt;, &lt;&lt;your_rsa_pri_key&gt;&gt;))\n\n**请求示例**\n\n    POST /api/mkt/balance HTTP/1.1 \n    Host: api.itmarte.com \n    Content-Type: application/json \n    Authorization: Basic WTgzcHNkcFdqY3J0Vml5eHVveTNyWGp2OWpzMjV3aUs6WTgzcHNkcFdqY3J0Vml5eHVveTNyWGp2OWpzMjV3aUs= \n    xxx-Signature: t=1574130344,v=cJKgD/EpqNVnITR7yZ8BIev5j1E0ub0VbG4uGA69gR4T1FFc7NzqbiBoDEOBvkQtJXytQd7dY+WDo0Qm0c6gCnRHqIEyBen6SnBk/PjhIn7H93sHMyUEbesJqB6NAzOHA4uVj+8aTfREQWxKaizkDTT1dnrBUZ7KPxz4KKzRXtZ6tEh48HKsA5xqviedc+kpilaFbFSaoJmFj760TV8FB+mKCkZSrvX1Y+4x0bqTVBXAt2kE2Z8vCH16BDtlWGLZRSlWtZWyvpz6F0a/VWYVhoBEmgNFevnYDeAMGB6VEDBE1pZLMnhxfLfz6yu/p1pv1c2N2Yk5YSahQw4lLLiqQQ== \n    Accept: */* \n    Cache-Control: no-cache \n    Content-Length: 18 \n    Connection: keep-alive \n\n    {\"currency\":\"USD\"} \n\n### 请求结果签名验证\n\n-   若请求成功返回200，包体格式查看具体接口，对响应包体使用连连支付的RSA私钥用SHA256WithRSA做签名并用Base64编码，生成的签名字符串放入HTTP包头xxx-Signature标签中，格式为xxx-Signature: t = response_epoch, v = signature。\n    其中：\n- t=响应时间戳(格林威治时间1970年01月01日00时00分00秒起至现在的总秒数)\n- v=BASE64_ENCODE(SHA256WithRSA(RESPONSE_EPOCH&RESPONSE_BODY, LLPAY_RSA_PRIVATE_KEY))\n\n**第一步:** 确定 `payload`\n\n如下字段创建`payload`用 `&` 做连接\n\n- Response Timestamp: 响应时间戳(格林威治时间1970年01月01日00时00分00秒起至现在的总秒数)\n- Response Payload: 响应包体，指定为JSON字符串如： `{\"currency\":\"USD\"}`\n\n`payload`示例:\n\n    19879234&{\"currency\":\"USD\"}\n\n**第二部:** 使用连连的RSA公钥校验签名的有效性\n\n    SHA256WithRSA.verify(xxx-Signature, '19879234&{\" currency\":\"USD\"}',  LLPAY_RSA_PRIVATE_KEY)\n\n# 响应结果\n\n**成功返回结果示例**\n\n连连通过http状态码来判断请求的结果，一个成功的请求的http状态码为2XX，请求结果为相应的objects对象，例如:\n\n```\nHTTP/1.1 200 \nstatus: 200 \nContent-Type: application/json \nContent-Length: 61\nConnection: keep-alive \nxxx-Signature:t=1574130398,v=b0VbG4uGA69gR4T1FFc7NzqbiBoDEOBvkQtJXytQd7dY+WDo0QmgR4T1FFc7NzqbiBoDEOBvkQtJXytQpzMjV3aUs6R4T1FFc7NzqbiBoDEOBvWTgzcHNkcFdqY3J0Vml5eHVc6gCnRHqIEyBen6SnBk/PjhIn7H93sHMyUEbesJqB6NAzOHA4uVj+8aTfREQWxKaizkDTT1dnrBUZ7KPxz4KKzRXtZ6tEh48HKsA5xqWGLZRSlWtZWyvpz6F0a/VWYVhoBEmgNFevkE2Z8vCH16VEDBE1pZ6VEDBE1pZ6BDBE1pZ6VEDBE1DtlWGLnYviedc+kpilaFbFSaoJmFj76==\n\n{\"currency\":\"USD\",\"balance\":\"12.25\"}\n\n```\n\n#### Errors\n\n一个失败的请求会收到4XX类的http状态码表示已知错误内容（具体错误码API文档给出），5XX的状态码表示未知的错误类型：\n\n#### Attributes\n\n**_code_** _number_\n失败码类型，数字类型，用于快速定位错误类型\n\n**_message_** _string_\n失败描述\n\n**失败返回结果示例**\n\n    HTTP/1.1 400\n    status: 400\n    Date: Tue, 19 Nov 2019 02:26:38 GMT\n    Content-Type: application/json\n    Content-Length: 77\n    Connection: keep-alive\n\n    {\"code\":\"999995\",\"message\":\"[holderType] is invalid\"}\n\n### HTTP状态码一览表\n\n| CODE               | DESCRIPTION                |\n| ------------------ | -------------------------- |\n| 400                | 请求错误，例如：参数错误               |\n| 401                | 授权认证失败或者是签名认证失败            |\n| 403                | 请求未授权                      |\n| 404                | 资源未找到，这里的资源指的是实际的Objects对象 |\n| 500, 502, 503, 504 | 系统错误                       |\n\n# 请求幂等保证\n\n实际运行场景中，由于网络原因或者其他原因导致的网络中断是不可避免的，所以连连这边特意设计了请求幂等保证操作，所有的POST、PUT、DELETE请求都可以做幂等校验，幂等请求认证成功之后，会返回最初的请求结果（5XX未知异常类型的错误除外）。\n\n你需要在http头加入`Idempotency-Key`以便让系统失败你的幂等请求：\n\n    Idempotency-Key:&lt;&lt;unique id for client &gt;&gt;\n\n# Request IDs\n\n每个API请求都有一个关联的请求标识符。您可以响应头找到`Request-Id`下这个键值。\n\n# 字段命名规范\n\n连连所有的字段命名规范为驼峰式:\n\n    https://api...com/resource/?filterBy=\"filter\"\n\n    {\n      \"storeName\": \"My Store\",\n      \"kycStatus\": \"success\"\n    }\n\n# Webhook\n\n你可以配置webhook地址来接收连连这边的回调信息（`event`），具体的回调信息（`event`）在相应的接口中定义\n\n# 对象关系模型\n![对象关系模型](/images/关系模型.png)\n\n","slug":"project/open-api","published":1,"updated":"2020-04-17T02:52:48.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmx50048a4ja6ej555oj","content":"<p>#架构图</p>\n<h3 id=\"架构类\"><a href=\"#架构类\" class=\"headerlink\" title=\"架构类\"></a>架构类</h3><h4 id=\"框架上使用\"><a href=\"#框架上使用\" class=\"headerlink\" title=\"框架上使用\"></a>框架上使用</h4><p><code>spring</code>/<code>mybatis</code>/<code>undertow</code>  </p>\n<h4 id=\"服务治理使用\"><a href=\"#服务治理使用\" class=\"headerlink\" title=\"服务治理使用\"></a>服务治理使用</h4><p><code>dubbo</code>   </p>\n<h4 id=\"缓存服务使用\"><a href=\"#缓存服务使用\" class=\"headerlink\" title=\"缓存服务使用\"></a>缓存服务使用</h4><p><code>redis</code>（身份认证状态缓存，临时性字典数据缓存，提升效率）</p>\n<h4 id=\"MQ\"><a href=\"#MQ\" class=\"headerlink\" title=\"MQ\"></a>MQ</h4><p><code>RocketMQ</code>（mq做业务解耦，流量削峰，业务驱动，回调通知队列，消息持久化和定时任务补偿保证数据不被丢失）</p>\n<h4 id=\"分布式锁服务\"><a href=\"#分布式锁服务\" class=\"headerlink\" title=\"分布式锁服务\"></a>分布式锁服务</h4><p>zk</p>\n<h4 id=\"webhook通知服务\"><a href=\"#webhook通知服务\" class=\"headerlink\" title=\"webhook通知服务\"></a>webhook通知服务</h4><p>okhttp3、forkjoin框架、rocketMq队列、elasticJob补偿</p>\n<h4 id=\"流量控制\"><a href=\"#流量控制\" class=\"headerlink\" title=\"流量控制\"></a>流量控制</h4><p>nginx、lua、redis、mq</p>\n<h4 id=\"服务稳定性\"><a href=\"#服务稳定性\" class=\"headerlink\" title=\"服务稳定性\"></a>服务稳定性</h4><p>hystrix 熔断</p>\n<h4 id=\"模块划分\"><a href=\"#模块划分\" class=\"headerlink\" title=\"模块划分\"></a>模块划分</h4><pre><code>接口模块-----api\n    核心模块----core\n    管理端模块----manager\n    webhook回调通知模块----webhook --&gt; 订阅event --&gt; 消息letter生成 --&gt;入库 --&gt;生成待发送队列（两级队列：内存队列20w，rocketMQ消息队列；一个补偿任务elasticJob)--&gt;</code></pre><p><img src=\"/images/%E6%9E%B6%E6%9E%84.png\" alt=\"架构\"></p>\n<h1 id=\"Open-API-介绍\"><a href=\"#Open-API-介绍\" class=\"headerlink\" title=\"Open API 介绍\"></a>Open API 介绍</h1><p>OpenAPI 项目是基于REST标准来设计的，为保证统一和安全，全局编码格式为UTF-8，全局使用https。我们的API具有可预测的面向资源的url，返回json编码的响应，并使用标准的HTTP响应代码、身份验证和请求动词。</p>\n<p>为了数据准确性和生产环境数据安全，建议在沙盒环境测试这些接口.</p>\n<h1 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h1><p>当我们对API进行向后不兼容的更改时，我们会发布新版本。要使用的版本在URL中指定。当前版本是v1，比如:</p>\n<pre><code>https://api.itmarte.com/payments/v1/...</code></pre><h1 id=\"授权认证\"><a href=\"#授权认证\" class=\"headerlink\" title=\"授权认证\"></a>授权认证</h1><p>在不同的对接场景下Open API存在两种认证方式（用户开发者和第三方应用开发者，通常情况下申请用户开发者），使用http头<code>Authorization</code>做认证：<br><img src=\"/images/%E6%8E%88%E6%9D%83%E5%9B%BE.png\" alt=\"授权图\"></p>\n<h3 id=\"用户开发者模式\"><a href=\"#用户开发者模式\" class=\"headerlink\" title=\"用户开发者模式\"></a>用户开发者模式</h3><p>创建了用户开发者之后，会收到给您返回的<code>developerId</code>、<code>masterToken</code>（<code>masterToken</code>能行使用户所有权限，请您务必安全保管）和<code>LLP_RSA_PUB_KEY.pem</code>，身份认证格式如下:</p>\n<pre><code>Authorization: Basic &amp;lt;&amp;lt;Base64.encode(developerId:masterToken)&amp;gt;&amp;gt;</code></pre><h3 id=\"第三方应用开发者模式\"><a href=\"#第三方应用开发者模式\" class=\"headerlink\" title=\"第三方应用开发者模式\"></a>第三方应用开发者模式</h3><p>创建第三方应用开发者之后，会收到<code>clientId</code>、<code>clientSecret</code>和<code>LLP_RSA_PUB_KEY.pem</code>，至于<code>accessToken</code>则需要通过OAuth2.0模式向有资源的用户申请，身份认证格式如下:</p>\n<pre><code>Authorization: Bearer &amp;lt;&amp;lt;accessToken&amp;gt;&amp;gt;</code></pre><h1 id=\"请求安全\"><a href=\"#请求安全\" class=\"headerlink\" title=\"请求安全\"></a>请求安全</h1><p>为了请求安全防止重放攻击，要求所有请求都得有签名认证，在http头定义了<code>xxx-Signature</code>字段作为签名信息载体，<code>xxx-Signature</code>头文件中包含了请求包体和响应的epoch时间戳（是指格林威治时间1970年01月01日00时00分00秒起至现在的总秒数）例如：<code>xxx-Signature:t=&amp;lt;&amp;lt;epoch&amp;gt;&amp;gt;,v=&amp;lt;&amp;lt;signature&amp;gt;&amp;gt;</code>，一个请求的有效时间是5分钟。下面介绍下请求的签名格式：</p>\n<h3 id=\"请求签名\"><a href=\"#请求签名\" class=\"headerlink\" title=\"请求签名\"></a>请求签名</h3><ol start=\"2\">\n<li>对<code>HTTP请求方式</code>、<code>URI</code>、<code>请求epoch时间</code>（单位秒）、<code>请求包体</code>的数据按照一定顺序用字符串“&amp;”做拼接后使用对接方的<code>RSA私钥</code>通过<code>SHA256WithRSA</code>算法做签名并用<code>Base64编码</code>，生成的签名字符串（<code>signature</code>）和<code>epoch</code>时间放入HTTP包头的<code>xxx-Signature</code>标签中，格式为：</li>\n</ol>\n<!---->\n\n\n<pre><code>xxx-Signature:t=&amp;lt;&amp;lt;epoch&amp;gt;&amp;gt;,v=&amp;lt;&amp;lt;signature&amp;gt;&amp;gt;</code></pre><p><strong>第一步:</strong> 确定签名<code>payload</code></p>\n<p>如下字段请用<code>&amp;</code>一次连接</p>\n<ul>\n<li><p><code>HTTP_METHOD</code>: 对应实际接口的方法（统一用大写），如<code>POST</code>、<code>PUT</code>、<code>GET</code>、<code>DELETE</code>等；</p>\n</li>\n<li><p><code>URI</code>: 请求的URI地址（除去host）.  例如<code>https://api.sandbox.itmarte.com/collections/v1/merchants</code>中<code>/collections/v1/merchants</code>为URI</p>\n</li>\n<li><p><code>REQUEST_EPOCH</code>: 是指格林威治时间1970年01月01日00时00分00秒起至现在的总秒数,该值应与<code>t</code>值保持一致</p>\n</li>\n<li><p><code>REQUEST_PAYLOAD</code>: 请求包体  <code>{&quot;currency&quot;:&quot;USD&quot;}</code></p>\n</li>\n<li><p><code>QUERY_STRING</code>: 查询字段例如：<code>https://api.sandbox.itmarte.com/collections/v1/merchants?attr1=value1&amp;attr2=value2</code>,其中<code>QUERY_STRING</code>=<code>attr1=value1&amp;attr2=value2</code>格式化为<code>attr1%3Dvalue1%26attr2%3Dvalue2</code></p>\n<p><code>payload</code>示例:</p>\n<p>  POST&amp;/collections/v1/merchants&amp;19879234&amp;{“currency”:”USD”}&amp;attr1%3Dvalue1%26attr2%3Dvalue2</p>\n</li>\n</ul>\n<p><strong>第二部:</strong> 准备 <code>xxx-Signature</code> 签名头</p>\n<p>你会用到以下内容:</p>\n<ul>\n<li>REQUEST_EPOCH (Seconds elapsed since 1970/1/1 00:00:00 GMT as a string)</li>\n<li>连接字符串 <code>,</code></li>\n<li>payload（第一步的结果）</li>\n<li>your_rsa_pri_key：你的RSA私钥</li>\n</ul>\n<!---->\n\n<pre><code>xxx-Signature: t=REQUEST_EPOCH,v=BASE64_ENCODE(SHA256WithRSA.sign(&amp;lt;&amp;lt;payload&amp;gt;&amp;gt;, &amp;lt;&amp;lt;your_rsa_pri_key&amp;gt;&amp;gt;))</code></pre><p><strong>请求示例</strong></p>\n<pre><code>POST /api/mkt/balance HTTP/1.1 \nHost: api.itmarte.com \nContent-Type: application/json \nAuthorization: Basic WTgzcHNkcFdqY3J0Vml5eHVveTNyWGp2OWpzMjV3aUs6WTgzcHNkcFdqY3J0Vml5eHVveTNyWGp2OWpzMjV3aUs= \nxxx-Signature: t=1574130344,v=cJKgD/EpqNVnITR7yZ8BIev5j1E0ub0VbG4uGA69gR4T1FFc7NzqbiBoDEOBvkQtJXytQd7dY+WDo0Qm0c6gCnRHqIEyBen6SnBk/PjhIn7H93sHMyUEbesJqB6NAzOHA4uVj+8aTfREQWxKaizkDTT1dnrBUZ7KPxz4KKzRXtZ6tEh48HKsA5xqviedc+kpilaFbFSaoJmFj760TV8FB+mKCkZSrvX1Y+4x0bqTVBXAt2kE2Z8vCH16BDtlWGLZRSlWtZWyvpz6F0a/VWYVhoBEmgNFevnYDeAMGB6VEDBE1pZLMnhxfLfz6yu/p1pv1c2N2Yk5YSahQw4lLLiqQQ== \nAccept: */* \nCache-Control: no-cache \nContent-Length: 18 \nConnection: keep-alive \n\n{&quot;currency&quot;:&quot;USD&quot;} </code></pre><h3 id=\"请求结果签名验证\"><a href=\"#请求结果签名验证\" class=\"headerlink\" title=\"请求结果签名验证\"></a>请求结果签名验证</h3><ul>\n<li>若请求成功返回200，包体格式查看具体接口，对响应包体使用连连支付的RSA私钥用SHA256WithRSA做签名并用Base64编码，生成的签名字符串放入HTTP包头xxx-Signature标签中，格式为xxx-Signature: t = response_epoch, v = signature。<br>其中：</li>\n<li>t=响应时间戳(格林威治时间1970年01月01日00时00分00秒起至现在的总秒数)</li>\n<li>v=BASE64_ENCODE(SHA256WithRSA(RESPONSE_EPOCH&amp;RESPONSE_BODY, LLPAY_RSA_PRIVATE_KEY))</li>\n</ul>\n<p><strong>第一步:</strong> 确定 <code>payload</code></p>\n<p>如下字段创建<code>payload</code>用 <code>&amp;</code> 做连接</p>\n<ul>\n<li>Response Timestamp: 响应时间戳(格林威治时间1970年01月01日00时00分00秒起至现在的总秒数)</li>\n<li>Response Payload: 响应包体，指定为JSON字符串如： <code>{&quot;currency&quot;:&quot;USD&quot;}</code></li>\n</ul>\n<p><code>payload</code>示例:</p>\n<pre><code>19879234&amp;{&quot;currency&quot;:&quot;USD&quot;}</code></pre><p><strong>第二部:</strong> 使用连连的RSA公钥校验签名的有效性</p>\n<pre><code>SHA256WithRSA.verify(xxx-Signature, &apos;19879234&amp;{&quot; currency&quot;:&quot;USD&quot;}&apos;,  LLPAY_RSA_PRIVATE_KEY)</code></pre><h1 id=\"响应结果\"><a href=\"#响应结果\" class=\"headerlink\" title=\"响应结果\"></a>响应结果</h1><p><strong>成功返回结果示例</strong></p>\n<p>连连通过http状态码来判断请求的结果，一个成功的请求的http状态码为2XX，请求结果为相应的objects对象，例如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP&#x2F;1.1 200 </span><br><span class=\"line\">status: 200 </span><br><span class=\"line\">Content-Type: application&#x2F;json </span><br><span class=\"line\">Content-Length: 61</span><br><span class=\"line\">Connection: keep-alive </span><br><span class=\"line\">xxx-Signature:t&#x3D;1574130398,v&#x3D;b0VbG4uGA69gR4T1FFc7NzqbiBoDEOBvkQtJXytQd7dY+WDo0QmgR4T1FFc7NzqbiBoDEOBvkQtJXytQpzMjV3aUs6R4T1FFc7NzqbiBoDEOBvWTgzcHNkcFdqY3J0Vml5eHVc6gCnRHqIEyBen6SnBk&#x2F;PjhIn7H93sHMyUEbesJqB6NAzOHA4uVj+8aTfREQWxKaizkDTT1dnrBUZ7KPxz4KKzRXtZ6tEh48HKsA5xqWGLZRSlWtZWyvpz6F0a&#x2F;VWYVhoBEmgNFevkE2Z8vCH16VEDBE1pZ6VEDBE1pZ6BDBE1pZ6VEDBE1DtlWGLnYviedc+kpilaFbFSaoJmFj76&#x3D;&#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;currency&quot;:&quot;USD&quot;,&quot;balance&quot;:&quot;12.25&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h4><p>一个失败的请求会收到4XX类的http状态码表示已知错误内容（具体错误码API文档给出），5XX的状态码表示未知的错误类型：</p>\n<h4 id=\"Attributes\"><a href=\"#Attributes\" class=\"headerlink\" title=\"Attributes\"></a>Attributes</h4><p><strong><em>code</em></strong> <em>number</em><br>失败码类型，数字类型，用于快速定位错误类型</p>\n<p><strong><em>message</em></strong> <em>string</em><br>失败描述</p>\n<p><strong>失败返回结果示例</strong></p>\n<pre><code>HTTP/1.1 400\nstatus: 400\nDate: Tue, 19 Nov 2019 02:26:38 GMT\nContent-Type: application/json\nContent-Length: 77\nConnection: keep-alive\n\n{&quot;code&quot;:&quot;999995&quot;,&quot;message&quot;:&quot;[holderType] is invalid&quot;}</code></pre><h3 id=\"HTTP状态码一览表\"><a href=\"#HTTP状态码一览表\" class=\"headerlink\" title=\"HTTP状态码一览表\"></a>HTTP状态码一览表</h3><table>\n<thead>\n<tr>\n<th>CODE</th>\n<th>DESCRIPTION</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>400</td>\n<td>请求错误，例如：参数错误</td>\n</tr>\n<tr>\n<td>401</td>\n<td>授权认证失败或者是签名认证失败</td>\n</tr>\n<tr>\n<td>403</td>\n<td>请求未授权</td>\n</tr>\n<tr>\n<td>404</td>\n<td>资源未找到，这里的资源指的是实际的Objects对象</td>\n</tr>\n<tr>\n<td>500, 502, 503, 504</td>\n<td>系统错误</td>\n</tr>\n</tbody></table>\n<h1 id=\"请求幂等保证\"><a href=\"#请求幂等保证\" class=\"headerlink\" title=\"请求幂等保证\"></a>请求幂等保证</h1><p>实际运行场景中，由于网络原因或者其他原因导致的网络中断是不可避免的，所以连连这边特意设计了请求幂等保证操作，所有的POST、PUT、DELETE请求都可以做幂等校验，幂等请求认证成功之后，会返回最初的请求结果（5XX未知异常类型的错误除外）。</p>\n<p>你需要在http头加入<code>Idempotency-Key</code>以便让系统失败你的幂等请求：</p>\n<pre><code>Idempotency-Key:&amp;lt;&amp;lt;unique id for client &amp;gt;&amp;gt;</code></pre><h1 id=\"Request-IDs\"><a href=\"#Request-IDs\" class=\"headerlink\" title=\"Request IDs\"></a>Request IDs</h1><p>每个API请求都有一个关联的请求标识符。您可以响应头找到<code>Request-Id</code>下这个键值。</p>\n<h1 id=\"字段命名规范\"><a href=\"#字段命名规范\" class=\"headerlink\" title=\"字段命名规范\"></a>字段命名规范</h1><p>连连所有的字段命名规范为驼峰式:</p>\n<pre><code>https://api...com/resource/?filterBy=&quot;filter&quot;\n\n{\n  &quot;storeName&quot;: &quot;My Store&quot;,\n  &quot;kycStatus&quot;: &quot;success&quot;\n}</code></pre><h1 id=\"Webhook\"><a href=\"#Webhook\" class=\"headerlink\" title=\"Webhook\"></a>Webhook</h1><p>你可以配置webhook地址来接收连连这边的回调信息（<code>event</code>），具体的回调信息（<code>event</code>）在相应的接口中定义</p>\n<h1 id=\"对象关系模型\"><a href=\"#对象关系模型\" class=\"headerlink\" title=\"对象关系模型\"></a>对象关系模型</h1><p><img src=\"/images/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B.png\" alt=\"对象关系模型\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>#架构图</p>\n<h3 id=\"架构类\"><a href=\"#架构类\" class=\"headerlink\" title=\"架构类\"></a>架构类</h3><h4 id=\"框架上使用\"><a href=\"#框架上使用\" class=\"headerlink\" title=\"框架上使用\"></a>框架上使用</h4><p><code>spring</code>/<code>mybatis</code>/<code>undertow</code>  </p>\n<h4 id=\"服务治理使用\"><a href=\"#服务治理使用\" class=\"headerlink\" title=\"服务治理使用\"></a>服务治理使用</h4><p><code>dubbo</code>   </p>\n<h4 id=\"缓存服务使用\"><a href=\"#缓存服务使用\" class=\"headerlink\" title=\"缓存服务使用\"></a>缓存服务使用</h4><p><code>redis</code>（身份认证状态缓存，临时性字典数据缓存，提升效率）</p>\n<h4 id=\"MQ\"><a href=\"#MQ\" class=\"headerlink\" title=\"MQ\"></a>MQ</h4><p><code>RocketMQ</code>（mq做业务解耦，流量削峰，业务驱动，回调通知队列，消息持久化和定时任务补偿保证数据不被丢失）</p>\n<h4 id=\"分布式锁服务\"><a href=\"#分布式锁服务\" class=\"headerlink\" title=\"分布式锁服务\"></a>分布式锁服务</h4><p>zk</p>\n<h4 id=\"webhook通知服务\"><a href=\"#webhook通知服务\" class=\"headerlink\" title=\"webhook通知服务\"></a>webhook通知服务</h4><p>okhttp3、forkjoin框架、rocketMq队列、elasticJob补偿</p>\n<h4 id=\"流量控制\"><a href=\"#流量控制\" class=\"headerlink\" title=\"流量控制\"></a>流量控制</h4><p>nginx、lua、redis、mq</p>\n<h4 id=\"服务稳定性\"><a href=\"#服务稳定性\" class=\"headerlink\" title=\"服务稳定性\"></a>服务稳定性</h4><p>hystrix 熔断</p>\n<h4 id=\"模块划分\"><a href=\"#模块划分\" class=\"headerlink\" title=\"模块划分\"></a>模块划分</h4><pre><code>接口模块-----api\n    核心模块----core\n    管理端模块----manager\n    webhook回调通知模块----webhook --&gt; 订阅event --&gt; 消息letter生成 --&gt;入库 --&gt;生成待发送队列（两级队列：内存队列20w，rocketMQ消息队列；一个补偿任务elasticJob)--&gt;</code></pre><p><img src=\"/images/%E6%9E%B6%E6%9E%84.png\" alt=\"架构\"></p>\n<h1 id=\"Open-API-介绍\"><a href=\"#Open-API-介绍\" class=\"headerlink\" title=\"Open API 介绍\"></a>Open API 介绍</h1><p>OpenAPI 项目是基于REST标准来设计的，为保证统一和安全，全局编码格式为UTF-8，全局使用https。我们的API具有可预测的面向资源的url，返回json编码的响应，并使用标准的HTTP响应代码、身份验证和请求动词。</p>\n<p>为了数据准确性和生产环境数据安全，建议在沙盒环境测试这些接口.</p>\n<h1 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h1><p>当我们对API进行向后不兼容的更改时，我们会发布新版本。要使用的版本在URL中指定。当前版本是v1，比如:</p>\n<pre><code>https://api.itmarte.com/payments/v1/...</code></pre><h1 id=\"授权认证\"><a href=\"#授权认证\" class=\"headerlink\" title=\"授权认证\"></a>授权认证</h1><p>在不同的对接场景下Open API存在两种认证方式（用户开发者和第三方应用开发者，通常情况下申请用户开发者），使用http头<code>Authorization</code>做认证：<br><img src=\"/images/%E6%8E%88%E6%9D%83%E5%9B%BE.png\" alt=\"授权图\"></p>\n<h3 id=\"用户开发者模式\"><a href=\"#用户开发者模式\" class=\"headerlink\" title=\"用户开发者模式\"></a>用户开发者模式</h3><p>创建了用户开发者之后，会收到给您返回的<code>developerId</code>、<code>masterToken</code>（<code>masterToken</code>能行使用户所有权限，请您务必安全保管）和<code>LLP_RSA_PUB_KEY.pem</code>，身份认证格式如下:</p>\n<pre><code>Authorization: Basic &amp;lt;&amp;lt;Base64.encode(developerId:masterToken)&amp;gt;&amp;gt;</code></pre><h3 id=\"第三方应用开发者模式\"><a href=\"#第三方应用开发者模式\" class=\"headerlink\" title=\"第三方应用开发者模式\"></a>第三方应用开发者模式</h3><p>创建第三方应用开发者之后，会收到<code>clientId</code>、<code>clientSecret</code>和<code>LLP_RSA_PUB_KEY.pem</code>，至于<code>accessToken</code>则需要通过OAuth2.0模式向有资源的用户申请，身份认证格式如下:</p>\n<pre><code>Authorization: Bearer &amp;lt;&amp;lt;accessToken&amp;gt;&amp;gt;</code></pre><h1 id=\"请求安全\"><a href=\"#请求安全\" class=\"headerlink\" title=\"请求安全\"></a>请求安全</h1><p>为了请求安全防止重放攻击，要求所有请求都得有签名认证，在http头定义了<code>xxx-Signature</code>字段作为签名信息载体，<code>xxx-Signature</code>头文件中包含了请求包体和响应的epoch时间戳（是指格林威治时间1970年01月01日00时00分00秒起至现在的总秒数）例如：<code>xxx-Signature:t=&amp;lt;&amp;lt;epoch&amp;gt;&amp;gt;,v=&amp;lt;&amp;lt;signature&amp;gt;&amp;gt;</code>，一个请求的有效时间是5分钟。下面介绍下请求的签名格式：</p>\n<h3 id=\"请求签名\"><a href=\"#请求签名\" class=\"headerlink\" title=\"请求签名\"></a>请求签名</h3><ol start=\"2\">\n<li>对<code>HTTP请求方式</code>、<code>URI</code>、<code>请求epoch时间</code>（单位秒）、<code>请求包体</code>的数据按照一定顺序用字符串“&amp;”做拼接后使用对接方的<code>RSA私钥</code>通过<code>SHA256WithRSA</code>算法做签名并用<code>Base64编码</code>，生成的签名字符串（<code>signature</code>）和<code>epoch</code>时间放入HTTP包头的<code>xxx-Signature</code>标签中，格式为：</li>\n</ol>\n<!---->\n\n\n<pre><code>xxx-Signature:t=&amp;lt;&amp;lt;epoch&amp;gt;&amp;gt;,v=&amp;lt;&amp;lt;signature&amp;gt;&amp;gt;</code></pre><p><strong>第一步:</strong> 确定签名<code>payload</code></p>\n<p>如下字段请用<code>&amp;</code>一次连接</p>\n<ul>\n<li><p><code>HTTP_METHOD</code>: 对应实际接口的方法（统一用大写），如<code>POST</code>、<code>PUT</code>、<code>GET</code>、<code>DELETE</code>等；</p>\n</li>\n<li><p><code>URI</code>: 请求的URI地址（除去host）.  例如<code>https://api.sandbox.itmarte.com/collections/v1/merchants</code>中<code>/collections/v1/merchants</code>为URI</p>\n</li>\n<li><p><code>REQUEST_EPOCH</code>: 是指格林威治时间1970年01月01日00时00分00秒起至现在的总秒数,该值应与<code>t</code>值保持一致</p>\n</li>\n<li><p><code>REQUEST_PAYLOAD</code>: 请求包体  <code>{&quot;currency&quot;:&quot;USD&quot;}</code></p>\n</li>\n<li><p><code>QUERY_STRING</code>: 查询字段例如：<code>https://api.sandbox.itmarte.com/collections/v1/merchants?attr1=value1&amp;attr2=value2</code>,其中<code>QUERY_STRING</code>=<code>attr1=value1&amp;attr2=value2</code>格式化为<code>attr1%3Dvalue1%26attr2%3Dvalue2</code></p>\n<p><code>payload</code>示例:</p>\n<p>  POST&amp;/collections/v1/merchants&amp;19879234&amp;{“currency”:”USD”}&amp;attr1%3Dvalue1%26attr2%3Dvalue2</p>\n</li>\n</ul>\n<p><strong>第二部:</strong> 准备 <code>xxx-Signature</code> 签名头</p>\n<p>你会用到以下内容:</p>\n<ul>\n<li>REQUEST_EPOCH (Seconds elapsed since 1970/1/1 00:00:00 GMT as a string)</li>\n<li>连接字符串 <code>,</code></li>\n<li>payload（第一步的结果）</li>\n<li>your_rsa_pri_key：你的RSA私钥</li>\n</ul>\n<!---->\n\n<pre><code>xxx-Signature: t=REQUEST_EPOCH,v=BASE64_ENCODE(SHA256WithRSA.sign(&amp;lt;&amp;lt;payload&amp;gt;&amp;gt;, &amp;lt;&amp;lt;your_rsa_pri_key&amp;gt;&amp;gt;))</code></pre><p><strong>请求示例</strong></p>\n<pre><code>POST /api/mkt/balance HTTP/1.1 \nHost: api.itmarte.com \nContent-Type: application/json \nAuthorization: Basic WTgzcHNkcFdqY3J0Vml5eHVveTNyWGp2OWpzMjV3aUs6WTgzcHNkcFdqY3J0Vml5eHVveTNyWGp2OWpzMjV3aUs= \nxxx-Signature: t=1574130344,v=cJKgD/EpqNVnITR7yZ8BIev5j1E0ub0VbG4uGA69gR4T1FFc7NzqbiBoDEOBvkQtJXytQd7dY+WDo0Qm0c6gCnRHqIEyBen6SnBk/PjhIn7H93sHMyUEbesJqB6NAzOHA4uVj+8aTfREQWxKaizkDTT1dnrBUZ7KPxz4KKzRXtZ6tEh48HKsA5xqviedc+kpilaFbFSaoJmFj760TV8FB+mKCkZSrvX1Y+4x0bqTVBXAt2kE2Z8vCH16BDtlWGLZRSlWtZWyvpz6F0a/VWYVhoBEmgNFevnYDeAMGB6VEDBE1pZLMnhxfLfz6yu/p1pv1c2N2Yk5YSahQw4lLLiqQQ== \nAccept: */* \nCache-Control: no-cache \nContent-Length: 18 \nConnection: keep-alive \n\n{&quot;currency&quot;:&quot;USD&quot;} </code></pre><h3 id=\"请求结果签名验证\"><a href=\"#请求结果签名验证\" class=\"headerlink\" title=\"请求结果签名验证\"></a>请求结果签名验证</h3><ul>\n<li>若请求成功返回200，包体格式查看具体接口，对响应包体使用连连支付的RSA私钥用SHA256WithRSA做签名并用Base64编码，生成的签名字符串放入HTTP包头xxx-Signature标签中，格式为xxx-Signature: t = response_epoch, v = signature。<br>其中：</li>\n<li>t=响应时间戳(格林威治时间1970年01月01日00时00分00秒起至现在的总秒数)</li>\n<li>v=BASE64_ENCODE(SHA256WithRSA(RESPONSE_EPOCH&amp;RESPONSE_BODY, LLPAY_RSA_PRIVATE_KEY))</li>\n</ul>\n<p><strong>第一步:</strong> 确定 <code>payload</code></p>\n<p>如下字段创建<code>payload</code>用 <code>&amp;</code> 做连接</p>\n<ul>\n<li>Response Timestamp: 响应时间戳(格林威治时间1970年01月01日00时00分00秒起至现在的总秒数)</li>\n<li>Response Payload: 响应包体，指定为JSON字符串如： <code>{&quot;currency&quot;:&quot;USD&quot;}</code></li>\n</ul>\n<p><code>payload</code>示例:</p>\n<pre><code>19879234&amp;{&quot;currency&quot;:&quot;USD&quot;}</code></pre><p><strong>第二部:</strong> 使用连连的RSA公钥校验签名的有效性</p>\n<pre><code>SHA256WithRSA.verify(xxx-Signature, &apos;19879234&amp;{&quot; currency&quot;:&quot;USD&quot;}&apos;,  LLPAY_RSA_PRIVATE_KEY)</code></pre><h1 id=\"响应结果\"><a href=\"#响应结果\" class=\"headerlink\" title=\"响应结果\"></a>响应结果</h1><p><strong>成功返回结果示例</strong></p>\n<p>连连通过http状态码来判断请求的结果，一个成功的请求的http状态码为2XX，请求结果为相应的objects对象，例如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP&#x2F;1.1 200 </span><br><span class=\"line\">status: 200 </span><br><span class=\"line\">Content-Type: application&#x2F;json </span><br><span class=\"line\">Content-Length: 61</span><br><span class=\"line\">Connection: keep-alive </span><br><span class=\"line\">xxx-Signature:t&#x3D;1574130398,v&#x3D;b0VbG4uGA69gR4T1FFc7NzqbiBoDEOBvkQtJXytQd7dY+WDo0QmgR4T1FFc7NzqbiBoDEOBvkQtJXytQpzMjV3aUs6R4T1FFc7NzqbiBoDEOBvWTgzcHNkcFdqY3J0Vml5eHVc6gCnRHqIEyBen6SnBk&#x2F;PjhIn7H93sHMyUEbesJqB6NAzOHA4uVj+8aTfREQWxKaizkDTT1dnrBUZ7KPxz4KKzRXtZ6tEh48HKsA5xqWGLZRSlWtZWyvpz6F0a&#x2F;VWYVhoBEmgNFevkE2Z8vCH16VEDBE1pZ6VEDBE1pZ6BDBE1pZ6VEDBE1DtlWGLnYviedc+kpilaFbFSaoJmFj76&#x3D;&#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;currency&quot;:&quot;USD&quot;,&quot;balance&quot;:&quot;12.25&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Errors\"><a href=\"#Errors\" class=\"headerlink\" title=\"Errors\"></a>Errors</h4><p>一个失败的请求会收到4XX类的http状态码表示已知错误内容（具体错误码API文档给出），5XX的状态码表示未知的错误类型：</p>\n<h4 id=\"Attributes\"><a href=\"#Attributes\" class=\"headerlink\" title=\"Attributes\"></a>Attributes</h4><p><strong><em>code</em></strong> <em>number</em><br>失败码类型，数字类型，用于快速定位错误类型</p>\n<p><strong><em>message</em></strong> <em>string</em><br>失败描述</p>\n<p><strong>失败返回结果示例</strong></p>\n<pre><code>HTTP/1.1 400\nstatus: 400\nDate: Tue, 19 Nov 2019 02:26:38 GMT\nContent-Type: application/json\nContent-Length: 77\nConnection: keep-alive\n\n{&quot;code&quot;:&quot;999995&quot;,&quot;message&quot;:&quot;[holderType] is invalid&quot;}</code></pre><h3 id=\"HTTP状态码一览表\"><a href=\"#HTTP状态码一览表\" class=\"headerlink\" title=\"HTTP状态码一览表\"></a>HTTP状态码一览表</h3><table>\n<thead>\n<tr>\n<th>CODE</th>\n<th>DESCRIPTION</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>400</td>\n<td>请求错误，例如：参数错误</td>\n</tr>\n<tr>\n<td>401</td>\n<td>授权认证失败或者是签名认证失败</td>\n</tr>\n<tr>\n<td>403</td>\n<td>请求未授权</td>\n</tr>\n<tr>\n<td>404</td>\n<td>资源未找到，这里的资源指的是实际的Objects对象</td>\n</tr>\n<tr>\n<td>500, 502, 503, 504</td>\n<td>系统错误</td>\n</tr>\n</tbody></table>\n<h1 id=\"请求幂等保证\"><a href=\"#请求幂等保证\" class=\"headerlink\" title=\"请求幂等保证\"></a>请求幂等保证</h1><p>实际运行场景中，由于网络原因或者其他原因导致的网络中断是不可避免的，所以连连这边特意设计了请求幂等保证操作，所有的POST、PUT、DELETE请求都可以做幂等校验，幂等请求认证成功之后，会返回最初的请求结果（5XX未知异常类型的错误除外）。</p>\n<p>你需要在http头加入<code>Idempotency-Key</code>以便让系统失败你的幂等请求：</p>\n<pre><code>Idempotency-Key:&amp;lt;&amp;lt;unique id for client &amp;gt;&amp;gt;</code></pre><h1 id=\"Request-IDs\"><a href=\"#Request-IDs\" class=\"headerlink\" title=\"Request IDs\"></a>Request IDs</h1><p>每个API请求都有一个关联的请求标识符。您可以响应头找到<code>Request-Id</code>下这个键值。</p>\n<h1 id=\"字段命名规范\"><a href=\"#字段命名规范\" class=\"headerlink\" title=\"字段命名规范\"></a>字段命名规范</h1><p>连连所有的字段命名规范为驼峰式:</p>\n<pre><code>https://api...com/resource/?filterBy=&quot;filter&quot;\n\n{\n  &quot;storeName&quot;: &quot;My Store&quot;,\n  &quot;kycStatus&quot;: &quot;success&quot;\n}</code></pre><h1 id=\"Webhook\"><a href=\"#Webhook\" class=\"headerlink\" title=\"Webhook\"></a>Webhook</h1><p>你可以配置webhook地址来接收连连这边的回调信息（<code>event</code>），具体的回调信息（<code>event</code>）在相应的接口中定义</p>\n<h1 id=\"对象关系模型\"><a href=\"#对象关系模型\" class=\"headerlink\" title=\"对象关系模型\"></a>对象关系模型</h1><p><img src=\"/images/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B.png\" alt=\"对象关系模型\"></p>\n"},{"title":"Java IO/NIO 对比","date":"2020-05-20T08:19:27.000Z","_content":"# Java NIO Buffer, Channel 及 Selector\n\n## Java IO VS NIO\n\n- JDK 1.4 之前，java.io 包，\n\n  面向流的I/O系统\n\n  （字节流或者字符流）\n\n  - 系统一次处理一个字节\n  - 速度慢\n\n- JDK 1.4 提供，java.nio 包，\n\n  面向块的I/O系统\n\n  - 系统一次处理一个块\n  - 速度快\n\n  ​\n\n  NIO主要有三大核心部分：Channel(通道)，Buffer(缓冲区),Selector。\n\n  ​       传统IO基于字节流和字符流进行操作，而NIO基于Channel和Buffer(缓冲区)进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。Selector(选择区)用于监听多个通道的事件（比如：连接打开，数据到达）。因此，单个线程可以监听多个数据通道。\n\n  NIO和传统IO（一下简称IO）之间第一个最大的区别是，IO是面向流的，NIO是面向缓冲区的。\n\n## Buffer 缓冲区\n\n缓冲区实际上是一个容器对象，更直接的说，其实就是一个数组。\n在 NIO 库中，所有数据都是用缓冲区处理的：\n\n- 在读取数据时，它是直接读到缓冲区中的；\n- 在写入数据时，它也是写入到缓冲区中的；\n\n在 NIO 中，所有的缓冲区类型都继承于抽象类 Buffer。常见的缓冲区 Buffer 包括：\n\n- ByteBuffer 存储了字节数组 `final byte[] hb;`\n\n- CharBuffer \n\n  ```java\n  final char[] hb;\n  ```\n\n  - **ByteBuffer 与 CharBuffer 之间的转换需要使用字符集 Charset**\n  - Charset 具体使用，参见 [Java Charset 字符集](https://www.jianshu.com/p/1c61e001b609)\n\n- ShortBuffer `final short[] hb;`\n\n- IntBuffer `final int[] hb;`\n\n- LongBuffer `final long[] hb;`\n\n- FloatBuffer `final float[] hb;`\n\n- DoubleBuffer `final double[] hb;`\n\nBuffer 类的属性：\n\n- `private int mark = -1;` 记录一个标记位置\n- `private int position = 0;`\n\n> A buffer's <i>position</i> is the index of the next element to be read or written.  A buffer's position is never negative and is never greater than its limit.\n> 当前操作的位置\n\n- `private int limit;`\n\n> A buffer's <i>limit</i> is the index of the first element that should not be read or written.  A buffer's limit is never negative and is never greater than its capacity.\n> 可以存放的元素的个数\n\n- `private int capacity;`\n\n> A buffer's <i>capacity</i> is the number of elements it contains.  The capacity of a buffer is never negative and never changes.\n> 数组容量\n\n- 大小关系：**mark <= position <= limit <= capacity**\n\nBuffer 类的方法：\n\n- `allocate(int capacity)` 分配一个缓冲区，默认 limit = capacity\n- `put()` 在当前位置添加元素\n- `get()` 得到当前位置的元素\n- `clear()` 将 Buffer 从 读模式 切换到 写模式 （该方法实际不会清空原 Buffer 的内容）\n\n```java\npublic final Buffer clear() {\n    position = 0;\n    limit = capacity;\n    mark = -1;\n    return this;\n}\n```\n\n- `flip()`  将 Buffer 从 写模式 切换到 读模式\n\n```java\npublic final Buffer flip() {\n    limit = position;\n    position = 0;\n    mark = -1;\n    return this;\n}\n```\n\n** `clear()` VS `flip()`**：\n\n- 在写模式下，Buffer 的 limit 表示你最多能往 Buffer 里写多少数据。\n  - 因此写之前，调用 `clear()`，使得 `limit = capacity;`\n- 在读模式时，Buffer 的 limit 表示你最多能从 Buffer 里读多少数据。\n  - 因此读之前，调用 `flip()`，使得 `limit = position;`\n\nIntBuffer 的使用：\n\n```java\npublic static void main(String[] args) throws Exception {\n    // 创建 int 缓冲区 capacity 为 4\n    // 默认 limit = capacity\n    IntBuffer buffer = IntBuffer.allocate(4);\n    System.out.println(\"Capacity & Limit: \" + buffer.capacity() + \" \" + buffer.limit());\n\n    // 往 Buffer 中写数据\n    buffer.put(11);\n    buffer.put(22);\n    buffer.put(33);\n    buffer.put(44);\n\n    System.out.println(\"Position: \" + buffer.position());\n\n    // 在从 Buffer 中读数据之前，调用 flip()\n    buffer.flip();\n\n    while (buffer.hasRemaining()) {\n        System.out.print(buffer.get() + \"  \");\n    }\n}\n```\n\n输出：\n\n> Capacity & Limit: 4 4\n> Position: 4\n> 11  22  33  44\n\n## Channel 通道\n\n- Java NIO 的核心概念，表示的是对支持 I/O 操作的实体的一个连接\n- 通过它可以读取和写入数据（并不是直接操作，而是通过 Buffer 来处理）\n- 双向的\n\n常用的 Channel 包括：\n\n- FileChannel 从文件中读写数据\n- DatagramChannel 从 UDP 中读写数据\n- SocketChannel 从 TCP 中读写数据\n- ServerSocketChannel 监听新进来的 TCP 连接，每一个新进来的连接都会创建一个 SocketChannel。\n\n### FileChannel 连接到文件的通道\n\n**FileChannel 无法设置为非阻塞模式，只能运行在阻塞模式下**\n常用方法：\n\n- `int read(ByteBuffer dst)` 从 Channel 中读取数据，写入 Buffer\n- `int write(ByteBuffer src)` 从 Buffer 中读取数据，写入 Channel\n- `long size()` 得到 Channel 中文件的大小\n- `long position()` 得到 Channel 中文件的当前操作位置\n- `FileChannel position(long newPosition)` 设置 Channel 中文件的当前操作位置\n\n使用 FileChannel 来复制文件的例子：\n\n```java\npublic static void main(String[] args) throws Exception {\n    // 通过 InputStream 或者 OutputStream 来构造 FileChannel\n    FileChannel in = new FileInputStream(\"a.txt\").getChannel();\n    FileChannel out = new FileOutputStream(\"b.txt\").getChannel();\n\n    ByteBuffer buffer = ByteBuffer.allocate(1024);\n\n    // 调用 channel 的 read 方法往 Buffer 中写数据\n    while(in.read(buffer) != -1) {\n        // 在从 Buffer 中读数据之前，调用 flip()\n        buffer.flip();\n        // 从 Buffer 中读数据，写入到 channel\n        out.write(buffer);\n        // 在往 Buffer 中写数据之前，调用 clear()\n        buffer.clear();\n    }\n\n    // 或者使用如下代码\n    // out.transferFrom(in, 0, in.size());\n}\n```\n\n### SocketChannel 连接到 TCP 套接字的通道\n\n**SocketChannel 可以设置为阻塞模式或非阻塞模式**\n使用 SocketChannel 来建立 TCP 连接，发送并接收数据，默认使用 **阻塞模式**：\n\n```java\npublic static void main(String[] args) throws Exception {\n    // 打开 SocketChannel\n    SocketChannel channel = SocketChannel.open();\n    // connect 方法会阻塞，直至连接建立成功\n    channel.connect(new InetSocketAddress(\"127.0.0.1\", 8080));\n\n    ByteBuffer buffer = ByteBuffer.allocate(1024);\n\n    // 发送数据\n    String msg = \"This is client.\";\n    // 在往 Buffer 中写数据之前，调用 clear()\n    buffer.clear();\n    buffer.put(msg.getBytes());\n\n    // 在从 Buffer 中读数据之前，调用 flip()\n    buffer.flip();\n    channel.write(buffer);\n\n    // 接收数据\n    // 在往 Buffer 中写数据之前，调用 clear()\n    buffer.clear();\n\n    // 调用 channel 的 read 方法往 Buffer 中写数据\n    channel.read(buffer);\n\n    // 在从 Buffer 中读数据之前，调用 flip()\n    buffer.flip();\n\n    // 从 Buffer 中读数据\n    while (buffer.hasRemaining()) {\n        System.out.print(buffer.get());\n    }\n}\n```\n\n使用 SocketChannel 的 **非阻塞模式** 来建立 TCP 连接，发送并接收数据：\n\n```java\npublic static void main(String[] args) throws Exception {\n    // 打开 SocketChannel\n    SocketChannel channel = SocketChannel.open();\n\n    channel.configureBlocking(false);\n    channel.connect(new InetSocketAddress(\"127.0.0.1\", 8080));\n\n    ByteBuffer buffer = ByteBuffer.allocate(1024);\n\n    while (!channel.finishConnect()) {\n        // 发送数据\n        String msg = \"This is client.\";\n        // 在往 Buffer 中写数据之前，调用 clear()\n        buffer.clear();\n        buffer.put(msg.getBytes());\n\n        // 在从 Buffer 中读数据之前，调用 flip()\n        buffer.flip();\n        channel.write(buffer);\n\n        // 接收数据\n        // 在往 Buffer 中写数据之前，调用 clear()\n        buffer.clear();\n\n        // 调用 channel 的 read 方法往 Buffer 中写数据\n        channel.read(buffer);\n\n        // 在从 Buffer 中读数据之前，调用 flip()\n        buffer.flip();\n\n        // 从 Buffer 中读数据\n        while (buffer.hasRemaining()) {\n            System.out.print(buffer.get());\n        }\n    }\n}\n```\n\n### ServerSocketChannel 监听 TCP 连接的通道\n\n**ServerSocketChannel 可以设置为阻塞模式或非阻塞模式**\n使用 ServerSocketChannel 来监听 TCP 连接，默认使用 **阻塞模式**：\n\n```java\npublic static void main(String[] args) throws Exception {\n    // 打开 SocketChannel\n    ServerSocketChannel channel = ServerSocketChannel.open();\n    // 绑定端口\n    channel.socket().bind(new InetSocketAddress(8080));\n\n    ByteBuffer buffer = ByteBuffer.allocate(1024);\n\n    while (true) {\n        // accept 方法会阻塞，直至监听到 TCP 连接\n        SocketChannel socketChannel = channel.accept();\n        System.out.println(\"A new connection...\");\n\n        // 接收数据\n        // 在往 Buffer 中写数据之前，调用 clear()\n        buffer.clear();\n\n        // 调用 channel 的 read 方法往 Buffer 中写数据\n        socketChannel.read(buffer);\n\n        // 在从 Buffer 中读数据之前，调用 flip()\n        buffer.flip();\n\n        // 从 Buffer 中读数据\n        while (buffer.hasRemaining()) {\n            System.out.print(buffer.get());\n        }\n\n        // 在往 Buffer 中写数据之前，调用 clear()\n        // 发送数据\n        String msg = \"This is server.\";\n        // 在往 Buffer 中写数据之前，调用 clear()\n        buffer.clear();\n        buffer.put(msg.getBytes());\n\n        // 在从 Buffer 中读数据之前，调用 flip()\n        buffer.flip();\n        socketChannel.write(buffer);\n    }\n}\n```\n\n## Selector 选择器\n\n**Selector 允许单个进程可以同时处理多个网络连接的 IO，即监听多个端口的 Channel**。\n\n**关于 IO 模式，参见 Linux IO 模型 中对多路复用 IO Multiplexing IO 的说明。**\n\n引用：\n\n------\n\n## 多路复用 IO Multiplexing IO\n\n- **单个进程可以同时处理多个网络连接的 IO，即监听多个端口的 IO**\n- 适用于连接数很高的情况\n- 实现方式：select，poll，epoll 系统调用\n  - 注册多个端口的监听 Socket，比如 8080，8081\n  - 当用户进程调用 select 方法后，整个用户进程被阻塞，OS 内核会监听所有注册的 Socket\n  - 当任何一个端口的 Socket 中的数据准备好了（ 8080 或者 8081），select 方法就会返回\n  - 随后用户进程再调用 read 操作，将数据从 OS 内核缓存区拷贝到应用程序的地址空间。\n- 多路复用 IO 类似于 多线程结合阻塞 IO\n  - 要实现监听多个端口的 IO，还可以通过多线程的方式，每一个线程负责监听一个端口的 IO\n  - 如果处理的连接数不是很高的话，使用 多路复用 IO 不一定比使用 **多线程结合阻塞 IO** 的服务器性能更好，可能延迟还更大\n  - 多路复用 IO 的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接\n\n------\n\n**Selector 使用步骤：**\n\n- **创建 Selector**\n\n- **创建 Channel**，可以创建多个 Channel，即监听多个端口，比如 8080，8081\n\n- 将 Channel 注册到 Selector 中\n\n  - 如果一个 Channel 要注册到 Selector 中, 那么这个 Channel 必须是非阻塞的, 即 `channel.configureBlocking(false);`\n\n  - 因此 FileChannel 是不能够使用 Selector 的, 因为 FileChannel 都是阻塞的\n\n  - 注册时，需要指定了对 Channel 的什么事件感兴趣，包括：\n\n    - SelectionKey.OP_CONNECT：TCP 连接 `static final int OP_CONNECT = 1 << 3;`\n    - SelectionKey.OP_ACCEPT：确认 `static final int OP_ACCEPT = 1 << 4;`\n    - SelectionKey.OP_READ：读 `static final int OP_READ = 1 << 0;`\n    - SelectionKey.OP_WRITE：写 `static final int OP_WRITE = 1 << 2;`\n    - 可以使用或运算 **|** 来组合，例如 `SelectionKey.OP_READ | SelectionKey.OP_WRITE`\n\n  - register 方法返回一个 SelectionKey 对象，包括：\n\n    - `int interestOps()`：调用 register 注册 channel 时所设置的 interest set.\n\n    - ```java\n      int readyOps()\n      ```\n\n      ：Channel 所准备好了的操作\n\n      - `selectionKey.isAcceptable();`\n      - `selectionKey.isConnectable();`\n      - `selectionKey.isReadable();`\n      - `selectionKey.isWritable();`\n\n    - `public abstract SelectableChannel channel();`： 得到 Channel\n\n    - `public abstract Selector selector();`：得到 Selector\n\n    - `public final Object attachment`：得到附加对象\n\n- 不断重复：\n\n  - 调用 Selector 对象的 select() 方法，**该方法会阻塞，直至注册的事件发生**\n  - **事件发生**，调用 Selector 对象的 selectedKeys() 方法获取 selected keys\n  - 遍历每个 selected key:\n    - 从 selected key 中获取对应的 Channel 并处理\n    - 在 OP_ACCEPT 事件中, 从 key.channel() 返回的是 ServerSocketChannel\n    - 在 OP_WRITE 和 OP_READ 事件中, 从 key.channel() 返回的是 SocketChannel\n\n- **关闭 Selector**\n\n示例：\n\n```java\npublic static void main(String args[]) throws Exception {\n    // 创建 Selector\n    Selector selector = Selector.open();\n\n    // 创建 Server Socket，监听端口 8080\n    ServerSocketChannel serverChannel1 = ServerSocketChannel.open();\n    serverChannel1.socket().bind(new InetSocketAddress(8080));\n    // 如果一个 Channel 要注册到 Selector 中, 那么这个 Channel 必须是非阻塞的\n    serverChannel1.configureBlocking(false);\n\n    // 创建 Server Socket，监听端口 8081\n    ServerSocketChannel serverChannel2 = ServerSocketChannel.open();\n    serverChannel2.socket().bind(new InetSocketAddress(8081));\n    // 如果一个 Channel 要注册到 Selector 中, 那么这个 Channel 必须是非阻塞的\n    serverChannel2.configureBlocking(false);\n\n    // 将 Channel 注册到 Selector 中\n    serverChannel1.register(selector, SelectionKey.OP_ACCEPT);\n    serverChannel2.register(selector, SelectionKey.OP_ACCEPT);\n\n    // 不断重复\n    while (true) {\n        // 调用 Selector 对象的 select() 方法，该方法会阻塞，直至注册的事件发生\n        selector.select();\n\n        // 事件发生，调用 Selector 对象的 selectedKeys() 方法获取 selected keys\n        Iterator<SelectionKey> it = selector.selectedKeys().iterator();\n\n        // 遍历每个 selected key:\n        while (it.hasNext()) {\n            SelectionKey key = it.next();\n\n            if (key.isAcceptable()) {\n                // 在 OP_ACCEPT 事件中, 从 key.channel() 返回的是 ServerSocketChannel\n                ServerSocketChannel serverChannel = (ServerSocketChannel) key.channel();\n\n                // 调用 accept 方法获取 TCP 连接 SocketChanne\n                SocketChannel clientChannel = serverChannel.accept();\n                clientChannel.configureBlocking(false);\n\n                // 注册 SocketChannel\n                clientChannel.register(key.selector(), SelectionKey.OP_READ | SelectionKey.OP_WRITE);\n\n                System.out.println(\"Accept event\");\n            }\n\n            if (key.isReadable()) {\n                // 在 OP_WRITE 和 OP_READ 事件中, 从 key.channel() 返回的是 SocketChannel\n                SocketChannel clientChannel = (SocketChannel) key.channel();\n                System.out.println(\"Read event\");\n                // 可以从 clientChannel 中读数据，通过 ByteBuffer\n                // TO DO\n            }\n\n            if (key.isWritable()) {\n                // 在 OP_WRITE 和 OP_READ 事件中, 从 key.channel() 返回的是 SocketChannel\n                SocketChannel clientChannel = (SocketChannel) key.channel();\n                System.out.println(\"Write event\");\n                // 可以向 clientChannel 中写数据，通过 ByteBuffer\n                // TO DO\n            }\n        }\n    }\n}\n```","source":"_posts/java/IO-NIO2.md","raw":"---\ntitle: Java IO/NIO 对比\ndate: 2020-05-20 16:19:27\ntags:\n    - java\n    - io\n    - nio\ncategories:\n    - java\n    - IO/NIO\n---\n# Java NIO Buffer, Channel 及 Selector\n\n## Java IO VS NIO\n\n- JDK 1.4 之前，java.io 包，\n\n  面向流的I/O系统\n\n  （字节流或者字符流）\n\n  - 系统一次处理一个字节\n  - 速度慢\n\n- JDK 1.4 提供，java.nio 包，\n\n  面向块的I/O系统\n\n  - 系统一次处理一个块\n  - 速度快\n\n  ​\n\n  NIO主要有三大核心部分：Channel(通道)，Buffer(缓冲区),Selector。\n\n  ​       传统IO基于字节流和字符流进行操作，而NIO基于Channel和Buffer(缓冲区)进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。Selector(选择区)用于监听多个通道的事件（比如：连接打开，数据到达）。因此，单个线程可以监听多个数据通道。\n\n  NIO和传统IO（一下简称IO）之间第一个最大的区别是，IO是面向流的，NIO是面向缓冲区的。\n\n## Buffer 缓冲区\n\n缓冲区实际上是一个容器对象，更直接的说，其实就是一个数组。\n在 NIO 库中，所有数据都是用缓冲区处理的：\n\n- 在读取数据时，它是直接读到缓冲区中的；\n- 在写入数据时，它也是写入到缓冲区中的；\n\n在 NIO 中，所有的缓冲区类型都继承于抽象类 Buffer。常见的缓冲区 Buffer 包括：\n\n- ByteBuffer 存储了字节数组 `final byte[] hb;`\n\n- CharBuffer \n\n  ```java\n  final char[] hb;\n  ```\n\n  - **ByteBuffer 与 CharBuffer 之间的转换需要使用字符集 Charset**\n  - Charset 具体使用，参见 [Java Charset 字符集](https://www.jianshu.com/p/1c61e001b609)\n\n- ShortBuffer `final short[] hb;`\n\n- IntBuffer `final int[] hb;`\n\n- LongBuffer `final long[] hb;`\n\n- FloatBuffer `final float[] hb;`\n\n- DoubleBuffer `final double[] hb;`\n\nBuffer 类的属性：\n\n- `private int mark = -1;` 记录一个标记位置\n- `private int position = 0;`\n\n> A buffer's <i>position</i> is the index of the next element to be read or written.  A buffer's position is never negative and is never greater than its limit.\n> 当前操作的位置\n\n- `private int limit;`\n\n> A buffer's <i>limit</i> is the index of the first element that should not be read or written.  A buffer's limit is never negative and is never greater than its capacity.\n> 可以存放的元素的个数\n\n- `private int capacity;`\n\n> A buffer's <i>capacity</i> is the number of elements it contains.  The capacity of a buffer is never negative and never changes.\n> 数组容量\n\n- 大小关系：**mark <= position <= limit <= capacity**\n\nBuffer 类的方法：\n\n- `allocate(int capacity)` 分配一个缓冲区，默认 limit = capacity\n- `put()` 在当前位置添加元素\n- `get()` 得到当前位置的元素\n- `clear()` 将 Buffer 从 读模式 切换到 写模式 （该方法实际不会清空原 Buffer 的内容）\n\n```java\npublic final Buffer clear() {\n    position = 0;\n    limit = capacity;\n    mark = -1;\n    return this;\n}\n```\n\n- `flip()`  将 Buffer 从 写模式 切换到 读模式\n\n```java\npublic final Buffer flip() {\n    limit = position;\n    position = 0;\n    mark = -1;\n    return this;\n}\n```\n\n** `clear()` VS `flip()`**：\n\n- 在写模式下，Buffer 的 limit 表示你最多能往 Buffer 里写多少数据。\n  - 因此写之前，调用 `clear()`，使得 `limit = capacity;`\n- 在读模式时，Buffer 的 limit 表示你最多能从 Buffer 里读多少数据。\n  - 因此读之前，调用 `flip()`，使得 `limit = position;`\n\nIntBuffer 的使用：\n\n```java\npublic static void main(String[] args) throws Exception {\n    // 创建 int 缓冲区 capacity 为 4\n    // 默认 limit = capacity\n    IntBuffer buffer = IntBuffer.allocate(4);\n    System.out.println(\"Capacity & Limit: \" + buffer.capacity() + \" \" + buffer.limit());\n\n    // 往 Buffer 中写数据\n    buffer.put(11);\n    buffer.put(22);\n    buffer.put(33);\n    buffer.put(44);\n\n    System.out.println(\"Position: \" + buffer.position());\n\n    // 在从 Buffer 中读数据之前，调用 flip()\n    buffer.flip();\n\n    while (buffer.hasRemaining()) {\n        System.out.print(buffer.get() + \"  \");\n    }\n}\n```\n\n输出：\n\n> Capacity & Limit: 4 4\n> Position: 4\n> 11  22  33  44\n\n## Channel 通道\n\n- Java NIO 的核心概念，表示的是对支持 I/O 操作的实体的一个连接\n- 通过它可以读取和写入数据（并不是直接操作，而是通过 Buffer 来处理）\n- 双向的\n\n常用的 Channel 包括：\n\n- FileChannel 从文件中读写数据\n- DatagramChannel 从 UDP 中读写数据\n- SocketChannel 从 TCP 中读写数据\n- ServerSocketChannel 监听新进来的 TCP 连接，每一个新进来的连接都会创建一个 SocketChannel。\n\n### FileChannel 连接到文件的通道\n\n**FileChannel 无法设置为非阻塞模式，只能运行在阻塞模式下**\n常用方法：\n\n- `int read(ByteBuffer dst)` 从 Channel 中读取数据，写入 Buffer\n- `int write(ByteBuffer src)` 从 Buffer 中读取数据，写入 Channel\n- `long size()` 得到 Channel 中文件的大小\n- `long position()` 得到 Channel 中文件的当前操作位置\n- `FileChannel position(long newPosition)` 设置 Channel 中文件的当前操作位置\n\n使用 FileChannel 来复制文件的例子：\n\n```java\npublic static void main(String[] args) throws Exception {\n    // 通过 InputStream 或者 OutputStream 来构造 FileChannel\n    FileChannel in = new FileInputStream(\"a.txt\").getChannel();\n    FileChannel out = new FileOutputStream(\"b.txt\").getChannel();\n\n    ByteBuffer buffer = ByteBuffer.allocate(1024);\n\n    // 调用 channel 的 read 方法往 Buffer 中写数据\n    while(in.read(buffer) != -1) {\n        // 在从 Buffer 中读数据之前，调用 flip()\n        buffer.flip();\n        // 从 Buffer 中读数据，写入到 channel\n        out.write(buffer);\n        // 在往 Buffer 中写数据之前，调用 clear()\n        buffer.clear();\n    }\n\n    // 或者使用如下代码\n    // out.transferFrom(in, 0, in.size());\n}\n```\n\n### SocketChannel 连接到 TCP 套接字的通道\n\n**SocketChannel 可以设置为阻塞模式或非阻塞模式**\n使用 SocketChannel 来建立 TCP 连接，发送并接收数据，默认使用 **阻塞模式**：\n\n```java\npublic static void main(String[] args) throws Exception {\n    // 打开 SocketChannel\n    SocketChannel channel = SocketChannel.open();\n    // connect 方法会阻塞，直至连接建立成功\n    channel.connect(new InetSocketAddress(\"127.0.0.1\", 8080));\n\n    ByteBuffer buffer = ByteBuffer.allocate(1024);\n\n    // 发送数据\n    String msg = \"This is client.\";\n    // 在往 Buffer 中写数据之前，调用 clear()\n    buffer.clear();\n    buffer.put(msg.getBytes());\n\n    // 在从 Buffer 中读数据之前，调用 flip()\n    buffer.flip();\n    channel.write(buffer);\n\n    // 接收数据\n    // 在往 Buffer 中写数据之前，调用 clear()\n    buffer.clear();\n\n    // 调用 channel 的 read 方法往 Buffer 中写数据\n    channel.read(buffer);\n\n    // 在从 Buffer 中读数据之前，调用 flip()\n    buffer.flip();\n\n    // 从 Buffer 中读数据\n    while (buffer.hasRemaining()) {\n        System.out.print(buffer.get());\n    }\n}\n```\n\n使用 SocketChannel 的 **非阻塞模式** 来建立 TCP 连接，发送并接收数据：\n\n```java\npublic static void main(String[] args) throws Exception {\n    // 打开 SocketChannel\n    SocketChannel channel = SocketChannel.open();\n\n    channel.configureBlocking(false);\n    channel.connect(new InetSocketAddress(\"127.0.0.1\", 8080));\n\n    ByteBuffer buffer = ByteBuffer.allocate(1024);\n\n    while (!channel.finishConnect()) {\n        // 发送数据\n        String msg = \"This is client.\";\n        // 在往 Buffer 中写数据之前，调用 clear()\n        buffer.clear();\n        buffer.put(msg.getBytes());\n\n        // 在从 Buffer 中读数据之前，调用 flip()\n        buffer.flip();\n        channel.write(buffer);\n\n        // 接收数据\n        // 在往 Buffer 中写数据之前，调用 clear()\n        buffer.clear();\n\n        // 调用 channel 的 read 方法往 Buffer 中写数据\n        channel.read(buffer);\n\n        // 在从 Buffer 中读数据之前，调用 flip()\n        buffer.flip();\n\n        // 从 Buffer 中读数据\n        while (buffer.hasRemaining()) {\n            System.out.print(buffer.get());\n        }\n    }\n}\n```\n\n### ServerSocketChannel 监听 TCP 连接的通道\n\n**ServerSocketChannel 可以设置为阻塞模式或非阻塞模式**\n使用 ServerSocketChannel 来监听 TCP 连接，默认使用 **阻塞模式**：\n\n```java\npublic static void main(String[] args) throws Exception {\n    // 打开 SocketChannel\n    ServerSocketChannel channel = ServerSocketChannel.open();\n    // 绑定端口\n    channel.socket().bind(new InetSocketAddress(8080));\n\n    ByteBuffer buffer = ByteBuffer.allocate(1024);\n\n    while (true) {\n        // accept 方法会阻塞，直至监听到 TCP 连接\n        SocketChannel socketChannel = channel.accept();\n        System.out.println(\"A new connection...\");\n\n        // 接收数据\n        // 在往 Buffer 中写数据之前，调用 clear()\n        buffer.clear();\n\n        // 调用 channel 的 read 方法往 Buffer 中写数据\n        socketChannel.read(buffer);\n\n        // 在从 Buffer 中读数据之前，调用 flip()\n        buffer.flip();\n\n        // 从 Buffer 中读数据\n        while (buffer.hasRemaining()) {\n            System.out.print(buffer.get());\n        }\n\n        // 在往 Buffer 中写数据之前，调用 clear()\n        // 发送数据\n        String msg = \"This is server.\";\n        // 在往 Buffer 中写数据之前，调用 clear()\n        buffer.clear();\n        buffer.put(msg.getBytes());\n\n        // 在从 Buffer 中读数据之前，调用 flip()\n        buffer.flip();\n        socketChannel.write(buffer);\n    }\n}\n```\n\n## Selector 选择器\n\n**Selector 允许单个进程可以同时处理多个网络连接的 IO，即监听多个端口的 Channel**。\n\n**关于 IO 模式，参见 Linux IO 模型 中对多路复用 IO Multiplexing IO 的说明。**\n\n引用：\n\n------\n\n## 多路复用 IO Multiplexing IO\n\n- **单个进程可以同时处理多个网络连接的 IO，即监听多个端口的 IO**\n- 适用于连接数很高的情况\n- 实现方式：select，poll，epoll 系统调用\n  - 注册多个端口的监听 Socket，比如 8080，8081\n  - 当用户进程调用 select 方法后，整个用户进程被阻塞，OS 内核会监听所有注册的 Socket\n  - 当任何一个端口的 Socket 中的数据准备好了（ 8080 或者 8081），select 方法就会返回\n  - 随后用户进程再调用 read 操作，将数据从 OS 内核缓存区拷贝到应用程序的地址空间。\n- 多路复用 IO 类似于 多线程结合阻塞 IO\n  - 要实现监听多个端口的 IO，还可以通过多线程的方式，每一个线程负责监听一个端口的 IO\n  - 如果处理的连接数不是很高的话，使用 多路复用 IO 不一定比使用 **多线程结合阻塞 IO** 的服务器性能更好，可能延迟还更大\n  - 多路复用 IO 的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接\n\n------\n\n**Selector 使用步骤：**\n\n- **创建 Selector**\n\n- **创建 Channel**，可以创建多个 Channel，即监听多个端口，比如 8080，8081\n\n- 将 Channel 注册到 Selector 中\n\n  - 如果一个 Channel 要注册到 Selector 中, 那么这个 Channel 必须是非阻塞的, 即 `channel.configureBlocking(false);`\n\n  - 因此 FileChannel 是不能够使用 Selector 的, 因为 FileChannel 都是阻塞的\n\n  - 注册时，需要指定了对 Channel 的什么事件感兴趣，包括：\n\n    - SelectionKey.OP_CONNECT：TCP 连接 `static final int OP_CONNECT = 1 << 3;`\n    - SelectionKey.OP_ACCEPT：确认 `static final int OP_ACCEPT = 1 << 4;`\n    - SelectionKey.OP_READ：读 `static final int OP_READ = 1 << 0;`\n    - SelectionKey.OP_WRITE：写 `static final int OP_WRITE = 1 << 2;`\n    - 可以使用或运算 **|** 来组合，例如 `SelectionKey.OP_READ | SelectionKey.OP_WRITE`\n\n  - register 方法返回一个 SelectionKey 对象，包括：\n\n    - `int interestOps()`：调用 register 注册 channel 时所设置的 interest set.\n\n    - ```java\n      int readyOps()\n      ```\n\n      ：Channel 所准备好了的操作\n\n      - `selectionKey.isAcceptable();`\n      - `selectionKey.isConnectable();`\n      - `selectionKey.isReadable();`\n      - `selectionKey.isWritable();`\n\n    - `public abstract SelectableChannel channel();`： 得到 Channel\n\n    - `public abstract Selector selector();`：得到 Selector\n\n    - `public final Object attachment`：得到附加对象\n\n- 不断重复：\n\n  - 调用 Selector 对象的 select() 方法，**该方法会阻塞，直至注册的事件发生**\n  - **事件发生**，调用 Selector 对象的 selectedKeys() 方法获取 selected keys\n  - 遍历每个 selected key:\n    - 从 selected key 中获取对应的 Channel 并处理\n    - 在 OP_ACCEPT 事件中, 从 key.channel() 返回的是 ServerSocketChannel\n    - 在 OP_WRITE 和 OP_READ 事件中, 从 key.channel() 返回的是 SocketChannel\n\n- **关闭 Selector**\n\n示例：\n\n```java\npublic static void main(String args[]) throws Exception {\n    // 创建 Selector\n    Selector selector = Selector.open();\n\n    // 创建 Server Socket，监听端口 8080\n    ServerSocketChannel serverChannel1 = ServerSocketChannel.open();\n    serverChannel1.socket().bind(new InetSocketAddress(8080));\n    // 如果一个 Channel 要注册到 Selector 中, 那么这个 Channel 必须是非阻塞的\n    serverChannel1.configureBlocking(false);\n\n    // 创建 Server Socket，监听端口 8081\n    ServerSocketChannel serverChannel2 = ServerSocketChannel.open();\n    serverChannel2.socket().bind(new InetSocketAddress(8081));\n    // 如果一个 Channel 要注册到 Selector 中, 那么这个 Channel 必须是非阻塞的\n    serverChannel2.configureBlocking(false);\n\n    // 将 Channel 注册到 Selector 中\n    serverChannel1.register(selector, SelectionKey.OP_ACCEPT);\n    serverChannel2.register(selector, SelectionKey.OP_ACCEPT);\n\n    // 不断重复\n    while (true) {\n        // 调用 Selector 对象的 select() 方法，该方法会阻塞，直至注册的事件发生\n        selector.select();\n\n        // 事件发生，调用 Selector 对象的 selectedKeys() 方法获取 selected keys\n        Iterator<SelectionKey> it = selector.selectedKeys().iterator();\n\n        // 遍历每个 selected key:\n        while (it.hasNext()) {\n            SelectionKey key = it.next();\n\n            if (key.isAcceptable()) {\n                // 在 OP_ACCEPT 事件中, 从 key.channel() 返回的是 ServerSocketChannel\n                ServerSocketChannel serverChannel = (ServerSocketChannel) key.channel();\n\n                // 调用 accept 方法获取 TCP 连接 SocketChanne\n                SocketChannel clientChannel = serverChannel.accept();\n                clientChannel.configureBlocking(false);\n\n                // 注册 SocketChannel\n                clientChannel.register(key.selector(), SelectionKey.OP_READ | SelectionKey.OP_WRITE);\n\n                System.out.println(\"Accept event\");\n            }\n\n            if (key.isReadable()) {\n                // 在 OP_WRITE 和 OP_READ 事件中, 从 key.channel() 返回的是 SocketChannel\n                SocketChannel clientChannel = (SocketChannel) key.channel();\n                System.out.println(\"Read event\");\n                // 可以从 clientChannel 中读数据，通过 ByteBuffer\n                // TO DO\n            }\n\n            if (key.isWritable()) {\n                // 在 OP_WRITE 和 OP_READ 事件中, 从 key.channel() 返回的是 SocketChannel\n                SocketChannel clientChannel = (SocketChannel) key.channel();\n                System.out.println(\"Write event\");\n                // 可以向 clientChannel 中写数据，通过 ByteBuffer\n                // TO DO\n            }\n        }\n    }\n}\n```","slug":"java/IO-NIO2","published":1,"updated":"2020-05-20T08:45:30.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmxe004pa4ja2bqga4t7","content":"<h1 id=\"Java-NIO-Buffer-Channel-及-Selector\"><a href=\"#Java-NIO-Buffer-Channel-及-Selector\" class=\"headerlink\" title=\"Java NIO Buffer, Channel 及 Selector\"></a>Java NIO Buffer, Channel 及 Selector</h1><h2 id=\"Java-IO-VS-NIO\"><a href=\"#Java-IO-VS-NIO\" class=\"headerlink\" title=\"Java IO VS NIO\"></a>Java IO VS NIO</h2><ul>\n<li><p>JDK 1.4 之前，java.io 包，</p>\n<p>面向流的I/O系统</p>\n<p>（字节流或者字符流）</p>\n<ul>\n<li>系统一次处理一个字节</li>\n<li>速度慢</li>\n</ul>\n</li>\n<li><p>JDK 1.4 提供，java.nio 包，</p>\n<p>面向块的I/O系统</p>\n<ul>\n<li>系统一次处理一个块</li>\n<li>速度快</li>\n</ul>\n<p>​</p>\n<p>NIO主要有三大核心部分：Channel(通道)，Buffer(缓冲区),Selector。</p>\n<p>​       传统IO基于字节流和字符流进行操作，而NIO基于Channel和Buffer(缓冲区)进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。Selector(选择区)用于监听多个通道的事件（比如：连接打开，数据到达）。因此，单个线程可以监听多个数据通道。</p>\n<p>NIO和传统IO（一下简称IO）之间第一个最大的区别是，IO是面向流的，NIO是面向缓冲区的。</p>\n</li>\n</ul>\n<h2 id=\"Buffer-缓冲区\"><a href=\"#Buffer-缓冲区\" class=\"headerlink\" title=\"Buffer 缓冲区\"></a>Buffer 缓冲区</h2><p>缓冲区实际上是一个容器对象，更直接的说，其实就是一个数组。<br>在 NIO 库中，所有数据都是用缓冲区处理的：</p>\n<ul>\n<li>在读取数据时，它是直接读到缓冲区中的；</li>\n<li>在写入数据时，它也是写入到缓冲区中的；</li>\n</ul>\n<p>在 NIO 中，所有的缓冲区类型都继承于抽象类 Buffer。常见的缓冲区 Buffer 包括：</p>\n<ul>\n<li><p>ByteBuffer 存储了字节数组 <code>final byte[] hb;</code></p>\n</li>\n<li><p>CharBuffer </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">char</span>[] hb;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>ByteBuffer 与 CharBuffer 之间的转换需要使用字符集 Charset</strong></li>\n<li>Charset 具体使用，参见 <a href=\"https://www.jianshu.com/p/1c61e001b609\" target=\"_blank\" rel=\"noopener\">Java Charset 字符集</a></li>\n</ul>\n</li>\n<li><p>ShortBuffer <code>final short[] hb;</code></p>\n</li>\n<li><p>IntBuffer <code>final int[] hb;</code></p>\n</li>\n<li><p>LongBuffer <code>final long[] hb;</code></p>\n</li>\n<li><p>FloatBuffer <code>final float[] hb;</code></p>\n</li>\n<li><p>DoubleBuffer <code>final double[] hb;</code></p>\n</li>\n</ul>\n<p>Buffer 类的属性：</p>\n<ul>\n<li><code>private int mark = -1;</code> 记录一个标记位置</li>\n<li><code>private int position = 0;</code></li>\n</ul>\n<blockquote>\n<p>A buffer’s <i>position</i> is the index of the next element to be read or written.  A buffer’s position is never negative and is never greater than its limit.<br>当前操作的位置</p>\n</blockquote>\n<ul>\n<li><code>private int limit;</code></li>\n</ul>\n<blockquote>\n<p>A buffer’s <i>limit</i> is the index of the first element that should not be read or written.  A buffer’s limit is never negative and is never greater than its capacity.<br>可以存放的元素的个数</p>\n</blockquote>\n<ul>\n<li><code>private int capacity;</code></li>\n</ul>\n<blockquote>\n<p>A buffer’s <i>capacity</i> is the number of elements it contains.  The capacity of a buffer is never negative and never changes.<br>数组容量</p>\n</blockquote>\n<ul>\n<li>大小关系：<strong>mark &lt;= position &lt;= limit &lt;= capacity</strong></li>\n</ul>\n<p>Buffer 类的方法：</p>\n<ul>\n<li><code>allocate(int capacity)</code> 分配一个缓冲区，默认 limit = capacity</li>\n<li><code>put()</code> 在当前位置添加元素</li>\n<li><code>get()</code> 得到当前位置的元素</li>\n<li><code>clear()</code> 将 Buffer 从 读模式 切换到 写模式 （该方法实际不会清空原 Buffer 的内容）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Buffer <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    position = <span class=\"number\">0</span>;</span><br><span class=\"line\">    limit = capacity;</span><br><span class=\"line\">    mark = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>flip()</code>  将 Buffer 从 写模式 切换到 读模式</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Buffer <span class=\"title\">flip</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    limit = position;</span><br><span class=\"line\">    position = <span class=\"number\">0</span>;</span><br><span class=\"line\">    mark = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>** <code>clear()</code> VS <code>flip()</code>**：</p>\n<ul>\n<li>在写模式下，Buffer 的 limit 表示你最多能往 Buffer 里写多少数据。<ul>\n<li>因此写之前，调用 <code>clear()</code>，使得 <code>limit = capacity;</code></li>\n</ul>\n</li>\n<li>在读模式时，Buffer 的 limit 表示你最多能从 Buffer 里读多少数据。<ul>\n<li>因此读之前，调用 <code>flip()</code>，使得 <code>limit = position;</code></li>\n</ul>\n</li>\n</ul>\n<p>IntBuffer 的使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建 int 缓冲区 capacity 为 4</span></span><br><span class=\"line\">    <span class=\"comment\">// 默认 limit = capacity</span></span><br><span class=\"line\">    IntBuffer buffer = IntBuffer.allocate(<span class=\"number\">4</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Capacity &amp; Limit: \"</span> + buffer.capacity() + <span class=\"string\">\" \"</span> + buffer.limit());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 往 Buffer 中写数据</span></span><br><span class=\"line\">    buffer.put(<span class=\"number\">11</span>);</span><br><span class=\"line\">    buffer.put(<span class=\"number\">22</span>);</span><br><span class=\"line\">    buffer.put(<span class=\"number\">33</span>);</span><br><span class=\"line\">    buffer.put(<span class=\"number\">44</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Position: \"</span> + buffer.position());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在从 Buffer 中读数据之前，调用 flip()</span></span><br><span class=\"line\">    buffer.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (buffer.hasRemaining()) &#123;</span><br><span class=\"line\">        System.out.print(buffer.get() + <span class=\"string\">\"  \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<blockquote>\n<p>Capacity &amp; Limit: 4 4<br>Position: 4<br>11  22  33  44</p>\n</blockquote>\n<h2 id=\"Channel-通道\"><a href=\"#Channel-通道\" class=\"headerlink\" title=\"Channel 通道\"></a>Channel 通道</h2><ul>\n<li>Java NIO 的核心概念，表示的是对支持 I/O 操作的实体的一个连接</li>\n<li>通过它可以读取和写入数据（并不是直接操作，而是通过 Buffer 来处理）</li>\n<li>双向的</li>\n</ul>\n<p>常用的 Channel 包括：</p>\n<ul>\n<li>FileChannel 从文件中读写数据</li>\n<li>DatagramChannel 从 UDP 中读写数据</li>\n<li>SocketChannel 从 TCP 中读写数据</li>\n<li>ServerSocketChannel 监听新进来的 TCP 连接，每一个新进来的连接都会创建一个 SocketChannel。</li>\n</ul>\n<h3 id=\"FileChannel-连接到文件的通道\"><a href=\"#FileChannel-连接到文件的通道\" class=\"headerlink\" title=\"FileChannel 连接到文件的通道\"></a>FileChannel 连接到文件的通道</h3><p><strong>FileChannel 无法设置为非阻塞模式，只能运行在阻塞模式下</strong><br>常用方法：</p>\n<ul>\n<li><code>int read(ByteBuffer dst)</code> 从 Channel 中读取数据，写入 Buffer</li>\n<li><code>int write(ByteBuffer src)</code> 从 Buffer 中读取数据，写入 Channel</li>\n<li><code>long size()</code> 得到 Channel 中文件的大小</li>\n<li><code>long position()</code> 得到 Channel 中文件的当前操作位置</li>\n<li><code>FileChannel position(long newPosition)</code> 设置 Channel 中文件的当前操作位置</li>\n</ul>\n<p>使用 FileChannel 来复制文件的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过 InputStream 或者 OutputStream 来构造 FileChannel</span></span><br><span class=\"line\">    FileChannel in = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"a.txt\"</span>).getChannel();</span><br><span class=\"line\">    FileChannel out = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"b.txt\"</span>).getChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">    ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用 channel 的 read 方法往 Buffer 中写数据</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(in.read(buffer) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在从 Buffer 中读数据之前，调用 flip()</span></span><br><span class=\"line\">        buffer.flip();</span><br><span class=\"line\">        <span class=\"comment\">// 从 Buffer 中读数据，写入到 channel</span></span><br><span class=\"line\">        out.write(buffer);</span><br><span class=\"line\">        <span class=\"comment\">// 在往 Buffer 中写数据之前，调用 clear()</span></span><br><span class=\"line\">        buffer.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 或者使用如下代码</span></span><br><span class=\"line\">    <span class=\"comment\">// out.transferFrom(in, 0, in.size());</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SocketChannel-连接到-TCP-套接字的通道\"><a href=\"#SocketChannel-连接到-TCP-套接字的通道\" class=\"headerlink\" title=\"SocketChannel 连接到 TCP 套接字的通道\"></a>SocketChannel 连接到 TCP 套接字的通道</h3><p><strong>SocketChannel 可以设置为阻塞模式或非阻塞模式</strong><br>使用 SocketChannel 来建立 TCP 连接，发送并接收数据，默认使用 <strong>阻塞模式</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打开 SocketChannel</span></span><br><span class=\"line\">    SocketChannel channel = SocketChannel.open();</span><br><span class=\"line\">    <span class=\"comment\">// connect 方法会阻塞，直至连接建立成功</span></span><br><span class=\"line\">    channel.connect(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">8080</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">    String msg = <span class=\"string\">\"This is client.\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 在往 Buffer 中写数据之前，调用 clear()</span></span><br><span class=\"line\">    buffer.clear();</span><br><span class=\"line\">    buffer.put(msg.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在从 Buffer 中读数据之前，调用 flip()</span></span><br><span class=\"line\">    buffer.flip();</span><br><span class=\"line\">    channel.write(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 接收数据</span></span><br><span class=\"line\">    <span class=\"comment\">// 在往 Buffer 中写数据之前，调用 clear()</span></span><br><span class=\"line\">    buffer.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用 channel 的 read 方法往 Buffer 中写数据</span></span><br><span class=\"line\">    channel.read(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在从 Buffer 中读数据之前，调用 flip()</span></span><br><span class=\"line\">    buffer.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从 Buffer 中读数据</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (buffer.hasRemaining()) &#123;</span><br><span class=\"line\">        System.out.print(buffer.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 SocketChannel 的 <strong>非阻塞模式</strong> 来建立 TCP 连接，发送并接收数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打开 SocketChannel</span></span><br><span class=\"line\">    SocketChannel channel = SocketChannel.open();</span><br><span class=\"line\"></span><br><span class=\"line\">    channel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    channel.connect(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">8080</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!channel.finishConnect()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">        String msg = <span class=\"string\">\"This is client.\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 在往 Buffer 中写数据之前，调用 clear()</span></span><br><span class=\"line\">        buffer.clear();</span><br><span class=\"line\">        buffer.put(msg.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 在从 Buffer 中读数据之前，调用 flip()</span></span><br><span class=\"line\">        buffer.flip();</span><br><span class=\"line\">        channel.write(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 接收数据</span></span><br><span class=\"line\">        <span class=\"comment\">// 在往 Buffer 中写数据之前，调用 clear()</span></span><br><span class=\"line\">        buffer.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用 channel 的 read 方法往 Buffer 中写数据</span></span><br><span class=\"line\">        channel.read(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 在从 Buffer 中读数据之前，调用 flip()</span></span><br><span class=\"line\">        buffer.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 从 Buffer 中读数据</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (buffer.hasRemaining()) &#123;</span><br><span class=\"line\">            System.out.print(buffer.get());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ServerSocketChannel-监听-TCP-连接的通道\"><a href=\"#ServerSocketChannel-监听-TCP-连接的通道\" class=\"headerlink\" title=\"ServerSocketChannel 监听 TCP 连接的通道\"></a>ServerSocketChannel 监听 TCP 连接的通道</h3><p><strong>ServerSocketChannel 可以设置为阻塞模式或非阻塞模式</strong><br>使用 ServerSocketChannel 来监听 TCP 连接，默认使用 <strong>阻塞模式</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打开 SocketChannel</span></span><br><span class=\"line\">    ServerSocketChannel channel = ServerSocketChannel.open();</span><br><span class=\"line\">    <span class=\"comment\">// 绑定端口</span></span><br><span class=\"line\">    channel.socket().bind(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"number\">8080</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// accept 方法会阻塞，直至监听到 TCP 连接</span></span><br><span class=\"line\">        SocketChannel socketChannel = channel.accept();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"A new connection...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 接收数据</span></span><br><span class=\"line\">        <span class=\"comment\">// 在往 Buffer 中写数据之前，调用 clear()</span></span><br><span class=\"line\">        buffer.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用 channel 的 read 方法往 Buffer 中写数据</span></span><br><span class=\"line\">        socketChannel.read(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 在从 Buffer 中读数据之前，调用 flip()</span></span><br><span class=\"line\">        buffer.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 从 Buffer 中读数据</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (buffer.hasRemaining()) &#123;</span><br><span class=\"line\">            System.out.print(buffer.get());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 在往 Buffer 中写数据之前，调用 clear()</span></span><br><span class=\"line\">        <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">        String msg = <span class=\"string\">\"This is server.\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 在往 Buffer 中写数据之前，调用 clear()</span></span><br><span class=\"line\">        buffer.clear();</span><br><span class=\"line\">        buffer.put(msg.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 在从 Buffer 中读数据之前，调用 flip()</span></span><br><span class=\"line\">        buffer.flip();</span><br><span class=\"line\">        socketChannel.write(buffer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Selector-选择器\"><a href=\"#Selector-选择器\" class=\"headerlink\" title=\"Selector 选择器\"></a>Selector 选择器</h2><p><strong>Selector 允许单个进程可以同时处理多个网络连接的 IO，即监听多个端口的 Channel</strong>。</p>\n<p><strong>关于 IO 模式，参见 Linux IO 模型 中对多路复用 IO Multiplexing IO 的说明。</strong></p>\n<p>引用：</p>\n<hr>\n<h2 id=\"多路复用-IO-Multiplexing-IO\"><a href=\"#多路复用-IO-Multiplexing-IO\" class=\"headerlink\" title=\"多路复用 IO Multiplexing IO\"></a>多路复用 IO Multiplexing IO</h2><ul>\n<li><strong>单个进程可以同时处理多个网络连接的 IO，即监听多个端口的 IO</strong></li>\n<li>适用于连接数很高的情况</li>\n<li>实现方式：select，poll，epoll 系统调用<ul>\n<li>注册多个端口的监听 Socket，比如 8080，8081</li>\n<li>当用户进程调用 select 方法后，整个用户进程被阻塞，OS 内核会监听所有注册的 Socket</li>\n<li>当任何一个端口的 Socket 中的数据准备好了（ 8080 或者 8081），select 方法就会返回</li>\n<li>随后用户进程再调用 read 操作，将数据从 OS 内核缓存区拷贝到应用程序的地址空间。</li>\n</ul>\n</li>\n<li>多路复用 IO 类似于 多线程结合阻塞 IO<ul>\n<li>要实现监听多个端口的 IO，还可以通过多线程的方式，每一个线程负责监听一个端口的 IO</li>\n<li>如果处理的连接数不是很高的话，使用 多路复用 IO 不一定比使用 <strong>多线程结合阻塞 IO</strong> 的服务器性能更好，可能延迟还更大</li>\n<li>多路复用 IO 的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>Selector 使用步骤：</strong></p>\n<ul>\n<li><p><strong>创建 Selector</strong></p>\n</li>\n<li><p><strong>创建 Channel</strong>，可以创建多个 Channel，即监听多个端口，比如 8080，8081</p>\n</li>\n<li><p>将 Channel 注册到 Selector 中</p>\n<ul>\n<li><p>如果一个 Channel 要注册到 Selector 中, 那么这个 Channel 必须是非阻塞的, 即 <code>channel.configureBlocking(false);</code></p>\n</li>\n<li><p>因此 FileChannel 是不能够使用 Selector 的, 因为 FileChannel 都是阻塞的</p>\n</li>\n<li><p>注册时，需要指定了对 Channel 的什么事件感兴趣，包括：</p>\n<ul>\n<li>SelectionKey.OP_CONNECT：TCP 连接 <code>static final int OP_CONNECT = 1 &lt;&lt; 3;</code></li>\n<li>SelectionKey.OP_ACCEPT：确认 <code>static final int OP_ACCEPT = 1 &lt;&lt; 4;</code></li>\n<li>SelectionKey.OP_READ：读 <code>static final int OP_READ = 1 &lt;&lt; 0;</code></li>\n<li>SelectionKey.OP_WRITE：写 <code>static final int OP_WRITE = 1 &lt;&lt; 2;</code></li>\n<li>可以使用或运算 <strong>|</strong> 来组合，例如 <code>SelectionKey.OP_READ | SelectionKey.OP_WRITE</code></li>\n</ul>\n</li>\n<li><p>register 方法返回一个 SelectionKey 对象，包括：</p>\n<ul>\n<li><p><code>int interestOps()</code>：调用 register 注册 channel 时所设置的 interest set.</p>\n</li>\n<li><p>```java<br>int readyOps()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">      ：Channel 所准备好了的操作</span><br><span class=\"line\"></span><br><span class=\"line\">      - &#96;selectionKey.isAcceptable();&#96;</span><br><span class=\"line\">      - &#96;selectionKey.isConnectable();&#96;</span><br><span class=\"line\">      - &#96;selectionKey.isReadable();&#96;</span><br><span class=\"line\">      - &#96;selectionKey.isWritable();&#96;</span><br><span class=\"line\"></span><br><span class=\"line\">    - &#96;public abstract SelectableChannel channel();&#96;： 得到 Channel</span><br><span class=\"line\"></span><br><span class=\"line\">    - &#96;public abstract Selector selector();&#96;：得到 Selector</span><br><span class=\"line\"></span><br><span class=\"line\">    - &#96;public final Object attachment&#96;：得到附加对象</span><br><span class=\"line\"></span><br><span class=\"line\">- 不断重复：</span><br><span class=\"line\"></span><br><span class=\"line\">  - 调用 Selector 对象的 select() 方法，**该方法会阻塞，直至注册的事件发生**</span><br><span class=\"line\">  - **事件发生**，调用 Selector 对象的 selectedKeys() 方法获取 selected keys</span><br><span class=\"line\">  - 遍历每个 selected key:</span><br><span class=\"line\">    - 从 selected key 中获取对应的 Channel 并处理</span><br><span class=\"line\">    - 在 OP_ACCEPT 事件中, 从 key.channel() 返回的是 ServerSocketChannel</span><br><span class=\"line\">    - 在 OP_WRITE 和 OP_READ 事件中, 从 key.channel() 返回的是 SocketChannel</span><br><span class=\"line\"></span><br><span class=\"line\">- **关闭 Selector**</span><br><span class=\"line\"></span><br><span class=\"line\">示例：</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;java</span><br><span class=\"line\">public static void main(String args[]) throws Exception &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Selector</span><br><span class=\"line\">    Selector selector &#x3D; Selector.open();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Server Socket，监听端口 8080</span><br><span class=\"line\">    ServerSocketChannel serverChannel1 &#x3D; ServerSocketChannel.open();</span><br><span class=\"line\">    serverChannel1.socket().bind(new InetSocketAddress(8080));</span><br><span class=\"line\">    &#x2F;&#x2F; 如果一个 Channel 要注册到 Selector 中, 那么这个 Channel 必须是非阻塞的</span><br><span class=\"line\">    serverChannel1.configureBlocking(false);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Server Socket，监听端口 8081</span><br><span class=\"line\">    ServerSocketChannel serverChannel2 &#x3D; ServerSocketChannel.open();</span><br><span class=\"line\">    serverChannel2.socket().bind(new InetSocketAddress(8081));</span><br><span class=\"line\">    &#x2F;&#x2F; 如果一个 Channel 要注册到 Selector 中, 那么这个 Channel 必须是非阻塞的</span><br><span class=\"line\">    serverChannel2.configureBlocking(false);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 将 Channel 注册到 Selector 中</span><br><span class=\"line\">    serverChannel1.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\">    serverChannel2.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 不断重复</span><br><span class=\"line\">    while (true) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 调用 Selector 对象的 select() 方法，该方法会阻塞，直至注册的事件发生</span><br><span class=\"line\">        selector.select();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 事件发生，调用 Selector 对象的 selectedKeys() 方法获取 selected keys</span><br><span class=\"line\">        Iterator&lt;SelectionKey&gt; it &#x3D; selector.selectedKeys().iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 遍历每个 selected key:</span><br><span class=\"line\">        while (it.hasNext()) &#123;</span><br><span class=\"line\">            SelectionKey key &#x3D; it.next();</span><br><span class=\"line\"></span><br><span class=\"line\">            if (key.isAcceptable()) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F; 在 OP_ACCEPT 事件中, 从 key.channel() 返回的是 ServerSocketChannel</span><br><span class=\"line\">                ServerSocketChannel serverChannel &#x3D; (ServerSocketChannel) key.channel();</span><br><span class=\"line\"></span><br><span class=\"line\">                &#x2F;&#x2F; 调用 accept 方法获取 TCP 连接 SocketChanne</span><br><span class=\"line\">                SocketChannel clientChannel &#x3D; serverChannel.accept();</span><br><span class=\"line\">                clientChannel.configureBlocking(false);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#x2F;&#x2F; 注册 SocketChannel</span><br><span class=\"line\">                clientChannel.register(key.selector(), SelectionKey.OP_READ | SelectionKey.OP_WRITE);</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(&quot;Accept event&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (key.isReadable()) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F; 在 OP_WRITE 和 OP_READ 事件中, 从 key.channel() 返回的是 SocketChannel</span><br><span class=\"line\">                SocketChannel clientChannel &#x3D; (SocketChannel) key.channel();</span><br><span class=\"line\">                System.out.println(&quot;Read event&quot;);</span><br><span class=\"line\">                &#x2F;&#x2F; 可以从 clientChannel 中读数据，通过 ByteBuffer</span><br><span class=\"line\">                &#x2F;&#x2F; TO DO</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (key.isWritable()) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F; 在 OP_WRITE 和 OP_READ 事件中, 从 key.channel() 返回的是 SocketChannel</span><br><span class=\"line\">                SocketChannel clientChannel &#x3D; (SocketChannel) key.channel();</span><br><span class=\"line\">                System.out.println(&quot;Write event&quot;);</span><br><span class=\"line\">                &#x2F;&#x2F; 可以向 clientChannel 中写数据，通过 ByteBuffer</span><br><span class=\"line\">                &#x2F;&#x2F; TO DO</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java-NIO-Buffer-Channel-及-Selector\"><a href=\"#Java-NIO-Buffer-Channel-及-Selector\" class=\"headerlink\" title=\"Java NIO Buffer, Channel 及 Selector\"></a>Java NIO Buffer, Channel 及 Selector</h1><h2 id=\"Java-IO-VS-NIO\"><a href=\"#Java-IO-VS-NIO\" class=\"headerlink\" title=\"Java IO VS NIO\"></a>Java IO VS NIO</h2><ul>\n<li><p>JDK 1.4 之前，java.io 包，</p>\n<p>面向流的I/O系统</p>\n<p>（字节流或者字符流）</p>\n<ul>\n<li>系统一次处理一个字节</li>\n<li>速度慢</li>\n</ul>\n</li>\n<li><p>JDK 1.4 提供，java.nio 包，</p>\n<p>面向块的I/O系统</p>\n<ul>\n<li>系统一次处理一个块</li>\n<li>速度快</li>\n</ul>\n<p>​</p>\n<p>NIO主要有三大核心部分：Channel(通道)，Buffer(缓冲区),Selector。</p>\n<p>​       传统IO基于字节流和字符流进行操作，而NIO基于Channel和Buffer(缓冲区)进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。Selector(选择区)用于监听多个通道的事件（比如：连接打开，数据到达）。因此，单个线程可以监听多个数据通道。</p>\n<p>NIO和传统IO（一下简称IO）之间第一个最大的区别是，IO是面向流的，NIO是面向缓冲区的。</p>\n</li>\n</ul>\n<h2 id=\"Buffer-缓冲区\"><a href=\"#Buffer-缓冲区\" class=\"headerlink\" title=\"Buffer 缓冲区\"></a>Buffer 缓冲区</h2><p>缓冲区实际上是一个容器对象，更直接的说，其实就是一个数组。<br>在 NIO 库中，所有数据都是用缓冲区处理的：</p>\n<ul>\n<li>在读取数据时，它是直接读到缓冲区中的；</li>\n<li>在写入数据时，它也是写入到缓冲区中的；</li>\n</ul>\n<p>在 NIO 中，所有的缓冲区类型都继承于抽象类 Buffer。常见的缓冲区 Buffer 包括：</p>\n<ul>\n<li><p>ByteBuffer 存储了字节数组 <code>final byte[] hb;</code></p>\n</li>\n<li><p>CharBuffer </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">char</span>[] hb;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>ByteBuffer 与 CharBuffer 之间的转换需要使用字符集 Charset</strong></li>\n<li>Charset 具体使用，参见 <a href=\"https://www.jianshu.com/p/1c61e001b609\" target=\"_blank\" rel=\"noopener\">Java Charset 字符集</a></li>\n</ul>\n</li>\n<li><p>ShortBuffer <code>final short[] hb;</code></p>\n</li>\n<li><p>IntBuffer <code>final int[] hb;</code></p>\n</li>\n<li><p>LongBuffer <code>final long[] hb;</code></p>\n</li>\n<li><p>FloatBuffer <code>final float[] hb;</code></p>\n</li>\n<li><p>DoubleBuffer <code>final double[] hb;</code></p>\n</li>\n</ul>\n<p>Buffer 类的属性：</p>\n<ul>\n<li><code>private int mark = -1;</code> 记录一个标记位置</li>\n<li><code>private int position = 0;</code></li>\n</ul>\n<blockquote>\n<p>A buffer’s <i>position</i> is the index of the next element to be read or written.  A buffer’s position is never negative and is never greater than its limit.<br>当前操作的位置</p>\n</blockquote>\n<ul>\n<li><code>private int limit;</code></li>\n</ul>\n<blockquote>\n<p>A buffer’s <i>limit</i> is the index of the first element that should not be read or written.  A buffer’s limit is never negative and is never greater than its capacity.<br>可以存放的元素的个数</p>\n</blockquote>\n<ul>\n<li><code>private int capacity;</code></li>\n</ul>\n<blockquote>\n<p>A buffer’s <i>capacity</i> is the number of elements it contains.  The capacity of a buffer is never negative and never changes.<br>数组容量</p>\n</blockquote>\n<ul>\n<li>大小关系：<strong>mark &lt;= position &lt;= limit &lt;= capacity</strong></li>\n</ul>\n<p>Buffer 类的方法：</p>\n<ul>\n<li><code>allocate(int capacity)</code> 分配一个缓冲区，默认 limit = capacity</li>\n<li><code>put()</code> 在当前位置添加元素</li>\n<li><code>get()</code> 得到当前位置的元素</li>\n<li><code>clear()</code> 将 Buffer 从 读模式 切换到 写模式 （该方法实际不会清空原 Buffer 的内容）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Buffer <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    position = <span class=\"number\">0</span>;</span><br><span class=\"line\">    limit = capacity;</span><br><span class=\"line\">    mark = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>flip()</code>  将 Buffer 从 写模式 切换到 读模式</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Buffer <span class=\"title\">flip</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    limit = position;</span><br><span class=\"line\">    position = <span class=\"number\">0</span>;</span><br><span class=\"line\">    mark = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>** <code>clear()</code> VS <code>flip()</code>**：</p>\n<ul>\n<li>在写模式下，Buffer 的 limit 表示你最多能往 Buffer 里写多少数据。<ul>\n<li>因此写之前，调用 <code>clear()</code>，使得 <code>limit = capacity;</code></li>\n</ul>\n</li>\n<li>在读模式时，Buffer 的 limit 表示你最多能从 Buffer 里读多少数据。<ul>\n<li>因此读之前，调用 <code>flip()</code>，使得 <code>limit = position;</code></li>\n</ul>\n</li>\n</ul>\n<p>IntBuffer 的使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建 int 缓冲区 capacity 为 4</span></span><br><span class=\"line\">    <span class=\"comment\">// 默认 limit = capacity</span></span><br><span class=\"line\">    IntBuffer buffer = IntBuffer.allocate(<span class=\"number\">4</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Capacity &amp; Limit: \"</span> + buffer.capacity() + <span class=\"string\">\" \"</span> + buffer.limit());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 往 Buffer 中写数据</span></span><br><span class=\"line\">    buffer.put(<span class=\"number\">11</span>);</span><br><span class=\"line\">    buffer.put(<span class=\"number\">22</span>);</span><br><span class=\"line\">    buffer.put(<span class=\"number\">33</span>);</span><br><span class=\"line\">    buffer.put(<span class=\"number\">44</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Position: \"</span> + buffer.position());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在从 Buffer 中读数据之前，调用 flip()</span></span><br><span class=\"line\">    buffer.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (buffer.hasRemaining()) &#123;</span><br><span class=\"line\">        System.out.print(buffer.get() + <span class=\"string\">\"  \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<blockquote>\n<p>Capacity &amp; Limit: 4 4<br>Position: 4<br>11  22  33  44</p>\n</blockquote>\n<h2 id=\"Channel-通道\"><a href=\"#Channel-通道\" class=\"headerlink\" title=\"Channel 通道\"></a>Channel 通道</h2><ul>\n<li>Java NIO 的核心概念，表示的是对支持 I/O 操作的实体的一个连接</li>\n<li>通过它可以读取和写入数据（并不是直接操作，而是通过 Buffer 来处理）</li>\n<li>双向的</li>\n</ul>\n<p>常用的 Channel 包括：</p>\n<ul>\n<li>FileChannel 从文件中读写数据</li>\n<li>DatagramChannel 从 UDP 中读写数据</li>\n<li>SocketChannel 从 TCP 中读写数据</li>\n<li>ServerSocketChannel 监听新进来的 TCP 连接，每一个新进来的连接都会创建一个 SocketChannel。</li>\n</ul>\n<h3 id=\"FileChannel-连接到文件的通道\"><a href=\"#FileChannel-连接到文件的通道\" class=\"headerlink\" title=\"FileChannel 连接到文件的通道\"></a>FileChannel 连接到文件的通道</h3><p><strong>FileChannel 无法设置为非阻塞模式，只能运行在阻塞模式下</strong><br>常用方法：</p>\n<ul>\n<li><code>int read(ByteBuffer dst)</code> 从 Channel 中读取数据，写入 Buffer</li>\n<li><code>int write(ByteBuffer src)</code> 从 Buffer 中读取数据，写入 Channel</li>\n<li><code>long size()</code> 得到 Channel 中文件的大小</li>\n<li><code>long position()</code> 得到 Channel 中文件的当前操作位置</li>\n<li><code>FileChannel position(long newPosition)</code> 设置 Channel 中文件的当前操作位置</li>\n</ul>\n<p>使用 FileChannel 来复制文件的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过 InputStream 或者 OutputStream 来构造 FileChannel</span></span><br><span class=\"line\">    FileChannel in = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"a.txt\"</span>).getChannel();</span><br><span class=\"line\">    FileChannel out = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"b.txt\"</span>).getChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">    ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用 channel 的 read 方法往 Buffer 中写数据</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(in.read(buffer) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在从 Buffer 中读数据之前，调用 flip()</span></span><br><span class=\"line\">        buffer.flip();</span><br><span class=\"line\">        <span class=\"comment\">// 从 Buffer 中读数据，写入到 channel</span></span><br><span class=\"line\">        out.write(buffer);</span><br><span class=\"line\">        <span class=\"comment\">// 在往 Buffer 中写数据之前，调用 clear()</span></span><br><span class=\"line\">        buffer.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 或者使用如下代码</span></span><br><span class=\"line\">    <span class=\"comment\">// out.transferFrom(in, 0, in.size());</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SocketChannel-连接到-TCP-套接字的通道\"><a href=\"#SocketChannel-连接到-TCP-套接字的通道\" class=\"headerlink\" title=\"SocketChannel 连接到 TCP 套接字的通道\"></a>SocketChannel 连接到 TCP 套接字的通道</h3><p><strong>SocketChannel 可以设置为阻塞模式或非阻塞模式</strong><br>使用 SocketChannel 来建立 TCP 连接，发送并接收数据，默认使用 <strong>阻塞模式</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打开 SocketChannel</span></span><br><span class=\"line\">    SocketChannel channel = SocketChannel.open();</span><br><span class=\"line\">    <span class=\"comment\">// connect 方法会阻塞，直至连接建立成功</span></span><br><span class=\"line\">    channel.connect(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">8080</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">    String msg = <span class=\"string\">\"This is client.\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 在往 Buffer 中写数据之前，调用 clear()</span></span><br><span class=\"line\">    buffer.clear();</span><br><span class=\"line\">    buffer.put(msg.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在从 Buffer 中读数据之前，调用 flip()</span></span><br><span class=\"line\">    buffer.flip();</span><br><span class=\"line\">    channel.write(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 接收数据</span></span><br><span class=\"line\">    <span class=\"comment\">// 在往 Buffer 中写数据之前，调用 clear()</span></span><br><span class=\"line\">    buffer.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用 channel 的 read 方法往 Buffer 中写数据</span></span><br><span class=\"line\">    channel.read(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在从 Buffer 中读数据之前，调用 flip()</span></span><br><span class=\"line\">    buffer.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从 Buffer 中读数据</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (buffer.hasRemaining()) &#123;</span><br><span class=\"line\">        System.out.print(buffer.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 SocketChannel 的 <strong>非阻塞模式</strong> 来建立 TCP 连接，发送并接收数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打开 SocketChannel</span></span><br><span class=\"line\">    SocketChannel channel = SocketChannel.open();</span><br><span class=\"line\"></span><br><span class=\"line\">    channel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    channel.connect(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">8080</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!channel.finishConnect()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">        String msg = <span class=\"string\">\"This is client.\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 在往 Buffer 中写数据之前，调用 clear()</span></span><br><span class=\"line\">        buffer.clear();</span><br><span class=\"line\">        buffer.put(msg.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 在从 Buffer 中读数据之前，调用 flip()</span></span><br><span class=\"line\">        buffer.flip();</span><br><span class=\"line\">        channel.write(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 接收数据</span></span><br><span class=\"line\">        <span class=\"comment\">// 在往 Buffer 中写数据之前，调用 clear()</span></span><br><span class=\"line\">        buffer.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用 channel 的 read 方法往 Buffer 中写数据</span></span><br><span class=\"line\">        channel.read(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 在从 Buffer 中读数据之前，调用 flip()</span></span><br><span class=\"line\">        buffer.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 从 Buffer 中读数据</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (buffer.hasRemaining()) &#123;</span><br><span class=\"line\">            System.out.print(buffer.get());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ServerSocketChannel-监听-TCP-连接的通道\"><a href=\"#ServerSocketChannel-监听-TCP-连接的通道\" class=\"headerlink\" title=\"ServerSocketChannel 监听 TCP 连接的通道\"></a>ServerSocketChannel 监听 TCP 连接的通道</h3><p><strong>ServerSocketChannel 可以设置为阻塞模式或非阻塞模式</strong><br>使用 ServerSocketChannel 来监听 TCP 连接，默认使用 <strong>阻塞模式</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打开 SocketChannel</span></span><br><span class=\"line\">    ServerSocketChannel channel = ServerSocketChannel.open();</span><br><span class=\"line\">    <span class=\"comment\">// 绑定端口</span></span><br><span class=\"line\">    channel.socket().bind(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"number\">8080</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// accept 方法会阻塞，直至监听到 TCP 连接</span></span><br><span class=\"line\">        SocketChannel socketChannel = channel.accept();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"A new connection...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 接收数据</span></span><br><span class=\"line\">        <span class=\"comment\">// 在往 Buffer 中写数据之前，调用 clear()</span></span><br><span class=\"line\">        buffer.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用 channel 的 read 方法往 Buffer 中写数据</span></span><br><span class=\"line\">        socketChannel.read(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 在从 Buffer 中读数据之前，调用 flip()</span></span><br><span class=\"line\">        buffer.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 从 Buffer 中读数据</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (buffer.hasRemaining()) &#123;</span><br><span class=\"line\">            System.out.print(buffer.get());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 在往 Buffer 中写数据之前，调用 clear()</span></span><br><span class=\"line\">        <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">        String msg = <span class=\"string\">\"This is server.\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 在往 Buffer 中写数据之前，调用 clear()</span></span><br><span class=\"line\">        buffer.clear();</span><br><span class=\"line\">        buffer.put(msg.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 在从 Buffer 中读数据之前，调用 flip()</span></span><br><span class=\"line\">        buffer.flip();</span><br><span class=\"line\">        socketChannel.write(buffer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Selector-选择器\"><a href=\"#Selector-选择器\" class=\"headerlink\" title=\"Selector 选择器\"></a>Selector 选择器</h2><p><strong>Selector 允许单个进程可以同时处理多个网络连接的 IO，即监听多个端口的 Channel</strong>。</p>\n<p><strong>关于 IO 模式，参见 Linux IO 模型 中对多路复用 IO Multiplexing IO 的说明。</strong></p>\n<p>引用：</p>\n<hr>\n<h2 id=\"多路复用-IO-Multiplexing-IO\"><a href=\"#多路复用-IO-Multiplexing-IO\" class=\"headerlink\" title=\"多路复用 IO Multiplexing IO\"></a>多路复用 IO Multiplexing IO</h2><ul>\n<li><strong>单个进程可以同时处理多个网络连接的 IO，即监听多个端口的 IO</strong></li>\n<li>适用于连接数很高的情况</li>\n<li>实现方式：select，poll，epoll 系统调用<ul>\n<li>注册多个端口的监听 Socket，比如 8080，8081</li>\n<li>当用户进程调用 select 方法后，整个用户进程被阻塞，OS 内核会监听所有注册的 Socket</li>\n<li>当任何一个端口的 Socket 中的数据准备好了（ 8080 或者 8081），select 方法就会返回</li>\n<li>随后用户进程再调用 read 操作，将数据从 OS 内核缓存区拷贝到应用程序的地址空间。</li>\n</ul>\n</li>\n<li>多路复用 IO 类似于 多线程结合阻塞 IO<ul>\n<li>要实现监听多个端口的 IO，还可以通过多线程的方式，每一个线程负责监听一个端口的 IO</li>\n<li>如果处理的连接数不是很高的话，使用 多路复用 IO 不一定比使用 <strong>多线程结合阻塞 IO</strong> 的服务器性能更好，可能延迟还更大</li>\n<li>多路复用 IO 的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>Selector 使用步骤：</strong></p>\n<ul>\n<li><p><strong>创建 Selector</strong></p>\n</li>\n<li><p><strong>创建 Channel</strong>，可以创建多个 Channel，即监听多个端口，比如 8080，8081</p>\n</li>\n<li><p>将 Channel 注册到 Selector 中</p>\n<ul>\n<li><p>如果一个 Channel 要注册到 Selector 中, 那么这个 Channel 必须是非阻塞的, 即 <code>channel.configureBlocking(false);</code></p>\n</li>\n<li><p>因此 FileChannel 是不能够使用 Selector 的, 因为 FileChannel 都是阻塞的</p>\n</li>\n<li><p>注册时，需要指定了对 Channel 的什么事件感兴趣，包括：</p>\n<ul>\n<li>SelectionKey.OP_CONNECT：TCP 连接 <code>static final int OP_CONNECT = 1 &lt;&lt; 3;</code></li>\n<li>SelectionKey.OP_ACCEPT：确认 <code>static final int OP_ACCEPT = 1 &lt;&lt; 4;</code></li>\n<li>SelectionKey.OP_READ：读 <code>static final int OP_READ = 1 &lt;&lt; 0;</code></li>\n<li>SelectionKey.OP_WRITE：写 <code>static final int OP_WRITE = 1 &lt;&lt; 2;</code></li>\n<li>可以使用或运算 <strong>|</strong> 来组合，例如 <code>SelectionKey.OP_READ | SelectionKey.OP_WRITE</code></li>\n</ul>\n</li>\n<li><p>register 方法返回一个 SelectionKey 对象，包括：</p>\n<ul>\n<li><p><code>int interestOps()</code>：调用 register 注册 channel 时所设置的 interest set.</p>\n</li>\n<li><p>```java<br>int readyOps()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">      ：Channel 所准备好了的操作</span><br><span class=\"line\"></span><br><span class=\"line\">      - &#96;selectionKey.isAcceptable();&#96;</span><br><span class=\"line\">      - &#96;selectionKey.isConnectable();&#96;</span><br><span class=\"line\">      - &#96;selectionKey.isReadable();&#96;</span><br><span class=\"line\">      - &#96;selectionKey.isWritable();&#96;</span><br><span class=\"line\"></span><br><span class=\"line\">    - &#96;public abstract SelectableChannel channel();&#96;： 得到 Channel</span><br><span class=\"line\"></span><br><span class=\"line\">    - &#96;public abstract Selector selector();&#96;：得到 Selector</span><br><span class=\"line\"></span><br><span class=\"line\">    - &#96;public final Object attachment&#96;：得到附加对象</span><br><span class=\"line\"></span><br><span class=\"line\">- 不断重复：</span><br><span class=\"line\"></span><br><span class=\"line\">  - 调用 Selector 对象的 select() 方法，**该方法会阻塞，直至注册的事件发生**</span><br><span class=\"line\">  - **事件发生**，调用 Selector 对象的 selectedKeys() 方法获取 selected keys</span><br><span class=\"line\">  - 遍历每个 selected key:</span><br><span class=\"line\">    - 从 selected key 中获取对应的 Channel 并处理</span><br><span class=\"line\">    - 在 OP_ACCEPT 事件中, 从 key.channel() 返回的是 ServerSocketChannel</span><br><span class=\"line\">    - 在 OP_WRITE 和 OP_READ 事件中, 从 key.channel() 返回的是 SocketChannel</span><br><span class=\"line\"></span><br><span class=\"line\">- **关闭 Selector**</span><br><span class=\"line\"></span><br><span class=\"line\">示例：</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;java</span><br><span class=\"line\">public static void main(String args[]) throws Exception &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Selector</span><br><span class=\"line\">    Selector selector &#x3D; Selector.open();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Server Socket，监听端口 8080</span><br><span class=\"line\">    ServerSocketChannel serverChannel1 &#x3D; ServerSocketChannel.open();</span><br><span class=\"line\">    serverChannel1.socket().bind(new InetSocketAddress(8080));</span><br><span class=\"line\">    &#x2F;&#x2F; 如果一个 Channel 要注册到 Selector 中, 那么这个 Channel 必须是非阻塞的</span><br><span class=\"line\">    serverChannel1.configureBlocking(false);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Server Socket，监听端口 8081</span><br><span class=\"line\">    ServerSocketChannel serverChannel2 &#x3D; ServerSocketChannel.open();</span><br><span class=\"line\">    serverChannel2.socket().bind(new InetSocketAddress(8081));</span><br><span class=\"line\">    &#x2F;&#x2F; 如果一个 Channel 要注册到 Selector 中, 那么这个 Channel 必须是非阻塞的</span><br><span class=\"line\">    serverChannel2.configureBlocking(false);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 将 Channel 注册到 Selector 中</span><br><span class=\"line\">    serverChannel1.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\">    serverChannel2.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 不断重复</span><br><span class=\"line\">    while (true) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 调用 Selector 对象的 select() 方法，该方法会阻塞，直至注册的事件发生</span><br><span class=\"line\">        selector.select();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 事件发生，调用 Selector 对象的 selectedKeys() 方法获取 selected keys</span><br><span class=\"line\">        Iterator&lt;SelectionKey&gt; it &#x3D; selector.selectedKeys().iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 遍历每个 selected key:</span><br><span class=\"line\">        while (it.hasNext()) &#123;</span><br><span class=\"line\">            SelectionKey key &#x3D; it.next();</span><br><span class=\"line\"></span><br><span class=\"line\">            if (key.isAcceptable()) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F; 在 OP_ACCEPT 事件中, 从 key.channel() 返回的是 ServerSocketChannel</span><br><span class=\"line\">                ServerSocketChannel serverChannel &#x3D; (ServerSocketChannel) key.channel();</span><br><span class=\"line\"></span><br><span class=\"line\">                &#x2F;&#x2F; 调用 accept 方法获取 TCP 连接 SocketChanne</span><br><span class=\"line\">                SocketChannel clientChannel &#x3D; serverChannel.accept();</span><br><span class=\"line\">                clientChannel.configureBlocking(false);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#x2F;&#x2F; 注册 SocketChannel</span><br><span class=\"line\">                clientChannel.register(key.selector(), SelectionKey.OP_READ | SelectionKey.OP_WRITE);</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(&quot;Accept event&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (key.isReadable()) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F; 在 OP_WRITE 和 OP_READ 事件中, 从 key.channel() 返回的是 SocketChannel</span><br><span class=\"line\">                SocketChannel clientChannel &#x3D; (SocketChannel) key.channel();</span><br><span class=\"line\">                System.out.println(&quot;Read event&quot;);</span><br><span class=\"line\">                &#x2F;&#x2F; 可以从 clientChannel 中读数据，通过 ByteBuffer</span><br><span class=\"line\">                &#x2F;&#x2F; TO DO</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (key.isWritable()) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F; 在 OP_WRITE 和 OP_READ 事件中, 从 key.channel() 返回的是 SocketChannel</span><br><span class=\"line\">                SocketChannel clientChannel &#x3D; (SocketChannel) key.channel();</span><br><span class=\"line\">                System.out.println(&quot;Write event&quot;);</span><br><span class=\"line\">                &#x2F;&#x2F; 可以向 clientChannel 中写数据，通过 ByteBuffer</span><br><span class=\"line\">                &#x2F;&#x2F; TO DO</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"schedule","date":"2020-04-27T05:47:12.000Z","_content":"\n并发编程领域中**定时器** 相关内容经常被一些介绍并发编程书籍所遗忘，属于并发编程学习优先级较低的知识点。在JDK源码中有两种定时器实现，一种是JDK1.3引入的**\\*Timer**类*，它是一种基于单线程操作的简单任务调度器，虽然存在较多设计缺陷，但仍有很多应用场景和使用案例；另一种JDK1.5引入的**ScheduledThreadPoolExecutor**类，是一种基于线程池操作的较复杂任务调度器，同时也是官方推荐的任务调度器实现。\n\n定时器Timer，也称简单任务调度器。它由以下四个类组成，\n\n- 定时任务（TimerTask类）\n- 任务队列（TaskQueue类）\n- 定时线程（TimerThread类）\n- 定时器（Timer类）\n\n## **定时任务**\n\n```\npublic abstract class TimerTask implements Runnable {\n    final Object lock = new Object();\n\n    //任务状态\n    int state = VIRGIN;\n    static final int VIRGIN = 0;\n    static final int SCHEDULED   = 1;\n    static final int EXECUTED    = 2;\n    static final int CANCELLED   = 3;\n    \n    //下次执行时间\n    long nextExecutionTime;\n    //调度至执行间隔时间\n    long period = 0;\n}\n```\n\n抽象类TimerTask实现Runnable接口，表明该类作为定时任务模版，用户可以根据业务场景定义具体任务。TimerTask类要维护**任务状态** (state)、**任务下次执行时间**（nextExecutionTime）和**任务调度至执行的间隔时间**（period）。\n\n> 任务状态\n\n定时器任务生命周期中可能处于下表所示的4种不同的状态，在给定的时刻定时器任务只能处于其中一种状态。\n\n![timer task](/images/java_time_task.png)\n\n> 执行任务\n\nTimerTask类的抽象方法run来自Runnable接口，TimerTask并未实现该接口，延迟至子类实现。用户可在派生类中自定义任务逻辑。\n\n```\npublic abstract void run();\n```\n\n抽象类TimerTask的run方法并不一定要来源于Runnable接口，它并未接受线程调度，而是由TimerThread线程从TimerQueue中消费任务，然后直接调用TimerTask.run()执行任务。基于这种理解，TimerTask类完全可以像这样定义：\n\n```\npublic abstract class TimerTask {  // 舍去implement Runnable\n\n    //由抽象类自己定义,而非来自Runnable接口\n    public abstract void run();\n}\n```\n\nTimerTask类这种写法可以理解为被**过度设计**了，读者可思之。\n\n> 取消任务\n\n如果当前任务正处于SCHEDULED状态，允许撤销当前任务，置任务为CANCELLED状态，返回true表示任务撤销成功；若任务处于其它状态，也置任务为CANCELLED状态，并返回false表示任务撤销失败。\n\n```\npublic boolean cancel() {\n    synchronized(lock) {\n        boolean result = (state == SCHEDULED);\n        //实际上所有任务都能被取消\n        state = CANCELLED;\n        return result;\n    }\n}\n```\n\n调用TimerTask.cancel()，虽然对不同状态有不同的返回值，但不管什么状态都能够被取消。设计逻辑匪夷所思，我认为这种**设计不合理**，读者可思之。\n\n> 调度执行时间\n\nscheduledExecutionTime方法获取任务被调度后最近的开始执行时间点，保证调度时间在下次执行时间之前。\n\n```\npublic long scheduledExecutionTime() {\n    synchronized(lock) {\n        return (period < 0 ? \n            nextExecutionTime + period : nextExecutionTime - period);\n    }\n}\n```\n\n## **定时线程**\n\n从优先级队列里异步消费任务的操作由单线程完成。TimerThread是单线程，因此需要mainLoop循环逻辑来轮询消费任务队列。\n\n```\nclass TimerThread extends Thread {\n\n    boolean newTasksMayBeScheduled = true;\n\n    //内部维护一个队列\n    private TaskQueue queue;\n\n    TimerThread(TaskQueue queue) {\n        this.queue = queue;\n    }\n}\n```\n\n> 轮询任务\n\n```\n@Override\npublic void run() {\n    try {\n        //循环执行逻辑\n        mainLoop();\n    } finally {\n        synchronized(queue) {\n            newTasksMayBeScheduled = false;\n            //清空任务队列. 在结束循环后可能仍有任务被加入到队列,因此需要清空.\n            queue.clear();\n        }\n    }\n}\n\nprivate void mainLoop() {\n    while (true) {\n        try {\n            TimerTask task;\n            boolean taskFired;\n            synchronized(queue) {  \n                //若队列为空且定时器未被撤销,则挂起定时线程直至被唤醒       \n                while (queue.isEmpty() && newTasksMayBeScheduled) {                     \n                    queue.wait();\n                }\n                //若线程被唤醒后队列仍为空,则结束循环. 说明此时定时器被撤销.\n                if (queue.isEmpty()) {\n                    break;            \n                }    \n  \n                long currentTime, executionTime;\n                //获取最近执行时间任务\n                task = queue.getMin();\n                synchronized(task.lock) {\n                    //任务若被取消,则从队列中移除,并继续轮询\n                    if (task.state == TimerTask.CANCELLED) {\n                        queue.removeMin();\n                        continue;\n                    }\n\n                    currentTime = System.currentTimeMillis();\n                    executionTime = task.nextExecutionTime;\n                    //任务最近要执行\n                    if (taskFired = (executionTime<=currentTime)) {\n                        //若为非重复执行任务,从队列中移除该任务,并设置该任务状态为已执行\n                        if (task.period == 0) {\n                            queue.removeMin();\n                            task.state = TimerTask.EXECUTED;\n                        } else {\n                            //若为重复执行任务,则在指定时刻重新调度该任务\n                            queue.rescheduleMin(\n                                task.period<0 ? currentTime-task.period\n                                    : executionTime + task.period);                      \n                        }\n                    }\n                    //若最近无任务要执行,则等待至要执行任务的指定时刻\n                    if (!taskFired) {\n                        queue.wait(executionTime - currentTime);\n                    }\n                }\n            }\n                \n            //任务已释放,运行任务\n            if (taskFired) { \n                task.run();\n            }\n        } catch(InterruptedException e) {\n        }\n    }\n}\n```\n\n## **任务队列**\n\n任务队列是基于完全二叉树实现的小顶堆。队列初始容量为128，由于0位置不存储任务，因此实际初始容量为127，size表示队列的任务数。\n\n```\nclass TaskQueue {\n\n    //基于顺序表实现的定时任务队列\n    private TimerTask[] queue = new TimerTask[128];\n\n    //队列任务数\n    private int size = 0;\n}\n```\n\n> 查询容量\n\n查询队列任务数和判断队列是否为空都直接使用任务队列内部维护的size属性，因此这两个操作的时间复杂度为O(1)。\n\n```\n/** 队列任务数 */\nint size() { return size; }\n\n/** 队列是否为空 */\nboolean isEmpty() { return size==0; }\n```\n\n> 添加任务\n\n主线程向任务队列中注入新任务。如果当前任务队列容量已达极限，则在原容量基础上扩容一倍，并在任务队列末尾追加新任务，并根据任务执行时间作为优先级调整新任务在任务队列中的位置。\n\n```\n/** 新增任务并调整小顶堆 */\nvoid add(TimerTask task) {\n    //任务数达到队列最大容量,则扩容一倍\n    if (size + 1 == queue.length) {\n        queue = Arrays.copyOf(queue, 2*queue.length);\n    }\n    //添加任务\n    queue[++size] = task;\n    //向上调整任务\n    fixUp(size);\n}\n```\n\n![img](https://pic3.zhimg.com/80/v2-3e64d663f2d599d0c7b40a7464dd0072_720w.jpg)\n\n> 获取任务\n\n从任务队列中获取最近将要执行任务的时间复杂度为O(1)；获得指定位置任务的时间复杂度也是O(1)。\n\n```\n/** 获得下次执行时间最小的任务,即最小堆根结点 */\nTimerTask getMin() { return queue[1]; }\n\n/** 获得指定位置的任务 */\nTimerTask get(int i) { return queue[i]; }\n```\n\n![img](images/getmint_20200427144736.png)\n\n> 移除任务\n\n```\n/** 移除下次执行时间最小的任务,即移除堆顶任务 */\nvoid removeMin() {\n    queue[1] = queue[size];\n    queue[size--] = null;\n    fixDown(1);\n}\n```\n\n![img](https://pic4.zhimg.com/80/v2-d0a23892cf5a8aaef780bf8f0e6f0e33_720w.jpg)\n\n```\n/** 快速移除指定位置处任务 */\nvoid quickRemove(int i) {\n    assert i <= size;  //assert生效需要编译器开启断言功能\n    \n    //指定位置元素直接用最后元素代替,不需要向下调整\n    queue[i] = queue[size];\n    queue[size--] = null;\n}\n```\n\n![img](https://pic1.zhimg.com/80/v2-d72f08b8ae0fbaaa9a3da508f9e64b54_720w.jpg)\n\n```\n/** 清空任务队列 */\nvoid clear() {\n    for (int i=1; i<=size; i++)\n        queue[i] = null;\n    size = 0;\n}\n```\n\n> 重新调度任务\n\n重新调度任务不删除堆顶任务，而是将堆顶任务的nextExecutionTime加上period后得到新的nextExecutionTime值，然后根据任务优先级向下调整。\n\n```\nvoid rescheduleMin(long newTime) {\n    queue[1].nextExecutionTime = newTime;\n    fixDown(1);\n}\n```\n\n![img](https://pic3.zhimg.com/80/v2-26395bd09d3fc3d4fd4990a3707aa34a_720w.jpg)\n\n> 基础算法\n\n任务队列是优先级队列，基于顺序结构完全二叉树实现的小顶堆。优先级的依据是任务下次执行时间。\n\n![img](https://pic2.zhimg.com/80/v2-7dbfc6a56603dfc301213dd0ba8cfa0d_720w.jpg)\n\n```\n/** 提升优先级 */\nprivate void fixUp(int k) {\n    while (k > 1) {\n        //父结点位置\n        int j = k >> 1;\n        //如果父结点的下次任务执行时间小于当前结点下次任务执行时间,结束调整操作\n        if (queue[j].nextExecutionTime <= queue[k].nextExecutionTime) {\n            break;\n        }\n\n        //调整任务在任务队列中的位置\n        TimerTask tmp = queue[j];  \n        queue[j] = queue[k]; \n        queue[k] = tmp;\n        k = j;\n    }\n}\n```\n\n```\n/** 降低优先级 */\nprivate void fixDown(int k) {\n    int j;\n    while ((j = k << 1) <= size && j > 0) {\n        //选择左右两侧子结点,选择更小的交换位置\n        if (j < size && \n            queue[j].nextExecutionTime > queue[j+1].nextExecutionTime) {\n            j++; \n        }\n        if (queue[k].nextExecutionTime <= queue[j].nextExecutionTime) {\n            break;\n        }\n\n        //调整任务在任务队列中的位置\n        TimerTask tmp = queue[j];  \n        queue[j] = queue[k]; \n        queue[k] = tmp;\n        k = j;\n    }\n}\n```\n\n调整当前完全二叉树为最小堆。\n\n```\n/** 堆化 */\nvoid heapify() {\n    for (int i = size/2; i >= 1; i--) {\n        fixDown(i);\n    }\n}\n```\n\n## **定时器**\n\n一个定时器内部维护一个任务队列和一个定时线程。在Main线程往任务队列注入任务后，由定时线程异步轮询处理任务队列，这种处理方式实质上是异步串行方式，任务处理并发度为1。\n\n```\npublic class Timer {\n\n    /** 任务队列 */\n    private final TaskQueue queue = new TaskQueue();\n\n    /** 定时线程 */\n    private final TimerThread thread = new TimerThread(queue);\n}\n```\n\n> 构造器\n\n新建Timer实例，同时也新建了任务队列和定时线程，并启动定时线程。启动定时线程前可指定定时线程的名称，以及指定为后台线程。\n\n```\npublic Timer() {\n    this(\"Timer-\" + serialNumber());\n}\npublic Timer(boolean isDaemon) {\n    this(\"Timer-\" + serialNumber(), isDaemon);\n}\npublic Timer(String name) {\n    thread.setName(name);\n    thread.start();\n}\npublic Timer(String name, boolean isDaemon) {\n    thread.setName(name); \n    thread.setDaemon(isDaemon);\n    thread.start();\n}\n\n//单机序列号生成\nprivate final static AtomicInteger nextSerialNumber = new AtomicInteger(0);\nprivate static int serialNumber() {\n    return nextSerialNumber.getAndIncrement();\n}\n```\n\n> 定间隔调度\n\n```\n/** 延迟调度 */\npublic void schedule(TimerTask task, long delay) {\n    if (delay < 0)\n        throw new IllegalArgumentException(\"Negative delay.\");\n\n    //从当前时间开始延时delay毫秒后调度\n    sched(task, System.currentTimeMillis()+delay, 0);\n}\n\n/** 定时调度 */\npublic void schedule(TimerTask task, Date time) {\n\n    //从指定时刻出开始调度\n    sched(task, time.getTime(), 0);\n}\n\n/** 延时周期性调度 */\npublic void schedule(TimerTask task, long delay, long period) {\n    if (delay < 0)\n        throw new IllegalArgumentException(\"Negative delay.\");\n    if (period <= 0)\n        throw new IllegalArgumentException(\"Non-positive period.\");\n    sched(task, System.currentTimeMillis()+delay, -period);\n}\n\n/** 定时周期性调度 */\npublic void schedule(TimerTask task, Date firstTime, long period) {\n    if (period <= 0)\n        throw new IllegalArgumentException(\"Non-positive period.\");\n    sched(task, firstTime.getTime(), -period);\n}\n```\n\nTimer.schedule()侧重period时间的一致性，保证执行任务的间隔时间相同。\n\n![img](https://pic3.zhimg.com/80/v2-367f6ca013b337ab1d2f2547ed871766_720w.png)\n\n> 定频率调度\n\n```\n/** 延时周期性定速调度 */\npublic void scheduleAtFixedRate(TimerTask task, long delay, long period) {\n    if (delay < 0)\n        throw new IllegalArgumentException(\"Negative delay.\");\n    if (period <= 0)\n        throw new IllegalArgumentException(\"Non-positive period.\");\n    sched(task, System.currentTimeMillis()+delay, period);\n}\n\n/** 定时周期性定速调度 */\npublic void scheduleAtFixedRate(TimerTask task, Date firstTime, long period) {\n    if (period <= 0)\n        throw new IllegalArgumentException(\"Non-positive period.\");\n    sched(task, firstTime.getTime(), period);\n}\n```\n\nTimer.scheduleAtFixedRate()侧重执行频率的一致性，任务执行时间加period时间的和相等。\n\n![img](https://pic4.zhimg.com/80/v2-493048111335ad7f57c1f51a29b37753_720w.png)\n\n> 核心调度算法\n\n```\nprivate void sched(TimerTask task, long time, long period) {\n    if (time < 0)\n        throw new IllegalArgumentException(\"Illegal execution time.\");      \n    if (Math.abs(period) > (Long.MAX_VALUE >> 1))\n        period >>= 1;\n\n    synchronized(queue) {\n\n        //保证定时器未被取消\n        if (!thread.newTasksMayBeScheduled) {\n            throw new IllegalStateException(\"Timer already cancelled.\");\n        }\n\n        synchronized(task.lock) {\n            //保证任务最初处于未使用状态\n            if (task.state != TimerTask.VIRGIN) {\n                throw new IllegalStateException(\n                    \"Task already scheduled or cancelled\");\n            }\n\n            //下次任务执行时间\n            task.nextExecutionTime = time;\n            //任务执行周期\n            task.period = period;\n            //设置任务状态为已调度\n            task.state = TimerTask.SCHEDULED;\n        }\n\n        //往任务队列中添加任务\n        queue.add(task);\n\n        //如果队列中该任务为最近要执行的任务,则立即唤醒定时线程处理\n        if (queue.getMin() == task) {\n            queue.notify();\n        }\n    }\n}\n```\n\n> 撤销定时器\n\n```\npublic void cancel() {\n    synchronized(queue) {\n        //撤销定时器\n        thread.newTasksMayBeScheduled = false;\n        //清空任务队列\n        queue.clear();\n        //唤醒定时线程\n        queue.notify();\n    }\n}\n```\n\n> 清理取消状态的任务\n\n```\npublic int purge() {\n    //从队列中移除的任务数\n    int result = 0;\n    synchronized(queue) {\n        for (int i = queue.size(); i > 0; i--) {\n            //从队列中移除取消状态任务\n            if (queue.get(i).state == TimerTask.CANCELLED) {\n                queue.quickRemove(i);\n                result++;\n            }\n        }\n        //如果仍有非取消任务,队列重新堆化\n        if (result != 0)\n            queue.heapify();\n    }\n    return result;\n}\n```\n\n## **总结**\n\n读完源码后总结如下，\n\n> 数据结构\n\n小顶堆实现优先级队列，优先级标准是任务下次执行时间。\n\n> 任务状态转换\n\n![img](https://pic3.zhimg.com/80/v2-ad4c978cc45c7a22464335345f525932_720w.jpg)\n\n> 定时器架构图\n\n![img](https://pic3.zhimg.com/80/v2-08da55ef92a07ae0f90a07f18521bb8e_720w.jpg)\n\n> 架构缺陷\n\n单线程串行消费任务，前置任务消费延迟或失败会直接影响后续任务的消费。如果消费前置任务时抛出异常，线程退出，队列中的任务无法被继续消费，定时器失效。","source":"_posts/java/schedule.md","raw":"---\ntitle: schedule\ntags:\n  - java\n  - schedule\ncategories:\n  - java\n  - schedule\ndate: 2020-04-27 13:47:12\n---\n\n并发编程领域中**定时器** 相关内容经常被一些介绍并发编程书籍所遗忘，属于并发编程学习优先级较低的知识点。在JDK源码中有两种定时器实现，一种是JDK1.3引入的**\\*Timer**类*，它是一种基于单线程操作的简单任务调度器，虽然存在较多设计缺陷，但仍有很多应用场景和使用案例；另一种JDK1.5引入的**ScheduledThreadPoolExecutor**类，是一种基于线程池操作的较复杂任务调度器，同时也是官方推荐的任务调度器实现。\n\n定时器Timer，也称简单任务调度器。它由以下四个类组成，\n\n- 定时任务（TimerTask类）\n- 任务队列（TaskQueue类）\n- 定时线程（TimerThread类）\n- 定时器（Timer类）\n\n## **定时任务**\n\n```\npublic abstract class TimerTask implements Runnable {\n    final Object lock = new Object();\n\n    //任务状态\n    int state = VIRGIN;\n    static final int VIRGIN = 0;\n    static final int SCHEDULED   = 1;\n    static final int EXECUTED    = 2;\n    static final int CANCELLED   = 3;\n    \n    //下次执行时间\n    long nextExecutionTime;\n    //调度至执行间隔时间\n    long period = 0;\n}\n```\n\n抽象类TimerTask实现Runnable接口，表明该类作为定时任务模版，用户可以根据业务场景定义具体任务。TimerTask类要维护**任务状态** (state)、**任务下次执行时间**（nextExecutionTime）和**任务调度至执行的间隔时间**（period）。\n\n> 任务状态\n\n定时器任务生命周期中可能处于下表所示的4种不同的状态，在给定的时刻定时器任务只能处于其中一种状态。\n\n![timer task](/images/java_time_task.png)\n\n> 执行任务\n\nTimerTask类的抽象方法run来自Runnable接口，TimerTask并未实现该接口，延迟至子类实现。用户可在派生类中自定义任务逻辑。\n\n```\npublic abstract void run();\n```\n\n抽象类TimerTask的run方法并不一定要来源于Runnable接口，它并未接受线程调度，而是由TimerThread线程从TimerQueue中消费任务，然后直接调用TimerTask.run()执行任务。基于这种理解，TimerTask类完全可以像这样定义：\n\n```\npublic abstract class TimerTask {  // 舍去implement Runnable\n\n    //由抽象类自己定义,而非来自Runnable接口\n    public abstract void run();\n}\n```\n\nTimerTask类这种写法可以理解为被**过度设计**了，读者可思之。\n\n> 取消任务\n\n如果当前任务正处于SCHEDULED状态，允许撤销当前任务，置任务为CANCELLED状态，返回true表示任务撤销成功；若任务处于其它状态，也置任务为CANCELLED状态，并返回false表示任务撤销失败。\n\n```\npublic boolean cancel() {\n    synchronized(lock) {\n        boolean result = (state == SCHEDULED);\n        //实际上所有任务都能被取消\n        state = CANCELLED;\n        return result;\n    }\n}\n```\n\n调用TimerTask.cancel()，虽然对不同状态有不同的返回值，但不管什么状态都能够被取消。设计逻辑匪夷所思，我认为这种**设计不合理**，读者可思之。\n\n> 调度执行时间\n\nscheduledExecutionTime方法获取任务被调度后最近的开始执行时间点，保证调度时间在下次执行时间之前。\n\n```\npublic long scheduledExecutionTime() {\n    synchronized(lock) {\n        return (period < 0 ? \n            nextExecutionTime + period : nextExecutionTime - period);\n    }\n}\n```\n\n## **定时线程**\n\n从优先级队列里异步消费任务的操作由单线程完成。TimerThread是单线程，因此需要mainLoop循环逻辑来轮询消费任务队列。\n\n```\nclass TimerThread extends Thread {\n\n    boolean newTasksMayBeScheduled = true;\n\n    //内部维护一个队列\n    private TaskQueue queue;\n\n    TimerThread(TaskQueue queue) {\n        this.queue = queue;\n    }\n}\n```\n\n> 轮询任务\n\n```\n@Override\npublic void run() {\n    try {\n        //循环执行逻辑\n        mainLoop();\n    } finally {\n        synchronized(queue) {\n            newTasksMayBeScheduled = false;\n            //清空任务队列. 在结束循环后可能仍有任务被加入到队列,因此需要清空.\n            queue.clear();\n        }\n    }\n}\n\nprivate void mainLoop() {\n    while (true) {\n        try {\n            TimerTask task;\n            boolean taskFired;\n            synchronized(queue) {  \n                //若队列为空且定时器未被撤销,则挂起定时线程直至被唤醒       \n                while (queue.isEmpty() && newTasksMayBeScheduled) {                     \n                    queue.wait();\n                }\n                //若线程被唤醒后队列仍为空,则结束循环. 说明此时定时器被撤销.\n                if (queue.isEmpty()) {\n                    break;            \n                }    \n  \n                long currentTime, executionTime;\n                //获取最近执行时间任务\n                task = queue.getMin();\n                synchronized(task.lock) {\n                    //任务若被取消,则从队列中移除,并继续轮询\n                    if (task.state == TimerTask.CANCELLED) {\n                        queue.removeMin();\n                        continue;\n                    }\n\n                    currentTime = System.currentTimeMillis();\n                    executionTime = task.nextExecutionTime;\n                    //任务最近要执行\n                    if (taskFired = (executionTime<=currentTime)) {\n                        //若为非重复执行任务,从队列中移除该任务,并设置该任务状态为已执行\n                        if (task.period == 0) {\n                            queue.removeMin();\n                            task.state = TimerTask.EXECUTED;\n                        } else {\n                            //若为重复执行任务,则在指定时刻重新调度该任务\n                            queue.rescheduleMin(\n                                task.period<0 ? currentTime-task.period\n                                    : executionTime + task.period);                      \n                        }\n                    }\n                    //若最近无任务要执行,则等待至要执行任务的指定时刻\n                    if (!taskFired) {\n                        queue.wait(executionTime - currentTime);\n                    }\n                }\n            }\n                \n            //任务已释放,运行任务\n            if (taskFired) { \n                task.run();\n            }\n        } catch(InterruptedException e) {\n        }\n    }\n}\n```\n\n## **任务队列**\n\n任务队列是基于完全二叉树实现的小顶堆。队列初始容量为128，由于0位置不存储任务，因此实际初始容量为127，size表示队列的任务数。\n\n```\nclass TaskQueue {\n\n    //基于顺序表实现的定时任务队列\n    private TimerTask[] queue = new TimerTask[128];\n\n    //队列任务数\n    private int size = 0;\n}\n```\n\n> 查询容量\n\n查询队列任务数和判断队列是否为空都直接使用任务队列内部维护的size属性，因此这两个操作的时间复杂度为O(1)。\n\n```\n/** 队列任务数 */\nint size() { return size; }\n\n/** 队列是否为空 */\nboolean isEmpty() { return size==0; }\n```\n\n> 添加任务\n\n主线程向任务队列中注入新任务。如果当前任务队列容量已达极限，则在原容量基础上扩容一倍，并在任务队列末尾追加新任务，并根据任务执行时间作为优先级调整新任务在任务队列中的位置。\n\n```\n/** 新增任务并调整小顶堆 */\nvoid add(TimerTask task) {\n    //任务数达到队列最大容量,则扩容一倍\n    if (size + 1 == queue.length) {\n        queue = Arrays.copyOf(queue, 2*queue.length);\n    }\n    //添加任务\n    queue[++size] = task;\n    //向上调整任务\n    fixUp(size);\n}\n```\n\n![img](https://pic3.zhimg.com/80/v2-3e64d663f2d599d0c7b40a7464dd0072_720w.jpg)\n\n> 获取任务\n\n从任务队列中获取最近将要执行任务的时间复杂度为O(1)；获得指定位置任务的时间复杂度也是O(1)。\n\n```\n/** 获得下次执行时间最小的任务,即最小堆根结点 */\nTimerTask getMin() { return queue[1]; }\n\n/** 获得指定位置的任务 */\nTimerTask get(int i) { return queue[i]; }\n```\n\n![img](images/getmint_20200427144736.png)\n\n> 移除任务\n\n```\n/** 移除下次执行时间最小的任务,即移除堆顶任务 */\nvoid removeMin() {\n    queue[1] = queue[size];\n    queue[size--] = null;\n    fixDown(1);\n}\n```\n\n![img](https://pic4.zhimg.com/80/v2-d0a23892cf5a8aaef780bf8f0e6f0e33_720w.jpg)\n\n```\n/** 快速移除指定位置处任务 */\nvoid quickRemove(int i) {\n    assert i <= size;  //assert生效需要编译器开启断言功能\n    \n    //指定位置元素直接用最后元素代替,不需要向下调整\n    queue[i] = queue[size];\n    queue[size--] = null;\n}\n```\n\n![img](https://pic1.zhimg.com/80/v2-d72f08b8ae0fbaaa9a3da508f9e64b54_720w.jpg)\n\n```\n/** 清空任务队列 */\nvoid clear() {\n    for (int i=1; i<=size; i++)\n        queue[i] = null;\n    size = 0;\n}\n```\n\n> 重新调度任务\n\n重新调度任务不删除堆顶任务，而是将堆顶任务的nextExecutionTime加上period后得到新的nextExecutionTime值，然后根据任务优先级向下调整。\n\n```\nvoid rescheduleMin(long newTime) {\n    queue[1].nextExecutionTime = newTime;\n    fixDown(1);\n}\n```\n\n![img](https://pic3.zhimg.com/80/v2-26395bd09d3fc3d4fd4990a3707aa34a_720w.jpg)\n\n> 基础算法\n\n任务队列是优先级队列，基于顺序结构完全二叉树实现的小顶堆。优先级的依据是任务下次执行时间。\n\n![img](https://pic2.zhimg.com/80/v2-7dbfc6a56603dfc301213dd0ba8cfa0d_720w.jpg)\n\n```\n/** 提升优先级 */\nprivate void fixUp(int k) {\n    while (k > 1) {\n        //父结点位置\n        int j = k >> 1;\n        //如果父结点的下次任务执行时间小于当前结点下次任务执行时间,结束调整操作\n        if (queue[j].nextExecutionTime <= queue[k].nextExecutionTime) {\n            break;\n        }\n\n        //调整任务在任务队列中的位置\n        TimerTask tmp = queue[j];  \n        queue[j] = queue[k]; \n        queue[k] = tmp;\n        k = j;\n    }\n}\n```\n\n```\n/** 降低优先级 */\nprivate void fixDown(int k) {\n    int j;\n    while ((j = k << 1) <= size && j > 0) {\n        //选择左右两侧子结点,选择更小的交换位置\n        if (j < size && \n            queue[j].nextExecutionTime > queue[j+1].nextExecutionTime) {\n            j++; \n        }\n        if (queue[k].nextExecutionTime <= queue[j].nextExecutionTime) {\n            break;\n        }\n\n        //调整任务在任务队列中的位置\n        TimerTask tmp = queue[j];  \n        queue[j] = queue[k]; \n        queue[k] = tmp;\n        k = j;\n    }\n}\n```\n\n调整当前完全二叉树为最小堆。\n\n```\n/** 堆化 */\nvoid heapify() {\n    for (int i = size/2; i >= 1; i--) {\n        fixDown(i);\n    }\n}\n```\n\n## **定时器**\n\n一个定时器内部维护一个任务队列和一个定时线程。在Main线程往任务队列注入任务后，由定时线程异步轮询处理任务队列，这种处理方式实质上是异步串行方式，任务处理并发度为1。\n\n```\npublic class Timer {\n\n    /** 任务队列 */\n    private final TaskQueue queue = new TaskQueue();\n\n    /** 定时线程 */\n    private final TimerThread thread = new TimerThread(queue);\n}\n```\n\n> 构造器\n\n新建Timer实例，同时也新建了任务队列和定时线程，并启动定时线程。启动定时线程前可指定定时线程的名称，以及指定为后台线程。\n\n```\npublic Timer() {\n    this(\"Timer-\" + serialNumber());\n}\npublic Timer(boolean isDaemon) {\n    this(\"Timer-\" + serialNumber(), isDaemon);\n}\npublic Timer(String name) {\n    thread.setName(name);\n    thread.start();\n}\npublic Timer(String name, boolean isDaemon) {\n    thread.setName(name); \n    thread.setDaemon(isDaemon);\n    thread.start();\n}\n\n//单机序列号生成\nprivate final static AtomicInteger nextSerialNumber = new AtomicInteger(0);\nprivate static int serialNumber() {\n    return nextSerialNumber.getAndIncrement();\n}\n```\n\n> 定间隔调度\n\n```\n/** 延迟调度 */\npublic void schedule(TimerTask task, long delay) {\n    if (delay < 0)\n        throw new IllegalArgumentException(\"Negative delay.\");\n\n    //从当前时间开始延时delay毫秒后调度\n    sched(task, System.currentTimeMillis()+delay, 0);\n}\n\n/** 定时调度 */\npublic void schedule(TimerTask task, Date time) {\n\n    //从指定时刻出开始调度\n    sched(task, time.getTime(), 0);\n}\n\n/** 延时周期性调度 */\npublic void schedule(TimerTask task, long delay, long period) {\n    if (delay < 0)\n        throw new IllegalArgumentException(\"Negative delay.\");\n    if (period <= 0)\n        throw new IllegalArgumentException(\"Non-positive period.\");\n    sched(task, System.currentTimeMillis()+delay, -period);\n}\n\n/** 定时周期性调度 */\npublic void schedule(TimerTask task, Date firstTime, long period) {\n    if (period <= 0)\n        throw new IllegalArgumentException(\"Non-positive period.\");\n    sched(task, firstTime.getTime(), -period);\n}\n```\n\nTimer.schedule()侧重period时间的一致性，保证执行任务的间隔时间相同。\n\n![img](https://pic3.zhimg.com/80/v2-367f6ca013b337ab1d2f2547ed871766_720w.png)\n\n> 定频率调度\n\n```\n/** 延时周期性定速调度 */\npublic void scheduleAtFixedRate(TimerTask task, long delay, long period) {\n    if (delay < 0)\n        throw new IllegalArgumentException(\"Negative delay.\");\n    if (period <= 0)\n        throw new IllegalArgumentException(\"Non-positive period.\");\n    sched(task, System.currentTimeMillis()+delay, period);\n}\n\n/** 定时周期性定速调度 */\npublic void scheduleAtFixedRate(TimerTask task, Date firstTime, long period) {\n    if (period <= 0)\n        throw new IllegalArgumentException(\"Non-positive period.\");\n    sched(task, firstTime.getTime(), period);\n}\n```\n\nTimer.scheduleAtFixedRate()侧重执行频率的一致性，任务执行时间加period时间的和相等。\n\n![img](https://pic4.zhimg.com/80/v2-493048111335ad7f57c1f51a29b37753_720w.png)\n\n> 核心调度算法\n\n```\nprivate void sched(TimerTask task, long time, long period) {\n    if (time < 0)\n        throw new IllegalArgumentException(\"Illegal execution time.\");      \n    if (Math.abs(period) > (Long.MAX_VALUE >> 1))\n        period >>= 1;\n\n    synchronized(queue) {\n\n        //保证定时器未被取消\n        if (!thread.newTasksMayBeScheduled) {\n            throw new IllegalStateException(\"Timer already cancelled.\");\n        }\n\n        synchronized(task.lock) {\n            //保证任务最初处于未使用状态\n            if (task.state != TimerTask.VIRGIN) {\n                throw new IllegalStateException(\n                    \"Task already scheduled or cancelled\");\n            }\n\n            //下次任务执行时间\n            task.nextExecutionTime = time;\n            //任务执行周期\n            task.period = period;\n            //设置任务状态为已调度\n            task.state = TimerTask.SCHEDULED;\n        }\n\n        //往任务队列中添加任务\n        queue.add(task);\n\n        //如果队列中该任务为最近要执行的任务,则立即唤醒定时线程处理\n        if (queue.getMin() == task) {\n            queue.notify();\n        }\n    }\n}\n```\n\n> 撤销定时器\n\n```\npublic void cancel() {\n    synchronized(queue) {\n        //撤销定时器\n        thread.newTasksMayBeScheduled = false;\n        //清空任务队列\n        queue.clear();\n        //唤醒定时线程\n        queue.notify();\n    }\n}\n```\n\n> 清理取消状态的任务\n\n```\npublic int purge() {\n    //从队列中移除的任务数\n    int result = 0;\n    synchronized(queue) {\n        for (int i = queue.size(); i > 0; i--) {\n            //从队列中移除取消状态任务\n            if (queue.get(i).state == TimerTask.CANCELLED) {\n                queue.quickRemove(i);\n                result++;\n            }\n        }\n        //如果仍有非取消任务,队列重新堆化\n        if (result != 0)\n            queue.heapify();\n    }\n    return result;\n}\n```\n\n## **总结**\n\n读完源码后总结如下，\n\n> 数据结构\n\n小顶堆实现优先级队列，优先级标准是任务下次执行时间。\n\n> 任务状态转换\n\n![img](https://pic3.zhimg.com/80/v2-ad4c978cc45c7a22464335345f525932_720w.jpg)\n\n> 定时器架构图\n\n![img](https://pic3.zhimg.com/80/v2-08da55ef92a07ae0f90a07f18521bb8e_720w.jpg)\n\n> 架构缺陷\n\n单线程串行消费任务，前置任务消费延迟或失败会直接影响后续任务的消费。如果消费前置任务时抛出异常，线程退出，队列中的任务无法被继续消费，定时器失效。","slug":"java/schedule","published":1,"updated":"2020-04-27T06:48:21.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmxf004qa4ja9d9o87w9","content":"<p>并发编程领域中<strong>定时器</strong> 相关内容经常被一些介绍并发编程书籍所遗忘，属于并发编程学习优先级较低的知识点。在JDK源码中有两种定时器实现，一种是JDK1.3引入的<strong>*Timer</strong>类<em>，它是一种基于单线程操作的简单任务调度器，虽然存在较多设计缺陷，但仍有很多应用场景和使用案例；另一种JDK1.5引入的*</em>ScheduledThreadPoolExecutor**类，是一种基于线程池操作的较复杂任务调度器，同时也是官方推荐的任务调度器实现。</p>\n<p>定时器Timer，也称简单任务调度器。它由以下四个类组成，</p>\n<ul>\n<li>定时任务（TimerTask类）</li>\n<li>任务队列（TaskQueue类）</li>\n<li>定时线程（TimerThread类）</li>\n<li>定时器（Timer类）</li>\n</ul>\n<h2 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a><strong>定时任务</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class TimerTask implements Runnable &#123;</span><br><span class=\"line\">    final Object lock &#x3D; new Object();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;任务状态</span><br><span class=\"line\">    int state &#x3D; VIRGIN;</span><br><span class=\"line\">    static final int VIRGIN &#x3D; 0;</span><br><span class=\"line\">    static final int SCHEDULED   &#x3D; 1;</span><br><span class=\"line\">    static final int EXECUTED    &#x3D; 2;</span><br><span class=\"line\">    static final int CANCELLED   &#x3D; 3;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;下次执行时间</span><br><span class=\"line\">    long nextExecutionTime;</span><br><span class=\"line\">    &#x2F;&#x2F;调度至执行间隔时间</span><br><span class=\"line\">    long period &#x3D; 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>抽象类TimerTask实现Runnable接口，表明该类作为定时任务模版，用户可以根据业务场景定义具体任务。TimerTask类要维护<strong>任务状态</strong> (state)、<strong>任务下次执行时间</strong>（nextExecutionTime）和<strong>任务调度至执行的间隔时间</strong>（period）。</p>\n<blockquote>\n<p>任务状态</p>\n</blockquote>\n<p>定时器任务生命周期中可能处于下表所示的4种不同的状态，在给定的时刻定时器任务只能处于其中一种状态。</p>\n<p><img src=\"/images/java_time_task.png\" alt=\"timer task\"></p>\n<blockquote>\n<p>执行任务</p>\n</blockquote>\n<p>TimerTask类的抽象方法run来自Runnable接口，TimerTask并未实现该接口，延迟至子类实现。用户可在派生类中自定义任务逻辑。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract void run();</span><br></pre></td></tr></table></figure>\n\n<p>抽象类TimerTask的run方法并不一定要来源于Runnable接口，它并未接受线程调度，而是由TimerThread线程从TimerQueue中消费任务，然后直接调用TimerTask.run()执行任务。基于这种理解，TimerTask类完全可以像这样定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class TimerTask &#123;  &#x2F;&#x2F; 舍去implement Runnable</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;由抽象类自己定义,而非来自Runnable接口</span><br><span class=\"line\">    public abstract void run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>TimerTask类这种写法可以理解为被<strong>过度设计</strong>了，读者可思之。</p>\n<blockquote>\n<p>取消任务</p>\n</blockquote>\n<p>如果当前任务正处于SCHEDULED状态，允许撤销当前任务，置任务为CANCELLED状态，返回true表示任务撤销成功；若任务处于其它状态，也置任务为CANCELLED状态，并返回false表示任务撤销失败。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean cancel() &#123;</span><br><span class=\"line\">    synchronized(lock) &#123;</span><br><span class=\"line\">        boolean result &#x3D; (state &#x3D;&#x3D; SCHEDULED);</span><br><span class=\"line\">        &#x2F;&#x2F;实际上所有任务都能被取消</span><br><span class=\"line\">        state &#x3D; CANCELLED;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用TimerTask.cancel()，虽然对不同状态有不同的返回值，但不管什么状态都能够被取消。设计逻辑匪夷所思，我认为这种<strong>设计不合理</strong>，读者可思之。</p>\n<blockquote>\n<p>调度执行时间</p>\n</blockquote>\n<p>scheduledExecutionTime方法获取任务被调度后最近的开始执行时间点，保证调度时间在下次执行时间之前。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public long scheduledExecutionTime() &#123;</span><br><span class=\"line\">    synchronized(lock) &#123;</span><br><span class=\"line\">        return (period &lt; 0 ? </span><br><span class=\"line\">            nextExecutionTime + period : nextExecutionTime - period);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定时线程\"><a href=\"#定时线程\" class=\"headerlink\" title=\"定时线程\"></a><strong>定时线程</strong></h2><p>从优先级队列里异步消费任务的操作由单线程完成。TimerThread是单线程，因此需要mainLoop循环逻辑来轮询消费任务队列。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TimerThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    boolean newTasksMayBeScheduled &#x3D; true;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;内部维护一个队列</span><br><span class=\"line\">    private TaskQueue queue;</span><br><span class=\"line\"></span><br><span class=\"line\">    TimerThread(TaskQueue queue) &#123;</span><br><span class=\"line\">        this.queue &#x3D; queue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>轮询任务</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public void run() &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;循环执行逻辑</span><br><span class=\"line\">        mainLoop();</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        synchronized(queue) &#123;</span><br><span class=\"line\">            newTasksMayBeScheduled &#x3D; false;</span><br><span class=\"line\">            &#x2F;&#x2F;清空任务队列. 在结束循环后可能仍有任务被加入到队列,因此需要清空.</span><br><span class=\"line\">            queue.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private void mainLoop() &#123;</span><br><span class=\"line\">    while (true) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            TimerTask task;</span><br><span class=\"line\">            boolean taskFired;</span><br><span class=\"line\">            synchronized(queue) &#123;  </span><br><span class=\"line\">                &#x2F;&#x2F;若队列为空且定时器未被撤销,则挂起定时线程直至被唤醒       </span><br><span class=\"line\">                while (queue.isEmpty() &amp;&amp; newTasksMayBeScheduled) &#123;                     </span><br><span class=\"line\">                    queue.wait();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                &#x2F;&#x2F;若线程被唤醒后队列仍为空,则结束循环. 说明此时定时器被撤销.</span><br><span class=\"line\">                if (queue.isEmpty()) &#123;</span><br><span class=\"line\">                    break;            </span><br><span class=\"line\">                &#125;    </span><br><span class=\"line\">  </span><br><span class=\"line\">                long currentTime, executionTime;</span><br><span class=\"line\">                &#x2F;&#x2F;获取最近执行时间任务</span><br><span class=\"line\">                task &#x3D; queue.getMin();</span><br><span class=\"line\">                synchronized(task.lock) &#123;</span><br><span class=\"line\">                    &#x2F;&#x2F;任务若被取消,则从队列中移除,并继续轮询</span><br><span class=\"line\">                    if (task.state &#x3D;&#x3D; TimerTask.CANCELLED) &#123;</span><br><span class=\"line\">                        queue.removeMin();</span><br><span class=\"line\">                        continue;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    currentTime &#x3D; System.currentTimeMillis();</span><br><span class=\"line\">                    executionTime &#x3D; task.nextExecutionTime;</span><br><span class=\"line\">                    &#x2F;&#x2F;任务最近要执行</span><br><span class=\"line\">                    if (taskFired &#x3D; (executionTime&lt;&#x3D;currentTime)) &#123;</span><br><span class=\"line\">                        &#x2F;&#x2F;若为非重复执行任务,从队列中移除该任务,并设置该任务状态为已执行</span><br><span class=\"line\">                        if (task.period &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">                            queue.removeMin();</span><br><span class=\"line\">                            task.state &#x3D; TimerTask.EXECUTED;</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            &#x2F;&#x2F;若为重复执行任务,则在指定时刻重新调度该任务</span><br><span class=\"line\">                            queue.rescheduleMin(</span><br><span class=\"line\">                                task.period&lt;0 ? currentTime-task.period</span><br><span class=\"line\">                                    : executionTime + task.period);                      </span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    &#x2F;&#x2F;若最近无任务要执行,则等待至要执行任务的指定时刻</span><br><span class=\"line\">                    if (!taskFired) &#123;</span><br><span class=\"line\">                        queue.wait(executionTime - currentTime);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#x2F;&#x2F;任务已释放,运行任务</span><br><span class=\"line\">            if (taskFired) &#123; </span><br><span class=\"line\">                task.run();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch(InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a><strong>任务队列</strong></h2><p>任务队列是基于完全二叉树实现的小顶堆。队列初始容量为128，由于0位置不存储任务，因此实际初始容量为127，size表示队列的任务数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TaskQueue &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;基于顺序表实现的定时任务队列</span><br><span class=\"line\">    private TimerTask[] queue &#x3D; new TimerTask[128];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;队列任务数</span><br><span class=\"line\">    private int size &#x3D; 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查询容量</p>\n</blockquote>\n<p>查询队列任务数和判断队列是否为空都直接使用任务队列内部维护的size属性，因此这两个操作的时间复杂度为O(1)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 队列任务数 *&#x2F;</span><br><span class=\"line\">int size() &#123; return size; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 队列是否为空 *&#x2F;</span><br><span class=\"line\">boolean isEmpty() &#123; return size&#x3D;&#x3D;0; &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>添加任务</p>\n</blockquote>\n<p>主线程向任务队列中注入新任务。如果当前任务队列容量已达极限，则在原容量基础上扩容一倍，并在任务队列末尾追加新任务，并根据任务执行时间作为优先级调整新任务在任务队列中的位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 新增任务并调整小顶堆 *&#x2F;</span><br><span class=\"line\">void add(TimerTask task) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;任务数达到队列最大容量,则扩容一倍</span><br><span class=\"line\">    if (size + 1 &#x3D;&#x3D; queue.length) &#123;</span><br><span class=\"line\">        queue &#x3D; Arrays.copyOf(queue, 2*queue.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;添加任务</span><br><span class=\"line\">    queue[++size] &#x3D; task;</span><br><span class=\"line\">    &#x2F;&#x2F;向上调整任务</span><br><span class=\"line\">    fixUp(size);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic3.zhimg.com/80/v2-3e64d663f2d599d0c7b40a7464dd0072_720w.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>获取任务</p>\n</blockquote>\n<p>从任务队列中获取最近将要执行任务的时间复杂度为O(1)；获得指定位置任务的时间复杂度也是O(1)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 获得下次执行时间最小的任务,即最小堆根结点 *&#x2F;</span><br><span class=\"line\">TimerTask getMin() &#123; return queue[1]; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 获得指定位置的任务 *&#x2F;</span><br><span class=\"line\">TimerTask get(int i) &#123; return queue[i]; &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"images/getmint_20200427144736.png\" alt=\"img\"></p>\n<blockquote>\n<p>移除任务</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 移除下次执行时间最小的任务,即移除堆顶任务 *&#x2F;</span><br><span class=\"line\">void removeMin() &#123;</span><br><span class=\"line\">    queue[1] &#x3D; queue[size];</span><br><span class=\"line\">    queue[size--] &#x3D; null;</span><br><span class=\"line\">    fixDown(1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic4.zhimg.com/80/v2-d0a23892cf5a8aaef780bf8f0e6f0e33_720w.jpg\" alt=\"img\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 快速移除指定位置处任务 *&#x2F;</span><br><span class=\"line\">void quickRemove(int i) &#123;</span><br><span class=\"line\">    assert i &lt;&#x3D; size;  &#x2F;&#x2F;assert生效需要编译器开启断言功能</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;指定位置元素直接用最后元素代替,不需要向下调整</span><br><span class=\"line\">    queue[i] &#x3D; queue[size];</span><br><span class=\"line\">    queue[size--] &#x3D; null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic1.zhimg.com/80/v2-d72f08b8ae0fbaaa9a3da508f9e64b54_720w.jpg\" alt=\"img\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 清空任务队列 *&#x2F;</span><br><span class=\"line\">void clear() &#123;</span><br><span class=\"line\">    for (int i&#x3D;1; i&lt;&#x3D;size; i++)</span><br><span class=\"line\">        queue[i] &#x3D; null;</span><br><span class=\"line\">    size &#x3D; 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重新调度任务</p>\n</blockquote>\n<p>重新调度任务不删除堆顶任务，而是将堆顶任务的nextExecutionTime加上period后得到新的nextExecutionTime值，然后根据任务优先级向下调整。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void rescheduleMin(long newTime) &#123;</span><br><span class=\"line\">    queue[1].nextExecutionTime &#x3D; newTime;</span><br><span class=\"line\">    fixDown(1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic3.zhimg.com/80/v2-26395bd09d3fc3d4fd4990a3707aa34a_720w.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>基础算法</p>\n</blockquote>\n<p>任务队列是优先级队列，基于顺序结构完全二叉树实现的小顶堆。优先级的依据是任务下次执行时间。</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-7dbfc6a56603dfc301213dd0ba8cfa0d_720w.jpg\" alt=\"img\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 提升优先级 *&#x2F;</span><br><span class=\"line\">private void fixUp(int k) &#123;</span><br><span class=\"line\">    while (k &gt; 1) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;父结点位置</span><br><span class=\"line\">        int j &#x3D; k &gt;&gt; 1;</span><br><span class=\"line\">        &#x2F;&#x2F;如果父结点的下次任务执行时间小于当前结点下次任务执行时间,结束调整操作</span><br><span class=\"line\">        if (queue[j].nextExecutionTime &lt;&#x3D; queue[k].nextExecutionTime) &#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;调整任务在任务队列中的位置</span><br><span class=\"line\">        TimerTask tmp &#x3D; queue[j];  </span><br><span class=\"line\">        queue[j] &#x3D; queue[k]; </span><br><span class=\"line\">        queue[k] &#x3D; tmp;</span><br><span class=\"line\">        k &#x3D; j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 降低优先级 *&#x2F;</span><br><span class=\"line\">private void fixDown(int k) &#123;</span><br><span class=\"line\">    int j;</span><br><span class=\"line\">    while ((j &#x3D; k &lt;&lt; 1) &lt;&#x3D; size &amp;&amp; j &gt; 0) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;选择左右两侧子结点,选择更小的交换位置</span><br><span class=\"line\">        if (j &lt; size &amp;&amp; </span><br><span class=\"line\">            queue[j].nextExecutionTime &gt; queue[j+1].nextExecutionTime) &#123;</span><br><span class=\"line\">            j++; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (queue[k].nextExecutionTime &lt;&#x3D; queue[j].nextExecutionTime) &#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;调整任务在任务队列中的位置</span><br><span class=\"line\">        TimerTask tmp &#x3D; queue[j];  </span><br><span class=\"line\">        queue[j] &#x3D; queue[k]; </span><br><span class=\"line\">        queue[k] &#x3D; tmp;</span><br><span class=\"line\">        k &#x3D; j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调整当前完全二叉树为最小堆。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 堆化 *&#x2F;</span><br><span class=\"line\">void heapify() &#123;</span><br><span class=\"line\">    for (int i &#x3D; size&#x2F;2; i &gt;&#x3D; 1; i--) &#123;</span><br><span class=\"line\">        fixDown(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a><strong>定时器</strong></h2><p>一个定时器内部维护一个任务队列和一个定时线程。在Main线程往任务队列注入任务后，由定时线程异步轮询处理任务队列，这种处理方式实质上是异步串行方式，任务处理并发度为1。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Timer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 任务队列 *&#x2F;</span><br><span class=\"line\">    private final TaskQueue queue &#x3D; new TaskQueue();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 定时线程 *&#x2F;</span><br><span class=\"line\">    private final TimerThread thread &#x3D; new TimerThread(queue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>构造器</p>\n</blockquote>\n<p>新建Timer实例，同时也新建了任务队列和定时线程，并启动定时线程。启动定时线程前可指定定时线程的名称，以及指定为后台线程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Timer() &#123;</span><br><span class=\"line\">    this(&quot;Timer-&quot; + serialNumber());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Timer(boolean isDaemon) &#123;</span><br><span class=\"line\">    this(&quot;Timer-&quot; + serialNumber(), isDaemon);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Timer(String name) &#123;</span><br><span class=\"line\">    thread.setName(name);</span><br><span class=\"line\">    thread.start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Timer(String name, boolean isDaemon) &#123;</span><br><span class=\"line\">    thread.setName(name); </span><br><span class=\"line\">    thread.setDaemon(isDaemon);</span><br><span class=\"line\">    thread.start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;单机序列号生成</span><br><span class=\"line\">private final static AtomicInteger nextSerialNumber &#x3D; new AtomicInteger(0);</span><br><span class=\"line\">private static int serialNumber() &#123;</span><br><span class=\"line\">    return nextSerialNumber.getAndIncrement();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>定间隔调度</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 延迟调度 *&#x2F;</span><br><span class=\"line\">public void schedule(TimerTask task, long delay) &#123;</span><br><span class=\"line\">    if (delay &lt; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Negative delay.&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;从当前时间开始延时delay毫秒后调度</span><br><span class=\"line\">    sched(task, System.currentTimeMillis()+delay, 0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 定时调度 *&#x2F;</span><br><span class=\"line\">public void schedule(TimerTask task, Date time) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;从指定时刻出开始调度</span><br><span class=\"line\">    sched(task, time.getTime(), 0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 延时周期性调度 *&#x2F;</span><br><span class=\"line\">public void schedule(TimerTask task, long delay, long period) &#123;</span><br><span class=\"line\">    if (delay &lt; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Negative delay.&quot;);</span><br><span class=\"line\">    if (period &lt;&#x3D; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Non-positive period.&quot;);</span><br><span class=\"line\">    sched(task, System.currentTimeMillis()+delay, -period);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 定时周期性调度 *&#x2F;</span><br><span class=\"line\">public void schedule(TimerTask task, Date firstTime, long period) &#123;</span><br><span class=\"line\">    if (period &lt;&#x3D; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Non-positive period.&quot;);</span><br><span class=\"line\">    sched(task, firstTime.getTime(), -period);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Timer.schedule()侧重period时间的一致性，保证执行任务的间隔时间相同。</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-367f6ca013b337ab1d2f2547ed871766_720w.png\" alt=\"img\"></p>\n<blockquote>\n<p>定频率调度</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 延时周期性定速调度 *&#x2F;</span><br><span class=\"line\">public void scheduleAtFixedRate(TimerTask task, long delay, long period) &#123;</span><br><span class=\"line\">    if (delay &lt; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Negative delay.&quot;);</span><br><span class=\"line\">    if (period &lt;&#x3D; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Non-positive period.&quot;);</span><br><span class=\"line\">    sched(task, System.currentTimeMillis()+delay, period);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 定时周期性定速调度 *&#x2F;</span><br><span class=\"line\">public void scheduleAtFixedRate(TimerTask task, Date firstTime, long period) &#123;</span><br><span class=\"line\">    if (period &lt;&#x3D; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Non-positive period.&quot;);</span><br><span class=\"line\">    sched(task, firstTime.getTime(), period);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Timer.scheduleAtFixedRate()侧重执行频率的一致性，任务执行时间加period时间的和相等。</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-493048111335ad7f57c1f51a29b37753_720w.png\" alt=\"img\"></p>\n<blockquote>\n<p>核心调度算法</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void sched(TimerTask task, long time, long period) &#123;</span><br><span class=\"line\">    if (time &lt; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Illegal execution time.&quot;);      </span><br><span class=\"line\">    if (Math.abs(period) &gt; (Long.MAX_VALUE &gt;&gt; 1))</span><br><span class=\"line\">        period &gt;&gt;&#x3D; 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized(queue) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;保证定时器未被取消</span><br><span class=\"line\">        if (!thread.newTasksMayBeScheduled) &#123;</span><br><span class=\"line\">            throw new IllegalStateException(&quot;Timer already cancelled.&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        synchronized(task.lock) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;保证任务最初处于未使用状态</span><br><span class=\"line\">            if (task.state !&#x3D; TimerTask.VIRGIN) &#123;</span><br><span class=\"line\">                throw new IllegalStateException(</span><br><span class=\"line\">                    &quot;Task already scheduled or cancelled&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F;下次任务执行时间</span><br><span class=\"line\">            task.nextExecutionTime &#x3D; time;</span><br><span class=\"line\">            &#x2F;&#x2F;任务执行周期</span><br><span class=\"line\">            task.period &#x3D; period;</span><br><span class=\"line\">            &#x2F;&#x2F;设置任务状态为已调度</span><br><span class=\"line\">            task.state &#x3D; TimerTask.SCHEDULED;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;往任务队列中添加任务</span><br><span class=\"line\">        queue.add(task);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;如果队列中该任务为最近要执行的任务,则立即唤醒定时线程处理</span><br><span class=\"line\">        if (queue.getMin() &#x3D;&#x3D; task) &#123;</span><br><span class=\"line\">            queue.notify();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>撤销定时器</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void cancel() &#123;</span><br><span class=\"line\">    synchronized(queue) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;撤销定时器</span><br><span class=\"line\">        thread.newTasksMayBeScheduled &#x3D; false;</span><br><span class=\"line\">        &#x2F;&#x2F;清空任务队列</span><br><span class=\"line\">        queue.clear();</span><br><span class=\"line\">        &#x2F;&#x2F;唤醒定时线程</span><br><span class=\"line\">        queue.notify();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>清理取消状态的任务</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int purge() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;从队列中移除的任务数</span><br><span class=\"line\">    int result &#x3D; 0;</span><br><span class=\"line\">    synchronized(queue) &#123;</span><br><span class=\"line\">        for (int i &#x3D; queue.size(); i &gt; 0; i--) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;从队列中移除取消状态任务</span><br><span class=\"line\">            if (queue.get(i).state &#x3D;&#x3D; TimerTask.CANCELLED) &#123;</span><br><span class=\"line\">                queue.quickRemove(i);</span><br><span class=\"line\">                result++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;如果仍有非取消任务,队列重新堆化</span><br><span class=\"line\">        if (result !&#x3D; 0)</span><br><span class=\"line\">            queue.heapify();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h2><p>读完源码后总结如下，</p>\n<blockquote>\n<p>数据结构</p>\n</blockquote>\n<p>小顶堆实现优先级队列，优先级标准是任务下次执行时间。</p>\n<blockquote>\n<p>任务状态转换</p>\n</blockquote>\n<p><img src=\"https://pic3.zhimg.com/80/v2-ad4c978cc45c7a22464335345f525932_720w.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>定时器架构图</p>\n</blockquote>\n<p><img src=\"https://pic3.zhimg.com/80/v2-08da55ef92a07ae0f90a07f18521bb8e_720w.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>架构缺陷</p>\n</blockquote>\n<p>单线程串行消费任务，前置任务消费延迟或失败会直接影响后续任务的消费。如果消费前置任务时抛出异常，线程退出，队列中的任务无法被继续消费，定时器失效。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>并发编程领域中<strong>定时器</strong> 相关内容经常被一些介绍并发编程书籍所遗忘，属于并发编程学习优先级较低的知识点。在JDK源码中有两种定时器实现，一种是JDK1.3引入的<strong>*Timer</strong>类<em>，它是一种基于单线程操作的简单任务调度器，虽然存在较多设计缺陷，但仍有很多应用场景和使用案例；另一种JDK1.5引入的*</em>ScheduledThreadPoolExecutor**类，是一种基于线程池操作的较复杂任务调度器，同时也是官方推荐的任务调度器实现。</p>\n<p>定时器Timer，也称简单任务调度器。它由以下四个类组成，</p>\n<ul>\n<li>定时任务（TimerTask类）</li>\n<li>任务队列（TaskQueue类）</li>\n<li>定时线程（TimerThread类）</li>\n<li>定时器（Timer类）</li>\n</ul>\n<h2 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a><strong>定时任务</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class TimerTask implements Runnable &#123;</span><br><span class=\"line\">    final Object lock &#x3D; new Object();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;任务状态</span><br><span class=\"line\">    int state &#x3D; VIRGIN;</span><br><span class=\"line\">    static final int VIRGIN &#x3D; 0;</span><br><span class=\"line\">    static final int SCHEDULED   &#x3D; 1;</span><br><span class=\"line\">    static final int EXECUTED    &#x3D; 2;</span><br><span class=\"line\">    static final int CANCELLED   &#x3D; 3;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;下次执行时间</span><br><span class=\"line\">    long nextExecutionTime;</span><br><span class=\"line\">    &#x2F;&#x2F;调度至执行间隔时间</span><br><span class=\"line\">    long period &#x3D; 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>抽象类TimerTask实现Runnable接口，表明该类作为定时任务模版，用户可以根据业务场景定义具体任务。TimerTask类要维护<strong>任务状态</strong> (state)、<strong>任务下次执行时间</strong>（nextExecutionTime）和<strong>任务调度至执行的间隔时间</strong>（period）。</p>\n<blockquote>\n<p>任务状态</p>\n</blockquote>\n<p>定时器任务生命周期中可能处于下表所示的4种不同的状态，在给定的时刻定时器任务只能处于其中一种状态。</p>\n<p><img src=\"/images/java_time_task.png\" alt=\"timer task\"></p>\n<blockquote>\n<p>执行任务</p>\n</blockquote>\n<p>TimerTask类的抽象方法run来自Runnable接口，TimerTask并未实现该接口，延迟至子类实现。用户可在派生类中自定义任务逻辑。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract void run();</span><br></pre></td></tr></table></figure>\n\n<p>抽象类TimerTask的run方法并不一定要来源于Runnable接口，它并未接受线程调度，而是由TimerThread线程从TimerQueue中消费任务，然后直接调用TimerTask.run()执行任务。基于这种理解，TimerTask类完全可以像这样定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class TimerTask &#123;  &#x2F;&#x2F; 舍去implement Runnable</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;由抽象类自己定义,而非来自Runnable接口</span><br><span class=\"line\">    public abstract void run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>TimerTask类这种写法可以理解为被<strong>过度设计</strong>了，读者可思之。</p>\n<blockquote>\n<p>取消任务</p>\n</blockquote>\n<p>如果当前任务正处于SCHEDULED状态，允许撤销当前任务，置任务为CANCELLED状态，返回true表示任务撤销成功；若任务处于其它状态，也置任务为CANCELLED状态，并返回false表示任务撤销失败。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean cancel() &#123;</span><br><span class=\"line\">    synchronized(lock) &#123;</span><br><span class=\"line\">        boolean result &#x3D; (state &#x3D;&#x3D; SCHEDULED);</span><br><span class=\"line\">        &#x2F;&#x2F;实际上所有任务都能被取消</span><br><span class=\"line\">        state &#x3D; CANCELLED;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用TimerTask.cancel()，虽然对不同状态有不同的返回值，但不管什么状态都能够被取消。设计逻辑匪夷所思，我认为这种<strong>设计不合理</strong>，读者可思之。</p>\n<blockquote>\n<p>调度执行时间</p>\n</blockquote>\n<p>scheduledExecutionTime方法获取任务被调度后最近的开始执行时间点，保证调度时间在下次执行时间之前。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public long scheduledExecutionTime() &#123;</span><br><span class=\"line\">    synchronized(lock) &#123;</span><br><span class=\"line\">        return (period &lt; 0 ? </span><br><span class=\"line\">            nextExecutionTime + period : nextExecutionTime - period);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定时线程\"><a href=\"#定时线程\" class=\"headerlink\" title=\"定时线程\"></a><strong>定时线程</strong></h2><p>从优先级队列里异步消费任务的操作由单线程完成。TimerThread是单线程，因此需要mainLoop循环逻辑来轮询消费任务队列。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TimerThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    boolean newTasksMayBeScheduled &#x3D; true;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;内部维护一个队列</span><br><span class=\"line\">    private TaskQueue queue;</span><br><span class=\"line\"></span><br><span class=\"line\">    TimerThread(TaskQueue queue) &#123;</span><br><span class=\"line\">        this.queue &#x3D; queue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>轮询任务</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public void run() &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;循环执行逻辑</span><br><span class=\"line\">        mainLoop();</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        synchronized(queue) &#123;</span><br><span class=\"line\">            newTasksMayBeScheduled &#x3D; false;</span><br><span class=\"line\">            &#x2F;&#x2F;清空任务队列. 在结束循环后可能仍有任务被加入到队列,因此需要清空.</span><br><span class=\"line\">            queue.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private void mainLoop() &#123;</span><br><span class=\"line\">    while (true) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            TimerTask task;</span><br><span class=\"line\">            boolean taskFired;</span><br><span class=\"line\">            synchronized(queue) &#123;  </span><br><span class=\"line\">                &#x2F;&#x2F;若队列为空且定时器未被撤销,则挂起定时线程直至被唤醒       </span><br><span class=\"line\">                while (queue.isEmpty() &amp;&amp; newTasksMayBeScheduled) &#123;                     </span><br><span class=\"line\">                    queue.wait();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                &#x2F;&#x2F;若线程被唤醒后队列仍为空,则结束循环. 说明此时定时器被撤销.</span><br><span class=\"line\">                if (queue.isEmpty()) &#123;</span><br><span class=\"line\">                    break;            </span><br><span class=\"line\">                &#125;    </span><br><span class=\"line\">  </span><br><span class=\"line\">                long currentTime, executionTime;</span><br><span class=\"line\">                &#x2F;&#x2F;获取最近执行时间任务</span><br><span class=\"line\">                task &#x3D; queue.getMin();</span><br><span class=\"line\">                synchronized(task.lock) &#123;</span><br><span class=\"line\">                    &#x2F;&#x2F;任务若被取消,则从队列中移除,并继续轮询</span><br><span class=\"line\">                    if (task.state &#x3D;&#x3D; TimerTask.CANCELLED) &#123;</span><br><span class=\"line\">                        queue.removeMin();</span><br><span class=\"line\">                        continue;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    currentTime &#x3D; System.currentTimeMillis();</span><br><span class=\"line\">                    executionTime &#x3D; task.nextExecutionTime;</span><br><span class=\"line\">                    &#x2F;&#x2F;任务最近要执行</span><br><span class=\"line\">                    if (taskFired &#x3D; (executionTime&lt;&#x3D;currentTime)) &#123;</span><br><span class=\"line\">                        &#x2F;&#x2F;若为非重复执行任务,从队列中移除该任务,并设置该任务状态为已执行</span><br><span class=\"line\">                        if (task.period &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">                            queue.removeMin();</span><br><span class=\"line\">                            task.state &#x3D; TimerTask.EXECUTED;</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            &#x2F;&#x2F;若为重复执行任务,则在指定时刻重新调度该任务</span><br><span class=\"line\">                            queue.rescheduleMin(</span><br><span class=\"line\">                                task.period&lt;0 ? currentTime-task.period</span><br><span class=\"line\">                                    : executionTime + task.period);                      </span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    &#x2F;&#x2F;若最近无任务要执行,则等待至要执行任务的指定时刻</span><br><span class=\"line\">                    if (!taskFired) &#123;</span><br><span class=\"line\">                        queue.wait(executionTime - currentTime);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#x2F;&#x2F;任务已释放,运行任务</span><br><span class=\"line\">            if (taskFired) &#123; </span><br><span class=\"line\">                task.run();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch(InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a><strong>任务队列</strong></h2><p>任务队列是基于完全二叉树实现的小顶堆。队列初始容量为128，由于0位置不存储任务，因此实际初始容量为127，size表示队列的任务数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TaskQueue &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;基于顺序表实现的定时任务队列</span><br><span class=\"line\">    private TimerTask[] queue &#x3D; new TimerTask[128];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;队列任务数</span><br><span class=\"line\">    private int size &#x3D; 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查询容量</p>\n</blockquote>\n<p>查询队列任务数和判断队列是否为空都直接使用任务队列内部维护的size属性，因此这两个操作的时间复杂度为O(1)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 队列任务数 *&#x2F;</span><br><span class=\"line\">int size() &#123; return size; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 队列是否为空 *&#x2F;</span><br><span class=\"line\">boolean isEmpty() &#123; return size&#x3D;&#x3D;0; &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>添加任务</p>\n</blockquote>\n<p>主线程向任务队列中注入新任务。如果当前任务队列容量已达极限，则在原容量基础上扩容一倍，并在任务队列末尾追加新任务，并根据任务执行时间作为优先级调整新任务在任务队列中的位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 新增任务并调整小顶堆 *&#x2F;</span><br><span class=\"line\">void add(TimerTask task) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;任务数达到队列最大容量,则扩容一倍</span><br><span class=\"line\">    if (size + 1 &#x3D;&#x3D; queue.length) &#123;</span><br><span class=\"line\">        queue &#x3D; Arrays.copyOf(queue, 2*queue.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;添加任务</span><br><span class=\"line\">    queue[++size] &#x3D; task;</span><br><span class=\"line\">    &#x2F;&#x2F;向上调整任务</span><br><span class=\"line\">    fixUp(size);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic3.zhimg.com/80/v2-3e64d663f2d599d0c7b40a7464dd0072_720w.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>获取任务</p>\n</blockquote>\n<p>从任务队列中获取最近将要执行任务的时间复杂度为O(1)；获得指定位置任务的时间复杂度也是O(1)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 获得下次执行时间最小的任务,即最小堆根结点 *&#x2F;</span><br><span class=\"line\">TimerTask getMin() &#123; return queue[1]; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 获得指定位置的任务 *&#x2F;</span><br><span class=\"line\">TimerTask get(int i) &#123; return queue[i]; &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"images/getmint_20200427144736.png\" alt=\"img\"></p>\n<blockquote>\n<p>移除任务</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 移除下次执行时间最小的任务,即移除堆顶任务 *&#x2F;</span><br><span class=\"line\">void removeMin() &#123;</span><br><span class=\"line\">    queue[1] &#x3D; queue[size];</span><br><span class=\"line\">    queue[size--] &#x3D; null;</span><br><span class=\"line\">    fixDown(1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic4.zhimg.com/80/v2-d0a23892cf5a8aaef780bf8f0e6f0e33_720w.jpg\" alt=\"img\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 快速移除指定位置处任务 *&#x2F;</span><br><span class=\"line\">void quickRemove(int i) &#123;</span><br><span class=\"line\">    assert i &lt;&#x3D; size;  &#x2F;&#x2F;assert生效需要编译器开启断言功能</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;指定位置元素直接用最后元素代替,不需要向下调整</span><br><span class=\"line\">    queue[i] &#x3D; queue[size];</span><br><span class=\"line\">    queue[size--] &#x3D; null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic1.zhimg.com/80/v2-d72f08b8ae0fbaaa9a3da508f9e64b54_720w.jpg\" alt=\"img\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 清空任务队列 *&#x2F;</span><br><span class=\"line\">void clear() &#123;</span><br><span class=\"line\">    for (int i&#x3D;1; i&lt;&#x3D;size; i++)</span><br><span class=\"line\">        queue[i] &#x3D; null;</span><br><span class=\"line\">    size &#x3D; 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重新调度任务</p>\n</blockquote>\n<p>重新调度任务不删除堆顶任务，而是将堆顶任务的nextExecutionTime加上period后得到新的nextExecutionTime值，然后根据任务优先级向下调整。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void rescheduleMin(long newTime) &#123;</span><br><span class=\"line\">    queue[1].nextExecutionTime &#x3D; newTime;</span><br><span class=\"line\">    fixDown(1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic3.zhimg.com/80/v2-26395bd09d3fc3d4fd4990a3707aa34a_720w.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>基础算法</p>\n</blockquote>\n<p>任务队列是优先级队列，基于顺序结构完全二叉树实现的小顶堆。优先级的依据是任务下次执行时间。</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-7dbfc6a56603dfc301213dd0ba8cfa0d_720w.jpg\" alt=\"img\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 提升优先级 *&#x2F;</span><br><span class=\"line\">private void fixUp(int k) &#123;</span><br><span class=\"line\">    while (k &gt; 1) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;父结点位置</span><br><span class=\"line\">        int j &#x3D; k &gt;&gt; 1;</span><br><span class=\"line\">        &#x2F;&#x2F;如果父结点的下次任务执行时间小于当前结点下次任务执行时间,结束调整操作</span><br><span class=\"line\">        if (queue[j].nextExecutionTime &lt;&#x3D; queue[k].nextExecutionTime) &#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;调整任务在任务队列中的位置</span><br><span class=\"line\">        TimerTask tmp &#x3D; queue[j];  </span><br><span class=\"line\">        queue[j] &#x3D; queue[k]; </span><br><span class=\"line\">        queue[k] &#x3D; tmp;</span><br><span class=\"line\">        k &#x3D; j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 降低优先级 *&#x2F;</span><br><span class=\"line\">private void fixDown(int k) &#123;</span><br><span class=\"line\">    int j;</span><br><span class=\"line\">    while ((j &#x3D; k &lt;&lt; 1) &lt;&#x3D; size &amp;&amp; j &gt; 0) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;选择左右两侧子结点,选择更小的交换位置</span><br><span class=\"line\">        if (j &lt; size &amp;&amp; </span><br><span class=\"line\">            queue[j].nextExecutionTime &gt; queue[j+1].nextExecutionTime) &#123;</span><br><span class=\"line\">            j++; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (queue[k].nextExecutionTime &lt;&#x3D; queue[j].nextExecutionTime) &#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;调整任务在任务队列中的位置</span><br><span class=\"line\">        TimerTask tmp &#x3D; queue[j];  </span><br><span class=\"line\">        queue[j] &#x3D; queue[k]; </span><br><span class=\"line\">        queue[k] &#x3D; tmp;</span><br><span class=\"line\">        k &#x3D; j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调整当前完全二叉树为最小堆。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 堆化 *&#x2F;</span><br><span class=\"line\">void heapify() &#123;</span><br><span class=\"line\">    for (int i &#x3D; size&#x2F;2; i &gt;&#x3D; 1; i--) &#123;</span><br><span class=\"line\">        fixDown(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a><strong>定时器</strong></h2><p>一个定时器内部维护一个任务队列和一个定时线程。在Main线程往任务队列注入任务后，由定时线程异步轮询处理任务队列，这种处理方式实质上是异步串行方式，任务处理并发度为1。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Timer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 任务队列 *&#x2F;</span><br><span class=\"line\">    private final TaskQueue queue &#x3D; new TaskQueue();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;** 定时线程 *&#x2F;</span><br><span class=\"line\">    private final TimerThread thread &#x3D; new TimerThread(queue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>构造器</p>\n</blockquote>\n<p>新建Timer实例，同时也新建了任务队列和定时线程，并启动定时线程。启动定时线程前可指定定时线程的名称，以及指定为后台线程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Timer() &#123;</span><br><span class=\"line\">    this(&quot;Timer-&quot; + serialNumber());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Timer(boolean isDaemon) &#123;</span><br><span class=\"line\">    this(&quot;Timer-&quot; + serialNumber(), isDaemon);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Timer(String name) &#123;</span><br><span class=\"line\">    thread.setName(name);</span><br><span class=\"line\">    thread.start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Timer(String name, boolean isDaemon) &#123;</span><br><span class=\"line\">    thread.setName(name); </span><br><span class=\"line\">    thread.setDaemon(isDaemon);</span><br><span class=\"line\">    thread.start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;单机序列号生成</span><br><span class=\"line\">private final static AtomicInteger nextSerialNumber &#x3D; new AtomicInteger(0);</span><br><span class=\"line\">private static int serialNumber() &#123;</span><br><span class=\"line\">    return nextSerialNumber.getAndIncrement();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>定间隔调度</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 延迟调度 *&#x2F;</span><br><span class=\"line\">public void schedule(TimerTask task, long delay) &#123;</span><br><span class=\"line\">    if (delay &lt; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Negative delay.&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;从当前时间开始延时delay毫秒后调度</span><br><span class=\"line\">    sched(task, System.currentTimeMillis()+delay, 0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 定时调度 *&#x2F;</span><br><span class=\"line\">public void schedule(TimerTask task, Date time) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;从指定时刻出开始调度</span><br><span class=\"line\">    sched(task, time.getTime(), 0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 延时周期性调度 *&#x2F;</span><br><span class=\"line\">public void schedule(TimerTask task, long delay, long period) &#123;</span><br><span class=\"line\">    if (delay &lt; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Negative delay.&quot;);</span><br><span class=\"line\">    if (period &lt;&#x3D; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Non-positive period.&quot;);</span><br><span class=\"line\">    sched(task, System.currentTimeMillis()+delay, -period);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 定时周期性调度 *&#x2F;</span><br><span class=\"line\">public void schedule(TimerTask task, Date firstTime, long period) &#123;</span><br><span class=\"line\">    if (period &lt;&#x3D; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Non-positive period.&quot;);</span><br><span class=\"line\">    sched(task, firstTime.getTime(), -period);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Timer.schedule()侧重period时间的一致性，保证执行任务的间隔时间相同。</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-367f6ca013b337ab1d2f2547ed871766_720w.png\" alt=\"img\"></p>\n<blockquote>\n<p>定频率调度</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;** 延时周期性定速调度 *&#x2F;</span><br><span class=\"line\">public void scheduleAtFixedRate(TimerTask task, long delay, long period) &#123;</span><br><span class=\"line\">    if (delay &lt; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Negative delay.&quot;);</span><br><span class=\"line\">    if (period &lt;&#x3D; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Non-positive period.&quot;);</span><br><span class=\"line\">    sched(task, System.currentTimeMillis()+delay, period);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;** 定时周期性定速调度 *&#x2F;</span><br><span class=\"line\">public void scheduleAtFixedRate(TimerTask task, Date firstTime, long period) &#123;</span><br><span class=\"line\">    if (period &lt;&#x3D; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Non-positive period.&quot;);</span><br><span class=\"line\">    sched(task, firstTime.getTime(), period);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Timer.scheduleAtFixedRate()侧重执行频率的一致性，任务执行时间加period时间的和相等。</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-493048111335ad7f57c1f51a29b37753_720w.png\" alt=\"img\"></p>\n<blockquote>\n<p>核心调度算法</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void sched(TimerTask task, long time, long period) &#123;</span><br><span class=\"line\">    if (time &lt; 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Illegal execution time.&quot;);      </span><br><span class=\"line\">    if (Math.abs(period) &gt; (Long.MAX_VALUE &gt;&gt; 1))</span><br><span class=\"line\">        period &gt;&gt;&#x3D; 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized(queue) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;保证定时器未被取消</span><br><span class=\"line\">        if (!thread.newTasksMayBeScheduled) &#123;</span><br><span class=\"line\">            throw new IllegalStateException(&quot;Timer already cancelled.&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        synchronized(task.lock) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;保证任务最初处于未使用状态</span><br><span class=\"line\">            if (task.state !&#x3D; TimerTask.VIRGIN) &#123;</span><br><span class=\"line\">                throw new IllegalStateException(</span><br><span class=\"line\">                    &quot;Task already scheduled or cancelled&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F;下次任务执行时间</span><br><span class=\"line\">            task.nextExecutionTime &#x3D; time;</span><br><span class=\"line\">            &#x2F;&#x2F;任务执行周期</span><br><span class=\"line\">            task.period &#x3D; period;</span><br><span class=\"line\">            &#x2F;&#x2F;设置任务状态为已调度</span><br><span class=\"line\">            task.state &#x3D; TimerTask.SCHEDULED;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;往任务队列中添加任务</span><br><span class=\"line\">        queue.add(task);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;如果队列中该任务为最近要执行的任务,则立即唤醒定时线程处理</span><br><span class=\"line\">        if (queue.getMin() &#x3D;&#x3D; task) &#123;</span><br><span class=\"line\">            queue.notify();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>撤销定时器</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void cancel() &#123;</span><br><span class=\"line\">    synchronized(queue) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;撤销定时器</span><br><span class=\"line\">        thread.newTasksMayBeScheduled &#x3D; false;</span><br><span class=\"line\">        &#x2F;&#x2F;清空任务队列</span><br><span class=\"line\">        queue.clear();</span><br><span class=\"line\">        &#x2F;&#x2F;唤醒定时线程</span><br><span class=\"line\">        queue.notify();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>清理取消状态的任务</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int purge() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;从队列中移除的任务数</span><br><span class=\"line\">    int result &#x3D; 0;</span><br><span class=\"line\">    synchronized(queue) &#123;</span><br><span class=\"line\">        for (int i &#x3D; queue.size(); i &gt; 0; i--) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;从队列中移除取消状态任务</span><br><span class=\"line\">            if (queue.get(i).state &#x3D;&#x3D; TimerTask.CANCELLED) &#123;</span><br><span class=\"line\">                queue.quickRemove(i);</span><br><span class=\"line\">                result++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;如果仍有非取消任务,队列重新堆化</span><br><span class=\"line\">        if (result !&#x3D; 0)</span><br><span class=\"line\">            queue.heapify();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h2><p>读完源码后总结如下，</p>\n<blockquote>\n<p>数据结构</p>\n</blockquote>\n<p>小顶堆实现优先级队列，优先级标准是任务下次执行时间。</p>\n<blockquote>\n<p>任务状态转换</p>\n</blockquote>\n<p><img src=\"https://pic3.zhimg.com/80/v2-ad4c978cc45c7a22464335345f525932_720w.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>定时器架构图</p>\n</blockquote>\n<p><img src=\"https://pic3.zhimg.com/80/v2-08da55ef92a07ae0f90a07f18521bb8e_720w.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>架构缺陷</p>\n</blockquote>\n<p>单线程串行消费任务，前置任务消费延迟或失败会直接影响后续任务的消费。如果消费前置任务时抛出异常，线程退出，队列中的任务无法被继续消费，定时器失效。</p>\n"},{"title":"disruptor","date":"2020-04-27T07:34:37.000Z","_content":"## 背景\n\nDisruptor是英国外汇交易公司LMAX开发的一个高性能队列，研发的初衷是解决内存队列的延迟问题（在性能测试中发现竟然与I/O操作处于同样的数量级）。基于Disruptor开发的系统单线程能支撑每秒600万订单，2010年在QCon演讲后，获得了业界关注。2011年，企业应用软件专家Martin Fowler专门撰写长文介绍。同年它还获得了Oracle官方的Duke大奖。\n\n目前，包括Apache Storm、Camel、Log4j 2在内的很多知名项目都应用了Disruptor以获取高性能。在美团技术团队它也有不少应用，有的项目架构借鉴了它的设计机制。本文从实战角度剖析了Disruptor的实现原理。\n\n需要特别指出的是，这里所说的队列是系统内部的内存队列，而不是Kafka这样的分布式队列。另外，本文所描述的Disruptor特性限于3.3.4。\n\n## Java内置队列\n\n介绍Disruptor之前，我们先来看一看常用的线程安全的内置队列有什么问题。Java的内置队列如下表所示。\n\n| 队列                  | 有界性             | 锁   | 数据结构   |\n| --------------------- | ------------------ | ---- | ---------- |\n| ArrayBlockingQueue    | bounded            | 加锁 | arraylist  |\n| LinkedBlockingQueue   | optionally-bounded | 加锁 | linkedlist |\n| ConcurrentLinkedQueue | unbounded          | 无锁 | linkedlist |\n| LinkedTransferQueue   | unbounded          | 无锁 | linkedlist |\n| PriorityBlockingQueue | unbounded          | 加锁 | heap       |\n| DelayQueue            | unbounded          | 加锁 | heap       |\n\n队列的底层一般分成三种：数组、链表和堆。其中，堆一般情况下是为了实现带有优先级特性的队列，暂且不考虑。\n\n我们就从数组和链表两种数据结构来看，基于数组线程安全的队列，比较典型的是ArrayBlockingQueue，它主要通过加锁的方式来保证线程安全；基于链表的线程安全队列分成LinkedBlockingQueue和ConcurrentLinkedQueue两大类，前者也通过锁的方式来实现线程安全，而后者以及上面表格中的LinkedTransferQueue都是通过原子变量compare and swap（以下简称“CAS”）这种不加锁的方式来实现的。\n\n通过不加锁的方式实现的队列都是无界的（无法保证队列的长度在确定的范围内）；而加锁的方式，可以实现有界队列。在稳定性要求特别高的系统中，为了防止生产者速度过快，导致内存溢出，只能选择有界队列；同时，为了减少Java的垃圾回收对系统性能的影响，会尽量选择array/heap格式的数据结构。这样筛选下来，符合条件的队列就只有ArrayBlockingQueue。\n\n## ArrayBlockingQueue的问题\n\nArrayBlockingQueue在实际使用过程中，会因为加锁和伪共享等出现严重的性能问题，我们下面来分析一下。\n\n### 加锁\n\n现实编程过程中，加锁通常会严重地影响性能。线程会因为竞争不到锁而被挂起，等锁被释放的时候，线程又会被恢复，这个过程中存在着很大的开销，并且通常会有较长时间的中断，因为当一个线程正在等待锁时，它不能做任何其他事情。如果一个线程在持有锁的情况下被延迟执行，例如发生了缺页错误、调度延迟或者其它类似情况，那么所有需要这个锁的线程都无法执行下去。如果被阻塞线程的优先级较高，而持有锁的线程优先级较低，就会发生优先级反转。\n\nDisruptor论文中讲述了一个实验：\n\n- 这个测试程序调用了一个函数，该函数会对一个64位的计数器循环自增5亿次。\n- 机器环境：2.4G 6核\n- 运算： 64位的计数器累加5亿次\n\n|Method | Time (ms) | |— | —| |Single thread | 300| |Single thread with CAS | 5,700| |Single thread with lock | 10,000| |Single thread with volatile write | 4,700| |Two threads with CAS | 30,000| |Two threads with lock | 224,000|\n\nCAS操作比单线程无锁慢了1个数量级；有锁且多线程并发的情况下，速度比单线程无锁慢3个数量级。可见无锁速度最快。\n\n单线程情况下，不加锁的性能 > CAS操作的性能 > 加锁的性能。\n\n在多线程情况下，为了保证线程安全，必须使用CAS或锁，这种情况下，CAS的性能超过锁的性能，前者大约是后者的8倍。\n\n综上可知，加锁的性能是最差的。\n\n**关于锁和CAS**\n\n保证线程安全一般分成两种方式：锁和原子变量。\n\n**锁**\n\n![图1 通过加锁的方式实现线程安全](https://p1.meituan.net/travelcube/9b6a41f7d8527df9730b7832b38ec4d5180025.png)\n\n图1 通过加锁的方式实现线程安全\n\n采取加锁的方式，默认线程会冲突，访问数据时，先加上锁再访问，访问之后再解锁。通过锁界定一个临界区，同时只有一个线程进入。如上图所示，Thread2访问Entry的时候，加了锁，Thread1就不能再执行访问Entry的代码，从而保证线程安全。\n\n下面是ArrayBlockingQueue通过加锁的方式实现的offer方法，保证线程安全。\n\n```\npublic boolean offer(E e) {\n    checkNotNull(e);\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        if (count == items.length)\n            return false;\n        else {\n            insert(e);\n            return true;\n        }\n    } finally {\n        lock.unlock();\n    }\n}\n```\n\n**原子变量**\n\n原子变量能够保证原子性的操作，意思是某个任务在执行过程中，要么全部成功，要么全部失败回滚，恢复到执行之前的初态，不存在初态和成功之间的中间状态。例如CAS操作，要么比较并交换成功，要么比较并交换失败。由CPU保证原子性。\n\n通过原子变量可以实现线程安全。执行某个任务的时候，先假定不会有冲突，若不发生冲突，则直接执行成功；当发生冲突的时候，则执行失败，回滚再重新操作，直到不发生冲突。\n\n![图2 通过原子变量CAS实现线程安全](https://p0.meituan.net/travelcube/de0ced42337014947e7466db4d8f2d4d158395.png)\n\n图2 通过原子变量CAS实现线程安全\n\n如图所示，Thread1和Thread2都要把Entry加1。若不加锁，也不使用CAS，有可能Thread1取到了myValue=1，Thread2也取到了myValue=1，然后相加，Entry中的value值为2。这与预期不相符，我们预期的是Entry的值经过两次相加后等于3。\n\nCAS会先把Entry现在的value跟线程当初读出的值相比较，若相同，则赋值；若不相同，则赋值执行失败。一般会通过while/for循环来重新执行，直到赋值成功。\n\n代码示例是AtomicInteger的getAndAdd方法。CAS是CPU的一个指令，由CPU保证原子性。\n\n```\n/**\n * Atomically adds the given value to the current value.\n *\n * @param delta the value to add\n * @return the previous value\n */\npublic final int getAndAdd(int delta) {\n    for (;;) {\n        int current = get();\n        int next = current + delta;\n        if (compareAndSet(current, next))\n            return current;\n    }\n}\n  \n/**\n * Atomically sets the value to the given updated value\n * if the current value {@code ==} the expected value.\n *\n * @param expect the expected value\n * @param update the new value\n * @return true if successful. False return indicates that\n * the actual value was not equal to the expected value.\n */\npublic final boolean compareAndSet(int expect, int update) {\n    return unsafe.compareAndSwapInt(this, valueOffset, expect, update);\n} \n```\n\n在高度竞争的情况下，锁的性能将超过原子变量的性能，但是更真实的竞争情况下，原子变量的性能将超过锁的性能。同时原子变量不会有死锁等活跃性问题。\n\n### 伪共享\n\n**什么是共享**\n\n下图是计算的基本结构。L1、L2、L3分别表示一级缓存、二级缓存、三级缓存，越靠近CPU的缓存，速度越快，容量也越小。所以L1缓存很小但很快，并且紧靠着在使用它的CPU内核；L2大一些，也慢一些，并且仍然只能被一个单独的CPU核使用；L3更大、更慢，并且被单个插槽上的所有CPU核共享；最后是主存，由全部插槽上的所有CPU核共享。\n\n![图3 计算机CPU与缓存示意图](https://p1.meituan.net/travelcube/69ce8ffbe7a4ebee01c377dac174842d433755.png)\n\n图3 计算机CPU与缓存示意图\n\n当CPU执行运算的时候，它先去L1查找所需的数据、再去L2、然后是L3，如果最后这些缓存中都没有，所需的数据就要去主内存拿。走得越远，运算耗费的时间就越长。所以如果你在做一些很频繁的事，你要尽量确保数据在L1缓存中。\n\n另外，线程之间共享一份数据的时候，需要一个线程把数据写回主存，而另一个线程访问主存中相应的数据。\n\n下面是从CPU访问不同层级数据的时间概念:\n\n| 从CPU到                                  | 大约需要的CPU周期 | 大约需要的时间 |\n| ---------------------------------------- | ----------------- | -------------- |\n| 主存                                     | -                 | 约60-80ns      |\n| QPI 总线传输(between sockets, not drawn) | -                 | 约20ns         |\n| L3 cache                                 | 约40-45 cycles    | 约15ns         |\n| L2 cache                                 | 约10 cycles       | 约3ns          |\n| L1 cache                                 | 约3-4 cycles      | 约1ns          |\n| 寄存器                                   | 1 cycle           | -              |\n\n可见CPU读取主存中的数据会比从L1中读取慢了近2个数量级。\n\n**缓存行**\n\nCache是由很多个cache line组成的。每个cache line通常是64字节，并且它有效地引用主内存中的一块儿地址。一个Java的long类型变量是8字节，因此在一个缓存行中可以存8个long类型的变量。\n\nCPU每次从主存中拉取数据时，会把相邻的数据也存入同一个cache line。\n\n在访问一个long数组的时候，如果数组中的一个值被加载到缓存中，它会自动加载另外7个。因此你能非常快的遍历这个数组。事实上，你可以非常快速的遍历在连续内存块中分配的任意数据结构。\n\n下面的例子是测试利用cache line的特性和不利用cache line的特性的效果对比。\n\n```\npackage com.meituan.FalseSharing;\n \n/**\n * @author gongming\n * @description\n * @date 16/6/4\n */\npublic class CacheLineEffect {\n    //考虑一般缓存行大小是64字节，一个 long 类型占8字节\n    static  long[][] arr;\n \n    public static void main(String[] args) {\n        arr = new long[1024 * 1024][];\n        for (int i = 0; i < 1024 * 1024; i++) {\n            arr[i] = new long[8];\n            for (int j = 0; j < 8; j++) {\n                arr[i][j] = 0L;\n            }\n        }\n        long sum = 0L;\n        long marked = System.currentTimeMillis();\n        for (int i = 0; i < 1024 * 1024; i+=1) {\n            for(int j =0; j< 8;j++){\n                sum = arr[i][j];\n            }\n        }\n        System.out.println(\"Loop times:\" + (System.currentTimeMillis() - marked) + \"ms\");\n \n        marked = System.currentTimeMillis();\n        for (int i = 0; i < 8; i+=1) {\n            for(int j =0; j< 1024 * 1024;j++){\n                sum = arr[j][i];\n            }\n        }\n        System.out.println(\"Loop times:\" + (System.currentTimeMillis() - marked) + \"ms\");\n    }\n}\n```\n\n在2G Hz、2核、8G内存的运行环境中测试，速度差一倍。\n\n结果：\n\nLoop times:30ms Loop times:65ms\n\n**什么是伪共享**\n\nArrayBlockingQueue有三个成员变量： - takeIndex：需要被取走的元素下标 - putIndex：可被元素插入的位置的下标 - count：队列中元素的数量\n\n这三个变量很容易放到一个缓存行中，但是之间修改没有太多的关联。所以每次修改，都会使之前缓存的数据失效，从而不能完全达到共享的效果。\n\n![图4 ArrayBlockingQueue伪共享示意图](https://p0.meituan.net/travelcube/192e9b87b7a5b68cac352fdeb81dc93b161543.png)\n\n图4 ArrayBlockingQueue伪共享示意图\n\n如上图所示，当生产者线程put一个元素到ArrayBlockingQueue时，putIndex会修改，从而导致消费者线程的缓存中的缓存行无效，需要从主存中重新读取。\n\n这种无法充分使用缓存行特性的现象，称为伪共享。\n\n对于伪共享，一般的解决方案是，增大数组元素的间隔使得由不同线程存取的元素位于不同的缓存行上，以空间换时间。\n\n```\npackage com.meituan.FalseSharing;\n \npublic class FalseSharing implements Runnable{\n        public final static long ITERATIONS = 500L * 1000L * 100L;\n        private int arrayIndex = 0;\n \n        private static ValuePadding[] longs;\n        public FalseSharing(final int arrayIndex) {\n            this.arrayIndex = arrayIndex;\n        }\n \n        public static void main(final String[] args) throws Exception {\n            for(int i=1;i<10;i++){\n                System.gc();\n                final long start = System.currentTimeMillis();\n                runTest(i);\n                System.out.println(\"Thread num \"+i+\" duration = \" + (System.currentTimeMillis() - start));\n            }\n \n        }\n \n        private static void runTest(int NUM_THREADS) throws InterruptedException {\n            Thread[] threads = new Thread[NUM_THREADS];\n            longs = new ValuePadding[NUM_THREADS];\n            for (int i = 0; i < longs.length; i++) {\n                longs[i] = new ValuePadding();\n            }\n            for (int i = 0; i < threads.length; i++) {\n                threads[i] = new Thread(new FalseSharing(i));\n            }\n \n            for (Thread t : threads) {\n                t.start();\n            }\n \n            for (Thread t : threads) {\n                t.join();\n            }\n        }\n \n        public void run() {\n            long i = ITERATIONS + 1;\n            while (0 != --i) {\n                longs[arrayIndex].value = 0L;\n            }\n        }\n \n        public final static class ValuePadding {\n            protected long p1, p2, p3, p4, p5, p6, p7;\n            protected volatile long value = 0L;\n            protected long p9, p10, p11, p12, p13, p14;\n            protected long p15;\n        }\n        public final static class ValueNoPadding {\n            // protected long p1, p2, p3, p4, p5, p6, p7;\n            protected volatile long value = 0L;\n            // protected long p9, p10, p11, p12, p13, p14, p15;\n        }\n}\n```\n\n在2G Hz，2核，8G内存, jdk 1.7.0_45 的运行环境下，使用了共享机制比没有使用共享机制，速度快了4倍左右。\n\n结果：\n\n- Thread num 1 duration = 447\n- Thread num 2 duration = 463\n- Thread num 3 duration = 454\n- Thread num 4 duration = 464\n- Thread num 5 duration = 561\n- Thread num 6 duration = 606\n- Thread num 7 duration = 684\n- Thread num 8 duration = 870\n- Thread num 9 duration = 823\n\n把代码中ValuePadding都替换为ValueNoPadding后的结果：\n\n- Thread num 1 duration = 446\n- Thread num 2 duration = 2549\n- Thread num 3 duration = 2898\n- Thread num 4 duration = 3931\n- Thread num 5 duration = 4716\n- Thread num 6 duration = 5424\n- Thread num 7 duration = 4868\n- Thread num 8 duration = 4595\n- Thread num 9 duration = 4540\n\n备注：在jdk1.8中，有专门的注解@Contended来避免伪共享，更优雅地解决问题。\n\n## Disruptor的设计方案\n\nDisruptor通过以下设计来解决队列速度慢的问题：\n\n- 环形数组结构\n\n为了避免垃圾回收，采用数组而非链表。同时，数组对处理器的缓存机制更加友好。\n\n- 元素位置定位\n\n数组长度2^n，通过位运算，加快定位的速度。下标采取递增的形式。不用担心index溢出的问题。index是long类型，即使100万QPS的处理速度，也需要30万年才能用完。\n\n- 无锁设计\n\n每个生产者或者消费者线程，会先申请可以操作的元素在数组中的位置，申请到之后，直接在该位置写入或者读取数据。\n\n下面忽略数组的环形结构，介绍一下如何实现无锁设计。整个过程通过原子变量CAS，保证操作的线程安全。\n\n### 一个生产者\n\n**写数据**\n\n生产者单线程写数据的流程比较简单：\n\n1. 申请写入m个元素；\n2. 若是有m个元素可以入，则返回最大的序列号。这儿主要判断是否会覆盖未读的元素；\n3. 若是返回的正确，则生产者开始写入元素。\n\n![图5 单个生产者生产过程示意图](https://p1.meituan.net/travelcube/e71c1449273361ec413fffc7b0bf5507208689.png)\n\n图5 单个生产者生产过程示意图\n\n## 多个生产者\n\n多个生产者的情况下，会遇到“如何防止多个线程重复写同一个元素”的问题。Disruptor的解决方法是，每个线程获取不同的一段数组空间进行操作。这个通过CAS很容易达到。只需要在分配元素的时候，通过CAS判断一下这段空间是否已经分配出去即可。\n\n但是会遇到一个新问题：如何防止读取的时候，读到还未写的元素。Disruptor在多个生产者的情况下，引入了一个与Ring Buffer大小相同的buffer：available Buffer。当某个位置写入成功的时候，便把availble Buffer相应的位置置位，标记为写入成功。读取的时候，会遍历available Buffer，来判断元素是否已经就绪。\n\n下面分读数据和写数据两种情况介绍。\n\n### 读数据\n\n生产者多线程写入的情况会复杂很多：\n\n1. 申请读取到序号n；\n2. 若writer cursor >= n，这时仍然无法确定连续可读的最大下标。从reader cursor开始读取available Buffer，一直查到第一个不可用的元素，然后返回最大连续可读元素的位置；\n3. 消费者读取元素。\n\n如下图所示，读线程读到下标为2的元素，三个线程Writer1/Writer2/Writer3正在向RingBuffer相应位置写数据，写线程被分配到的最大元素下标是11。\n\n读线程申请读取到下标从3到11的元素，判断writer cursor>=11。然后开始读取availableBuffer，从3开始，往后读取，发现下标为7的元素没有生产成功，于是WaitFor(11)返回6。\n\n然后，消费者读取下标从3到6共计4个元素。\n\n![图6 多个生产者情况下，消费者消费过程示意图](https://p0.meituan.net/travelcube/99c603494ea90c9535e165579daf340a161527.png)\n\n图6 多个生产者情况下，消费者消费过程示意图\n\n### 写数据\n\n多个生产者写入的时候：\n\n1. 申请写入m个元素；\n2. 若是有m个元素可以写入，则返回最大的序列号。每个生产者会被分配一段独享的空间；\n3. 生产者写入元素，写入元素的同时设置available Buffer里面相应的位置，以标记自己哪些位置是已经写入成功的。\n\n如下图所示，Writer1和Writer2两个线程写入数组，都申请可写的数组空间。Writer1被分配了下标3到下表5的空间，Writer2被分配了下标6到下标9的空间。\n\nWriter1写入下标3位置的元素，同时把available Buffer相应位置置位，标记已经写入成功，往后移一位，开始写下标4位置的元素。Writer2同样的方式。最终都写入完成。\n\n![图7 多个生产者情况下，生产者生产过程示意图](https://p1.meituan.net/travelcube/5e06841b1bba4dcf1d3fac169734ba36133983.png)\n\n图7 多个生产者情况下，生产者生产过程示意图\n\n防止不同生产者对同一段空间写入的代码，如下所示：\n\n```\npublic long tryNext(int n) throws InsufficientCapacityException\n{\n    if (n < 1)\n    {\n        throw new IllegalArgumentException(\"n must be > 0\");\n    }\n \n    long current;\n    long next;\n \n    do\n    {\n        current = cursor.get();\n        next = current + n;\n \n        if (!hasAvailableCapacity(gatingSequences, n, current))\n        {\n            throw InsufficientCapacityException.INSTANCE;\n        }\n    }\n    while (!cursor.compareAndSet(current, next));\n \n    return next;\n}\n```\n\n通过do/while循环的条件cursor.compareAndSet(current, next)，来判断每次申请的空间是否已经被其他生产者占据。假如已经被占据，该函数会返回失败，While循环重新执行，申请写入空间。\n\n消费者的流程与生产者非常类似，这儿就不多描述了。\n\n### 总结\n\nDisruptor通过精巧的无锁设计实现了在高并发情形下的高性能。\n\n在美团内部，很多高并发场景借鉴了Disruptor的设计，减少竞争的强度。其设计思想可以扩展到分布式场景，通过无锁设计，来提升服务性能。\n\n使用Disruptor比使用ArrayBlockingQueue略微复杂，为方便读者上手，增加代码样例。\n\n代码实现的功能：每10ms向disruptor中插入一个元素，消费者读取数据，并打印到终端。详细逻辑请细读代码。\n\n以下代码基于3.3.4版本的Disruptor包。\n\n```\npackage com.meituan.Disruptor;\n\n/**\n * @description disruptor代码样例。每10ms向disruptor中插入一个元素，消费者读取数据，并打印到终端\n */\nimport com.lmax.disruptor.*;\nimport com.lmax.disruptor.dsl.Disruptor;\nimport com.lmax.disruptor.dsl.ProducerType;\n\nimport java.util.concurrent.ThreadFactory;\n\n\npublic class DisruptorMain\n{\n    public static void main(String[] args) throws Exception\n    {\n        // 队列中的元素\n        class Element {\n\n            private int value;\n\n            public int get(){\n                return value;\n            }\n\n            public void set(int value){\n                this.value= value;\n            }\n\n        }\n\n        // 生产者的线程工厂\n        ThreadFactory threadFactory = new ThreadFactory(){\n            @Override\n            public Thread newThread(Runnable r) {\n                return new Thread(r, \"simpleThread\");\n            }\n        };\n\n        // RingBuffer生产工厂,初始化RingBuffer的时候使用\n        EventFactory<Element> factory = new EventFactory<Element>() {\n            @Override\n            public Element newInstance() {\n                return new Element();\n            }\n        };\n\n        // 处理Event的handler\n        EventHandler<Element> handler = new EventHandler<Element>(){\n            @Override\n            public void onEvent(Element element, long sequence, boolean endOfBatch)\n            {\n                System.out.println(\"Element: \" + element.get());\n            }\n        };\n\n        // 阻塞策略\n        BlockingWaitStrategy strategy = new BlockingWaitStrategy();\n\n        // 指定RingBuffer的大小\n        int bufferSize = 16;\n\n        // 创建disruptor，采用单生产者模式\n        Disruptor<Element> disruptor = new Disruptor(factory, bufferSize, threadFactory, ProducerType.SINGLE, strategy);\n\n        // 设置EventHandler\n        disruptor.handleEventsWith(handler);\n\n        // 启动disruptor的线程\n        disruptor.start();\n\n        RingBuffer<Element> ringBuffer = disruptor.getRingBuffer();\n\n        for (int l = 0; true; l++)\n        {\n            // 获取下一个可用位置的下标\n            long sequence = ringBuffer.next();  \n            try\n            {\n                // 返回可用位置的元素\n                Element event = ringBuffer.get(sequence); \n                // 设置该位置元素的值\n                event.set(l); \n            }\n            finally\n            {\n                ringBuffer.publish(sequence);\n            }\n            Thread.sleep(10);\n        }\n    }\n}\n```\n\n## 性能\n\n以下面这些模式测试性能:\n\n![img](https://p1.meituan.net/travelcube/ada37da4ad62709ab67d7a32147cb19a306409.png)\n\n吞吐量测试数据（每秒的数量）如下。\n\n环境： - CPU:Intel Core i7 860 @ 2.8 GHz without HT - JVM:Java 1.6.0_25 64-bit - OS:Windows 7\n\n| -                  | ABQ       | Disruptor  |\n| ------------------ | --------- | ---------- |\n| Unicast: 1P – 1C   | 5,339,256 | 25,998,336 |\n| Pipeline: 1P – 3C  | 2,128,918 | 16,806,157 |\n| Sequencer: 3P – 1C | 5,539,531 | 13,403,268 |\n| Multicast: 1P – 3C | 1,077,384 | 9,377,871  |\n| Diamond: 1P – 3C   | 2,113,941 | 16,143,613 |\n\n环境：\n\n- CPU:Intel Core i7-2720QM\n- JVM:Java 1.6.0_25 64-bit\n- OS:Ubuntu 11.04\n\n| -                  | ABQ       | Disruptor  |\n| ------------------ | --------- | ---------- |\n| Unicast: 1P – 1C   | 4,057,453 | 22,381,378 |\n| Pipeline: 1P – 3C  | 2,006,903 | 15,857,913 |\n| Sequencer: 3P – 1C | 2,056,118 | 14,540,519 |\n| Multicast: 1P – 3C | 260,733   | 10,860,121 |\n| Diamond: 1P – 3C   | 2,082,725 | 15,295,197 |\n\n依据并发竞争的激烈程度的不同，Disruptor比ArrayBlockingQueue吞吐量快4~7倍。\n\n按照Pipeline: 1P – 3C的连接模式测试延迟，生产者两次写入之间的延迟为1ms。\n\n运行环境：\n\n- CPU:2.2GHz Core i7-2720QM\n- Java: 1.6.0_25 64-bit\n- OS:Ubuntu 11.04.\n\n| -                             | Array Blocking Queue (ns) | Disruptor (ns) |\n| ----------------------------- | ------------------------- | -------------- |\n| 99% observations less than    | 2,097,152                 | 128            |\n| 99.99% observations less than | 4,194,304                 | 8,192          |\n| Max Latency                   | 5,069,086                 | 175,567        |\n| Mean Latency                  | 32,757                    | 52             |\n| Min Latency                   | 145                       | 29             |\n\n可见，平均延迟差了3个数量级。\n\n## 等待策略\n\n### 生产者的等待策略\n\n暂时只有休眠1ns。\n\n```\nLockSupport.parkNanos(1);\n```\n\n### 消费者的等待策略\n\n| 名称                        | 措施                      | 适用场景                                                     |\n| --------------------------- | ------------------------- | ------------------------------------------------------------ |\n| BlockingWaitStrategy        | 加锁                      | CPU资源紧缺，吞吐量和延迟并不重要的场景                      |\n| BusySpinWaitStrategy        | 自旋                      | 通过不断重试，减少切换线程导致的系统调用，而降低延迟。推荐在线程绑定到固定的CPU的场景下使用 |\n| PhasedBackoffWaitStrategy   | 自旋 + yield + 自定义策略 | CPU资源紧缺，吞吐量和延迟并不重要的场景                      |\n| SleepingWaitStrategy        | 自旋 + yield + sleep      | 性能和CPU资源之间有很好的折中。延迟不均匀                    |\n| TimeoutBlockingWaitStrategy | 加锁，有超时限制          | CPU资源紧缺，吞吐量和延迟并不重要的场景                      |\n| YieldingWaitStrategy        | 自旋 + yield + 自旋       | 性能和CPU资源之间有很好的折中。延迟比较均匀                  |\n\n## Log4j 2应用场景\n\nLog4j 2相对于Log4j 1最大的优势在于多线程并发场景下性能更优。该特性源自于Log4j 2的异步模式采用了Disruptor来处理。 在Log4j 2的配置文件中可以配置WaitStrategy，默认是Timeout策略。下面是Log4j 2中对WaitStrategy的配置官方文档：\n\n| System Property          | Default Value | Description                                                  |\n| ------------------------ | ------------- | ------------------------------------------------------------ |\n| AsyncLogger.WaitStrategy | Timeout       | Valid values: Block, Timeout, Sleep, Yield. Block is a strategy that uses a lock and condition variable for the I/O thread waiting for log events. Block can be used when throughput and low-latency are not as important as CPU resource. Recommended for resource constrained/virtualised environments. Timeout is a variation of the Block strategy that will periodically wake up from the lock condition await() call. This ensures that if a notification is missed somehow the consumer thread is not stuck but will recover with a small latency delay (default 10ms). Sleep is a strategy that initially spins, then uses a Thread.yield(), and eventually parks for the minimum number of nanos the OS and JVM will allow while the I/O thread is waiting for log events. Sleep is a good compromise between performance and CPU resource. This strategy has very low impact on the application thread, in exchange for some additional latency for actually getting the message logged. Yield is a strategy that uses a Thread.yield() for waiting for log events after an initially spinning. Yield is a good compromise between performance and CPU resource, but may use more CPU than Sleep in order to get the message logged to disk sooner. |\n\n### 性能差异\n\nloggers all async采用的是Disruptor，而Async Appender采用的是ArrayBlockingQueue队列。\n\n由图可见，单线程情况下，loggers all async与Async Appender吞吐量相差不大，但是在64个线程的时候，loggers all async的吞吐量比Async Appender增加了12倍，是Sync模式的68倍。\n\n![图8 Log4j 2各个模式性能比较](https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/ad04b8bd.png)\n\n图8 Log4j 2各个模式性能比较\n\n美团在公司内部统一推行日志接入规范，要求必须使用Log4j 2，使普通单机QPS的上限不再只停留在几千，极高地提升了服务性能。\n\n## 参考文档\n\n1. <http://brokendreams.iteye.com/blog/2255720>\n2. <http://ifeve.com/dissecting-disruptor-whats-so-special/>\n3. <https://github.com/LMAX-Exchange/disruptor/wiki/Performance-Results>\n4. <https://lmax-exchange.github.io/disruptor/>\n5. <https://logging.apache.org/log4j/2.x/manual/async.html>","source":"_posts/java/disruptor.md","raw":"---\ntitle: disruptor\ntags:\n  - java\n  - collection\n  - disruptor\n  - 队列\ncategories:\n  - java\n  - collection\n  - queue\n  - disruptor\ndate: 2020-04-27 15:34:37\n---\n## 背景\n\nDisruptor是英国外汇交易公司LMAX开发的一个高性能队列，研发的初衷是解决内存队列的延迟问题（在性能测试中发现竟然与I/O操作处于同样的数量级）。基于Disruptor开发的系统单线程能支撑每秒600万订单，2010年在QCon演讲后，获得了业界关注。2011年，企业应用软件专家Martin Fowler专门撰写长文介绍。同年它还获得了Oracle官方的Duke大奖。\n\n目前，包括Apache Storm、Camel、Log4j 2在内的很多知名项目都应用了Disruptor以获取高性能。在美团技术团队它也有不少应用，有的项目架构借鉴了它的设计机制。本文从实战角度剖析了Disruptor的实现原理。\n\n需要特别指出的是，这里所说的队列是系统内部的内存队列，而不是Kafka这样的分布式队列。另外，本文所描述的Disruptor特性限于3.3.4。\n\n## Java内置队列\n\n介绍Disruptor之前，我们先来看一看常用的线程安全的内置队列有什么问题。Java的内置队列如下表所示。\n\n| 队列                  | 有界性             | 锁   | 数据结构   |\n| --------------------- | ------------------ | ---- | ---------- |\n| ArrayBlockingQueue    | bounded            | 加锁 | arraylist  |\n| LinkedBlockingQueue   | optionally-bounded | 加锁 | linkedlist |\n| ConcurrentLinkedQueue | unbounded          | 无锁 | linkedlist |\n| LinkedTransferQueue   | unbounded          | 无锁 | linkedlist |\n| PriorityBlockingQueue | unbounded          | 加锁 | heap       |\n| DelayQueue            | unbounded          | 加锁 | heap       |\n\n队列的底层一般分成三种：数组、链表和堆。其中，堆一般情况下是为了实现带有优先级特性的队列，暂且不考虑。\n\n我们就从数组和链表两种数据结构来看，基于数组线程安全的队列，比较典型的是ArrayBlockingQueue，它主要通过加锁的方式来保证线程安全；基于链表的线程安全队列分成LinkedBlockingQueue和ConcurrentLinkedQueue两大类，前者也通过锁的方式来实现线程安全，而后者以及上面表格中的LinkedTransferQueue都是通过原子变量compare and swap（以下简称“CAS”）这种不加锁的方式来实现的。\n\n通过不加锁的方式实现的队列都是无界的（无法保证队列的长度在确定的范围内）；而加锁的方式，可以实现有界队列。在稳定性要求特别高的系统中，为了防止生产者速度过快，导致内存溢出，只能选择有界队列；同时，为了减少Java的垃圾回收对系统性能的影响，会尽量选择array/heap格式的数据结构。这样筛选下来，符合条件的队列就只有ArrayBlockingQueue。\n\n## ArrayBlockingQueue的问题\n\nArrayBlockingQueue在实际使用过程中，会因为加锁和伪共享等出现严重的性能问题，我们下面来分析一下。\n\n### 加锁\n\n现实编程过程中，加锁通常会严重地影响性能。线程会因为竞争不到锁而被挂起，等锁被释放的时候，线程又会被恢复，这个过程中存在着很大的开销，并且通常会有较长时间的中断，因为当一个线程正在等待锁时，它不能做任何其他事情。如果一个线程在持有锁的情况下被延迟执行，例如发生了缺页错误、调度延迟或者其它类似情况，那么所有需要这个锁的线程都无法执行下去。如果被阻塞线程的优先级较高，而持有锁的线程优先级较低，就会发生优先级反转。\n\nDisruptor论文中讲述了一个实验：\n\n- 这个测试程序调用了一个函数，该函数会对一个64位的计数器循环自增5亿次。\n- 机器环境：2.4G 6核\n- 运算： 64位的计数器累加5亿次\n\n|Method | Time (ms) | |— | —| |Single thread | 300| |Single thread with CAS | 5,700| |Single thread with lock | 10,000| |Single thread with volatile write | 4,700| |Two threads with CAS | 30,000| |Two threads with lock | 224,000|\n\nCAS操作比单线程无锁慢了1个数量级；有锁且多线程并发的情况下，速度比单线程无锁慢3个数量级。可见无锁速度最快。\n\n单线程情况下，不加锁的性能 > CAS操作的性能 > 加锁的性能。\n\n在多线程情况下，为了保证线程安全，必须使用CAS或锁，这种情况下，CAS的性能超过锁的性能，前者大约是后者的8倍。\n\n综上可知，加锁的性能是最差的。\n\n**关于锁和CAS**\n\n保证线程安全一般分成两种方式：锁和原子变量。\n\n**锁**\n\n![图1 通过加锁的方式实现线程安全](https://p1.meituan.net/travelcube/9b6a41f7d8527df9730b7832b38ec4d5180025.png)\n\n图1 通过加锁的方式实现线程安全\n\n采取加锁的方式，默认线程会冲突，访问数据时，先加上锁再访问，访问之后再解锁。通过锁界定一个临界区，同时只有一个线程进入。如上图所示，Thread2访问Entry的时候，加了锁，Thread1就不能再执行访问Entry的代码，从而保证线程安全。\n\n下面是ArrayBlockingQueue通过加锁的方式实现的offer方法，保证线程安全。\n\n```\npublic boolean offer(E e) {\n    checkNotNull(e);\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        if (count == items.length)\n            return false;\n        else {\n            insert(e);\n            return true;\n        }\n    } finally {\n        lock.unlock();\n    }\n}\n```\n\n**原子变量**\n\n原子变量能够保证原子性的操作，意思是某个任务在执行过程中，要么全部成功，要么全部失败回滚，恢复到执行之前的初态，不存在初态和成功之间的中间状态。例如CAS操作，要么比较并交换成功，要么比较并交换失败。由CPU保证原子性。\n\n通过原子变量可以实现线程安全。执行某个任务的时候，先假定不会有冲突，若不发生冲突，则直接执行成功；当发生冲突的时候，则执行失败，回滚再重新操作，直到不发生冲突。\n\n![图2 通过原子变量CAS实现线程安全](https://p0.meituan.net/travelcube/de0ced42337014947e7466db4d8f2d4d158395.png)\n\n图2 通过原子变量CAS实现线程安全\n\n如图所示，Thread1和Thread2都要把Entry加1。若不加锁，也不使用CAS，有可能Thread1取到了myValue=1，Thread2也取到了myValue=1，然后相加，Entry中的value值为2。这与预期不相符，我们预期的是Entry的值经过两次相加后等于3。\n\nCAS会先把Entry现在的value跟线程当初读出的值相比较，若相同，则赋值；若不相同，则赋值执行失败。一般会通过while/for循环来重新执行，直到赋值成功。\n\n代码示例是AtomicInteger的getAndAdd方法。CAS是CPU的一个指令，由CPU保证原子性。\n\n```\n/**\n * Atomically adds the given value to the current value.\n *\n * @param delta the value to add\n * @return the previous value\n */\npublic final int getAndAdd(int delta) {\n    for (;;) {\n        int current = get();\n        int next = current + delta;\n        if (compareAndSet(current, next))\n            return current;\n    }\n}\n  \n/**\n * Atomically sets the value to the given updated value\n * if the current value {@code ==} the expected value.\n *\n * @param expect the expected value\n * @param update the new value\n * @return true if successful. False return indicates that\n * the actual value was not equal to the expected value.\n */\npublic final boolean compareAndSet(int expect, int update) {\n    return unsafe.compareAndSwapInt(this, valueOffset, expect, update);\n} \n```\n\n在高度竞争的情况下，锁的性能将超过原子变量的性能，但是更真实的竞争情况下，原子变量的性能将超过锁的性能。同时原子变量不会有死锁等活跃性问题。\n\n### 伪共享\n\n**什么是共享**\n\n下图是计算的基本结构。L1、L2、L3分别表示一级缓存、二级缓存、三级缓存，越靠近CPU的缓存，速度越快，容量也越小。所以L1缓存很小但很快，并且紧靠着在使用它的CPU内核；L2大一些，也慢一些，并且仍然只能被一个单独的CPU核使用；L3更大、更慢，并且被单个插槽上的所有CPU核共享；最后是主存，由全部插槽上的所有CPU核共享。\n\n![图3 计算机CPU与缓存示意图](https://p1.meituan.net/travelcube/69ce8ffbe7a4ebee01c377dac174842d433755.png)\n\n图3 计算机CPU与缓存示意图\n\n当CPU执行运算的时候，它先去L1查找所需的数据、再去L2、然后是L3，如果最后这些缓存中都没有，所需的数据就要去主内存拿。走得越远，运算耗费的时间就越长。所以如果你在做一些很频繁的事，你要尽量确保数据在L1缓存中。\n\n另外，线程之间共享一份数据的时候，需要一个线程把数据写回主存，而另一个线程访问主存中相应的数据。\n\n下面是从CPU访问不同层级数据的时间概念:\n\n| 从CPU到                                  | 大约需要的CPU周期 | 大约需要的时间 |\n| ---------------------------------------- | ----------------- | -------------- |\n| 主存                                     | -                 | 约60-80ns      |\n| QPI 总线传输(between sockets, not drawn) | -                 | 约20ns         |\n| L3 cache                                 | 约40-45 cycles    | 约15ns         |\n| L2 cache                                 | 约10 cycles       | 约3ns          |\n| L1 cache                                 | 约3-4 cycles      | 约1ns          |\n| 寄存器                                   | 1 cycle           | -              |\n\n可见CPU读取主存中的数据会比从L1中读取慢了近2个数量级。\n\n**缓存行**\n\nCache是由很多个cache line组成的。每个cache line通常是64字节，并且它有效地引用主内存中的一块儿地址。一个Java的long类型变量是8字节，因此在一个缓存行中可以存8个long类型的变量。\n\nCPU每次从主存中拉取数据时，会把相邻的数据也存入同一个cache line。\n\n在访问一个long数组的时候，如果数组中的一个值被加载到缓存中，它会自动加载另外7个。因此你能非常快的遍历这个数组。事实上，你可以非常快速的遍历在连续内存块中分配的任意数据结构。\n\n下面的例子是测试利用cache line的特性和不利用cache line的特性的效果对比。\n\n```\npackage com.meituan.FalseSharing;\n \n/**\n * @author gongming\n * @description\n * @date 16/6/4\n */\npublic class CacheLineEffect {\n    //考虑一般缓存行大小是64字节，一个 long 类型占8字节\n    static  long[][] arr;\n \n    public static void main(String[] args) {\n        arr = new long[1024 * 1024][];\n        for (int i = 0; i < 1024 * 1024; i++) {\n            arr[i] = new long[8];\n            for (int j = 0; j < 8; j++) {\n                arr[i][j] = 0L;\n            }\n        }\n        long sum = 0L;\n        long marked = System.currentTimeMillis();\n        for (int i = 0; i < 1024 * 1024; i+=1) {\n            for(int j =0; j< 8;j++){\n                sum = arr[i][j];\n            }\n        }\n        System.out.println(\"Loop times:\" + (System.currentTimeMillis() - marked) + \"ms\");\n \n        marked = System.currentTimeMillis();\n        for (int i = 0; i < 8; i+=1) {\n            for(int j =0; j< 1024 * 1024;j++){\n                sum = arr[j][i];\n            }\n        }\n        System.out.println(\"Loop times:\" + (System.currentTimeMillis() - marked) + \"ms\");\n    }\n}\n```\n\n在2G Hz、2核、8G内存的运行环境中测试，速度差一倍。\n\n结果：\n\nLoop times:30ms Loop times:65ms\n\n**什么是伪共享**\n\nArrayBlockingQueue有三个成员变量： - takeIndex：需要被取走的元素下标 - putIndex：可被元素插入的位置的下标 - count：队列中元素的数量\n\n这三个变量很容易放到一个缓存行中，但是之间修改没有太多的关联。所以每次修改，都会使之前缓存的数据失效，从而不能完全达到共享的效果。\n\n![图4 ArrayBlockingQueue伪共享示意图](https://p0.meituan.net/travelcube/192e9b87b7a5b68cac352fdeb81dc93b161543.png)\n\n图4 ArrayBlockingQueue伪共享示意图\n\n如上图所示，当生产者线程put一个元素到ArrayBlockingQueue时，putIndex会修改，从而导致消费者线程的缓存中的缓存行无效，需要从主存中重新读取。\n\n这种无法充分使用缓存行特性的现象，称为伪共享。\n\n对于伪共享，一般的解决方案是，增大数组元素的间隔使得由不同线程存取的元素位于不同的缓存行上，以空间换时间。\n\n```\npackage com.meituan.FalseSharing;\n \npublic class FalseSharing implements Runnable{\n        public final static long ITERATIONS = 500L * 1000L * 100L;\n        private int arrayIndex = 0;\n \n        private static ValuePadding[] longs;\n        public FalseSharing(final int arrayIndex) {\n            this.arrayIndex = arrayIndex;\n        }\n \n        public static void main(final String[] args) throws Exception {\n            for(int i=1;i<10;i++){\n                System.gc();\n                final long start = System.currentTimeMillis();\n                runTest(i);\n                System.out.println(\"Thread num \"+i+\" duration = \" + (System.currentTimeMillis() - start));\n            }\n \n        }\n \n        private static void runTest(int NUM_THREADS) throws InterruptedException {\n            Thread[] threads = new Thread[NUM_THREADS];\n            longs = new ValuePadding[NUM_THREADS];\n            for (int i = 0; i < longs.length; i++) {\n                longs[i] = new ValuePadding();\n            }\n            for (int i = 0; i < threads.length; i++) {\n                threads[i] = new Thread(new FalseSharing(i));\n            }\n \n            for (Thread t : threads) {\n                t.start();\n            }\n \n            for (Thread t : threads) {\n                t.join();\n            }\n        }\n \n        public void run() {\n            long i = ITERATIONS + 1;\n            while (0 != --i) {\n                longs[arrayIndex].value = 0L;\n            }\n        }\n \n        public final static class ValuePadding {\n            protected long p1, p2, p3, p4, p5, p6, p7;\n            protected volatile long value = 0L;\n            protected long p9, p10, p11, p12, p13, p14;\n            protected long p15;\n        }\n        public final static class ValueNoPadding {\n            // protected long p1, p2, p3, p4, p5, p6, p7;\n            protected volatile long value = 0L;\n            // protected long p9, p10, p11, p12, p13, p14, p15;\n        }\n}\n```\n\n在2G Hz，2核，8G内存, jdk 1.7.0_45 的运行环境下，使用了共享机制比没有使用共享机制，速度快了4倍左右。\n\n结果：\n\n- Thread num 1 duration = 447\n- Thread num 2 duration = 463\n- Thread num 3 duration = 454\n- Thread num 4 duration = 464\n- Thread num 5 duration = 561\n- Thread num 6 duration = 606\n- Thread num 7 duration = 684\n- Thread num 8 duration = 870\n- Thread num 9 duration = 823\n\n把代码中ValuePadding都替换为ValueNoPadding后的结果：\n\n- Thread num 1 duration = 446\n- Thread num 2 duration = 2549\n- Thread num 3 duration = 2898\n- Thread num 4 duration = 3931\n- Thread num 5 duration = 4716\n- Thread num 6 duration = 5424\n- Thread num 7 duration = 4868\n- Thread num 8 duration = 4595\n- Thread num 9 duration = 4540\n\n备注：在jdk1.8中，有专门的注解@Contended来避免伪共享，更优雅地解决问题。\n\n## Disruptor的设计方案\n\nDisruptor通过以下设计来解决队列速度慢的问题：\n\n- 环形数组结构\n\n为了避免垃圾回收，采用数组而非链表。同时，数组对处理器的缓存机制更加友好。\n\n- 元素位置定位\n\n数组长度2^n，通过位运算，加快定位的速度。下标采取递增的形式。不用担心index溢出的问题。index是long类型，即使100万QPS的处理速度，也需要30万年才能用完。\n\n- 无锁设计\n\n每个生产者或者消费者线程，会先申请可以操作的元素在数组中的位置，申请到之后，直接在该位置写入或者读取数据。\n\n下面忽略数组的环形结构，介绍一下如何实现无锁设计。整个过程通过原子变量CAS，保证操作的线程安全。\n\n### 一个生产者\n\n**写数据**\n\n生产者单线程写数据的流程比较简单：\n\n1. 申请写入m个元素；\n2. 若是有m个元素可以入，则返回最大的序列号。这儿主要判断是否会覆盖未读的元素；\n3. 若是返回的正确，则生产者开始写入元素。\n\n![图5 单个生产者生产过程示意图](https://p1.meituan.net/travelcube/e71c1449273361ec413fffc7b0bf5507208689.png)\n\n图5 单个生产者生产过程示意图\n\n## 多个生产者\n\n多个生产者的情况下，会遇到“如何防止多个线程重复写同一个元素”的问题。Disruptor的解决方法是，每个线程获取不同的一段数组空间进行操作。这个通过CAS很容易达到。只需要在分配元素的时候，通过CAS判断一下这段空间是否已经分配出去即可。\n\n但是会遇到一个新问题：如何防止读取的时候，读到还未写的元素。Disruptor在多个生产者的情况下，引入了一个与Ring Buffer大小相同的buffer：available Buffer。当某个位置写入成功的时候，便把availble Buffer相应的位置置位，标记为写入成功。读取的时候，会遍历available Buffer，来判断元素是否已经就绪。\n\n下面分读数据和写数据两种情况介绍。\n\n### 读数据\n\n生产者多线程写入的情况会复杂很多：\n\n1. 申请读取到序号n；\n2. 若writer cursor >= n，这时仍然无法确定连续可读的最大下标。从reader cursor开始读取available Buffer，一直查到第一个不可用的元素，然后返回最大连续可读元素的位置；\n3. 消费者读取元素。\n\n如下图所示，读线程读到下标为2的元素，三个线程Writer1/Writer2/Writer3正在向RingBuffer相应位置写数据，写线程被分配到的最大元素下标是11。\n\n读线程申请读取到下标从3到11的元素，判断writer cursor>=11。然后开始读取availableBuffer，从3开始，往后读取，发现下标为7的元素没有生产成功，于是WaitFor(11)返回6。\n\n然后，消费者读取下标从3到6共计4个元素。\n\n![图6 多个生产者情况下，消费者消费过程示意图](https://p0.meituan.net/travelcube/99c603494ea90c9535e165579daf340a161527.png)\n\n图6 多个生产者情况下，消费者消费过程示意图\n\n### 写数据\n\n多个生产者写入的时候：\n\n1. 申请写入m个元素；\n2. 若是有m个元素可以写入，则返回最大的序列号。每个生产者会被分配一段独享的空间；\n3. 生产者写入元素，写入元素的同时设置available Buffer里面相应的位置，以标记自己哪些位置是已经写入成功的。\n\n如下图所示，Writer1和Writer2两个线程写入数组，都申请可写的数组空间。Writer1被分配了下标3到下表5的空间，Writer2被分配了下标6到下标9的空间。\n\nWriter1写入下标3位置的元素，同时把available Buffer相应位置置位，标记已经写入成功，往后移一位，开始写下标4位置的元素。Writer2同样的方式。最终都写入完成。\n\n![图7 多个生产者情况下，生产者生产过程示意图](https://p1.meituan.net/travelcube/5e06841b1bba4dcf1d3fac169734ba36133983.png)\n\n图7 多个生产者情况下，生产者生产过程示意图\n\n防止不同生产者对同一段空间写入的代码，如下所示：\n\n```\npublic long tryNext(int n) throws InsufficientCapacityException\n{\n    if (n < 1)\n    {\n        throw new IllegalArgumentException(\"n must be > 0\");\n    }\n \n    long current;\n    long next;\n \n    do\n    {\n        current = cursor.get();\n        next = current + n;\n \n        if (!hasAvailableCapacity(gatingSequences, n, current))\n        {\n            throw InsufficientCapacityException.INSTANCE;\n        }\n    }\n    while (!cursor.compareAndSet(current, next));\n \n    return next;\n}\n```\n\n通过do/while循环的条件cursor.compareAndSet(current, next)，来判断每次申请的空间是否已经被其他生产者占据。假如已经被占据，该函数会返回失败，While循环重新执行，申请写入空间。\n\n消费者的流程与生产者非常类似，这儿就不多描述了。\n\n### 总结\n\nDisruptor通过精巧的无锁设计实现了在高并发情形下的高性能。\n\n在美团内部，很多高并发场景借鉴了Disruptor的设计，减少竞争的强度。其设计思想可以扩展到分布式场景，通过无锁设计，来提升服务性能。\n\n使用Disruptor比使用ArrayBlockingQueue略微复杂，为方便读者上手，增加代码样例。\n\n代码实现的功能：每10ms向disruptor中插入一个元素，消费者读取数据，并打印到终端。详细逻辑请细读代码。\n\n以下代码基于3.3.4版本的Disruptor包。\n\n```\npackage com.meituan.Disruptor;\n\n/**\n * @description disruptor代码样例。每10ms向disruptor中插入一个元素，消费者读取数据，并打印到终端\n */\nimport com.lmax.disruptor.*;\nimport com.lmax.disruptor.dsl.Disruptor;\nimport com.lmax.disruptor.dsl.ProducerType;\n\nimport java.util.concurrent.ThreadFactory;\n\n\npublic class DisruptorMain\n{\n    public static void main(String[] args) throws Exception\n    {\n        // 队列中的元素\n        class Element {\n\n            private int value;\n\n            public int get(){\n                return value;\n            }\n\n            public void set(int value){\n                this.value= value;\n            }\n\n        }\n\n        // 生产者的线程工厂\n        ThreadFactory threadFactory = new ThreadFactory(){\n            @Override\n            public Thread newThread(Runnable r) {\n                return new Thread(r, \"simpleThread\");\n            }\n        };\n\n        // RingBuffer生产工厂,初始化RingBuffer的时候使用\n        EventFactory<Element> factory = new EventFactory<Element>() {\n            @Override\n            public Element newInstance() {\n                return new Element();\n            }\n        };\n\n        // 处理Event的handler\n        EventHandler<Element> handler = new EventHandler<Element>(){\n            @Override\n            public void onEvent(Element element, long sequence, boolean endOfBatch)\n            {\n                System.out.println(\"Element: \" + element.get());\n            }\n        };\n\n        // 阻塞策略\n        BlockingWaitStrategy strategy = new BlockingWaitStrategy();\n\n        // 指定RingBuffer的大小\n        int bufferSize = 16;\n\n        // 创建disruptor，采用单生产者模式\n        Disruptor<Element> disruptor = new Disruptor(factory, bufferSize, threadFactory, ProducerType.SINGLE, strategy);\n\n        // 设置EventHandler\n        disruptor.handleEventsWith(handler);\n\n        // 启动disruptor的线程\n        disruptor.start();\n\n        RingBuffer<Element> ringBuffer = disruptor.getRingBuffer();\n\n        for (int l = 0; true; l++)\n        {\n            // 获取下一个可用位置的下标\n            long sequence = ringBuffer.next();  \n            try\n            {\n                // 返回可用位置的元素\n                Element event = ringBuffer.get(sequence); \n                // 设置该位置元素的值\n                event.set(l); \n            }\n            finally\n            {\n                ringBuffer.publish(sequence);\n            }\n            Thread.sleep(10);\n        }\n    }\n}\n```\n\n## 性能\n\n以下面这些模式测试性能:\n\n![img](https://p1.meituan.net/travelcube/ada37da4ad62709ab67d7a32147cb19a306409.png)\n\n吞吐量测试数据（每秒的数量）如下。\n\n环境： - CPU:Intel Core i7 860 @ 2.8 GHz without HT - JVM:Java 1.6.0_25 64-bit - OS:Windows 7\n\n| -                  | ABQ       | Disruptor  |\n| ------------------ | --------- | ---------- |\n| Unicast: 1P – 1C   | 5,339,256 | 25,998,336 |\n| Pipeline: 1P – 3C  | 2,128,918 | 16,806,157 |\n| Sequencer: 3P – 1C | 5,539,531 | 13,403,268 |\n| Multicast: 1P – 3C | 1,077,384 | 9,377,871  |\n| Diamond: 1P – 3C   | 2,113,941 | 16,143,613 |\n\n环境：\n\n- CPU:Intel Core i7-2720QM\n- JVM:Java 1.6.0_25 64-bit\n- OS:Ubuntu 11.04\n\n| -                  | ABQ       | Disruptor  |\n| ------------------ | --------- | ---------- |\n| Unicast: 1P – 1C   | 4,057,453 | 22,381,378 |\n| Pipeline: 1P – 3C  | 2,006,903 | 15,857,913 |\n| Sequencer: 3P – 1C | 2,056,118 | 14,540,519 |\n| Multicast: 1P – 3C | 260,733   | 10,860,121 |\n| Diamond: 1P – 3C   | 2,082,725 | 15,295,197 |\n\n依据并发竞争的激烈程度的不同，Disruptor比ArrayBlockingQueue吞吐量快4~7倍。\n\n按照Pipeline: 1P – 3C的连接模式测试延迟，生产者两次写入之间的延迟为1ms。\n\n运行环境：\n\n- CPU:2.2GHz Core i7-2720QM\n- Java: 1.6.0_25 64-bit\n- OS:Ubuntu 11.04.\n\n| -                             | Array Blocking Queue (ns) | Disruptor (ns) |\n| ----------------------------- | ------------------------- | -------------- |\n| 99% observations less than    | 2,097,152                 | 128            |\n| 99.99% observations less than | 4,194,304                 | 8,192          |\n| Max Latency                   | 5,069,086                 | 175,567        |\n| Mean Latency                  | 32,757                    | 52             |\n| Min Latency                   | 145                       | 29             |\n\n可见，平均延迟差了3个数量级。\n\n## 等待策略\n\n### 生产者的等待策略\n\n暂时只有休眠1ns。\n\n```\nLockSupport.parkNanos(1);\n```\n\n### 消费者的等待策略\n\n| 名称                        | 措施                      | 适用场景                                                     |\n| --------------------------- | ------------------------- | ------------------------------------------------------------ |\n| BlockingWaitStrategy        | 加锁                      | CPU资源紧缺，吞吐量和延迟并不重要的场景                      |\n| BusySpinWaitStrategy        | 自旋                      | 通过不断重试，减少切换线程导致的系统调用，而降低延迟。推荐在线程绑定到固定的CPU的场景下使用 |\n| PhasedBackoffWaitStrategy   | 自旋 + yield + 自定义策略 | CPU资源紧缺，吞吐量和延迟并不重要的场景                      |\n| SleepingWaitStrategy        | 自旋 + yield + sleep      | 性能和CPU资源之间有很好的折中。延迟不均匀                    |\n| TimeoutBlockingWaitStrategy | 加锁，有超时限制          | CPU资源紧缺，吞吐量和延迟并不重要的场景                      |\n| YieldingWaitStrategy        | 自旋 + yield + 自旋       | 性能和CPU资源之间有很好的折中。延迟比较均匀                  |\n\n## Log4j 2应用场景\n\nLog4j 2相对于Log4j 1最大的优势在于多线程并发场景下性能更优。该特性源自于Log4j 2的异步模式采用了Disruptor来处理。 在Log4j 2的配置文件中可以配置WaitStrategy，默认是Timeout策略。下面是Log4j 2中对WaitStrategy的配置官方文档：\n\n| System Property          | Default Value | Description                                                  |\n| ------------------------ | ------------- | ------------------------------------------------------------ |\n| AsyncLogger.WaitStrategy | Timeout       | Valid values: Block, Timeout, Sleep, Yield. Block is a strategy that uses a lock and condition variable for the I/O thread waiting for log events. Block can be used when throughput and low-latency are not as important as CPU resource. Recommended for resource constrained/virtualised environments. Timeout is a variation of the Block strategy that will periodically wake up from the lock condition await() call. This ensures that if a notification is missed somehow the consumer thread is not stuck but will recover with a small latency delay (default 10ms). Sleep is a strategy that initially spins, then uses a Thread.yield(), and eventually parks for the minimum number of nanos the OS and JVM will allow while the I/O thread is waiting for log events. Sleep is a good compromise between performance and CPU resource. This strategy has very low impact on the application thread, in exchange for some additional latency for actually getting the message logged. Yield is a strategy that uses a Thread.yield() for waiting for log events after an initially spinning. Yield is a good compromise between performance and CPU resource, but may use more CPU than Sleep in order to get the message logged to disk sooner. |\n\n### 性能差异\n\nloggers all async采用的是Disruptor，而Async Appender采用的是ArrayBlockingQueue队列。\n\n由图可见，单线程情况下，loggers all async与Async Appender吞吐量相差不大，但是在64个线程的时候，loggers all async的吞吐量比Async Appender增加了12倍，是Sync模式的68倍。\n\n![图8 Log4j 2各个模式性能比较](https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/ad04b8bd.png)\n\n图8 Log4j 2各个模式性能比较\n\n美团在公司内部统一推行日志接入规范，要求必须使用Log4j 2，使普通单机QPS的上限不再只停留在几千，极高地提升了服务性能。\n\n## 参考文档\n\n1. <http://brokendreams.iteye.com/blog/2255720>\n2. <http://ifeve.com/dissecting-disruptor-whats-so-special/>\n3. <https://github.com/LMAX-Exchange/disruptor/wiki/Performance-Results>\n4. <https://lmax-exchange.github.io/disruptor/>\n5. <https://logging.apache.org/log4j/2.x/manual/async.html>","slug":"java/disruptor","published":1,"updated":"2020-04-27T08:08:12.602Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmxn0051a4jaah1tfarj","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>Disruptor是英国外汇交易公司LMAX开发的一个高性能队列，研发的初衷是解决内存队列的延迟问题（在性能测试中发现竟然与I/O操作处于同样的数量级）。基于Disruptor开发的系统单线程能支撑每秒600万订单，2010年在QCon演讲后，获得了业界关注。2011年，企业应用软件专家Martin Fowler专门撰写长文介绍。同年它还获得了Oracle官方的Duke大奖。</p>\n<p>目前，包括Apache Storm、Camel、Log4j 2在内的很多知名项目都应用了Disruptor以获取高性能。在美团技术团队它也有不少应用，有的项目架构借鉴了它的设计机制。本文从实战角度剖析了Disruptor的实现原理。</p>\n<p>需要特别指出的是，这里所说的队列是系统内部的内存队列，而不是Kafka这样的分布式队列。另外，本文所描述的Disruptor特性限于3.3.4。</p>\n<h2 id=\"Java内置队列\"><a href=\"#Java内置队列\" class=\"headerlink\" title=\"Java内置队列\"></a>Java内置队列</h2><p>介绍Disruptor之前，我们先来看一看常用的线程安全的内置队列有什么问题。Java的内置队列如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>队列</th>\n<th>有界性</th>\n<th>锁</th>\n<th>数据结构</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ArrayBlockingQueue</td>\n<td>bounded</td>\n<td>加锁</td>\n<td>arraylist</td>\n</tr>\n<tr>\n<td>LinkedBlockingQueue</td>\n<td>optionally-bounded</td>\n<td>加锁</td>\n<td>linkedlist</td>\n</tr>\n<tr>\n<td>ConcurrentLinkedQueue</td>\n<td>unbounded</td>\n<td>无锁</td>\n<td>linkedlist</td>\n</tr>\n<tr>\n<td>LinkedTransferQueue</td>\n<td>unbounded</td>\n<td>无锁</td>\n<td>linkedlist</td>\n</tr>\n<tr>\n<td>PriorityBlockingQueue</td>\n<td>unbounded</td>\n<td>加锁</td>\n<td>heap</td>\n</tr>\n<tr>\n<td>DelayQueue</td>\n<td>unbounded</td>\n<td>加锁</td>\n<td>heap</td>\n</tr>\n</tbody></table>\n<p>队列的底层一般分成三种：数组、链表和堆。其中，堆一般情况下是为了实现带有优先级特性的队列，暂且不考虑。</p>\n<p>我们就从数组和链表两种数据结构来看，基于数组线程安全的队列，比较典型的是ArrayBlockingQueue，它主要通过加锁的方式来保证线程安全；基于链表的线程安全队列分成LinkedBlockingQueue和ConcurrentLinkedQueue两大类，前者也通过锁的方式来实现线程安全，而后者以及上面表格中的LinkedTransferQueue都是通过原子变量compare and swap（以下简称“CAS”）这种不加锁的方式来实现的。</p>\n<p>通过不加锁的方式实现的队列都是无界的（无法保证队列的长度在确定的范围内）；而加锁的方式，可以实现有界队列。在稳定性要求特别高的系统中，为了防止生产者速度过快，导致内存溢出，只能选择有界队列；同时，为了减少Java的垃圾回收对系统性能的影响，会尽量选择array/heap格式的数据结构。这样筛选下来，符合条件的队列就只有ArrayBlockingQueue。</p>\n<h2 id=\"ArrayBlockingQueue的问题\"><a href=\"#ArrayBlockingQueue的问题\" class=\"headerlink\" title=\"ArrayBlockingQueue的问题\"></a>ArrayBlockingQueue的问题</h2><p>ArrayBlockingQueue在实际使用过程中，会因为加锁和伪共享等出现严重的性能问题，我们下面来分析一下。</p>\n<h3 id=\"加锁\"><a href=\"#加锁\" class=\"headerlink\" title=\"加锁\"></a>加锁</h3><p>现实编程过程中，加锁通常会严重地影响性能。线程会因为竞争不到锁而被挂起，等锁被释放的时候，线程又会被恢复，这个过程中存在着很大的开销，并且通常会有较长时间的中断，因为当一个线程正在等待锁时，它不能做任何其他事情。如果一个线程在持有锁的情况下被延迟执行，例如发生了缺页错误、调度延迟或者其它类似情况，那么所有需要这个锁的线程都无法执行下去。如果被阻塞线程的优先级较高，而持有锁的线程优先级较低，就会发生优先级反转。</p>\n<p>Disruptor论文中讲述了一个实验：</p>\n<ul>\n<li>这个测试程序调用了一个函数，该函数会对一个64位的计数器循环自增5亿次。</li>\n<li>机器环境：2.4G 6核</li>\n<li>运算： 64位的计数器累加5亿次</li>\n</ul>\n<p>|Method | Time (ms) | |— | —| |Single thread | 300| |Single thread with CAS | 5,700| |Single thread with lock | 10,000| |Single thread with volatile write | 4,700| |Two threads with CAS | 30,000| |Two threads with lock | 224,000|</p>\n<p>CAS操作比单线程无锁慢了1个数量级；有锁且多线程并发的情况下，速度比单线程无锁慢3个数量级。可见无锁速度最快。</p>\n<p>单线程情况下，不加锁的性能 &gt; CAS操作的性能 &gt; 加锁的性能。</p>\n<p>在多线程情况下，为了保证线程安全，必须使用CAS或锁，这种情况下，CAS的性能超过锁的性能，前者大约是后者的8倍。</p>\n<p>综上可知，加锁的性能是最差的。</p>\n<p><strong>关于锁和CAS</strong></p>\n<p>保证线程安全一般分成两种方式：锁和原子变量。</p>\n<p><strong>锁</strong></p>\n<p><img src=\"https://p1.meituan.net/travelcube/9b6a41f7d8527df9730b7832b38ec4d5180025.png\" alt=\"图1 通过加锁的方式实现线程安全\"></p>\n<p>图1 通过加锁的方式实现线程安全</p>\n<p>采取加锁的方式，默认线程会冲突，访问数据时，先加上锁再访问，访问之后再解锁。通过锁界定一个临界区，同时只有一个线程进入。如上图所示，Thread2访问Entry的时候，加了锁，Thread1就不能再执行访问Entry的代码，从而保证线程安全。</p>\n<p>下面是ArrayBlockingQueue通过加锁的方式实现的offer方法，保证线程安全。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean offer(E e) &#123;</span><br><span class=\"line\">    checkNotNull(e);</span><br><span class=\"line\">    final ReentrantLock lock &#x3D; this.lock;</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        if (count &#x3D;&#x3D; items.length)</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            insert(e);</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>原子变量</strong></p>\n<p>原子变量能够保证原子性的操作，意思是某个任务在执行过程中，要么全部成功，要么全部失败回滚，恢复到执行之前的初态，不存在初态和成功之间的中间状态。例如CAS操作，要么比较并交换成功，要么比较并交换失败。由CPU保证原子性。</p>\n<p>通过原子变量可以实现线程安全。执行某个任务的时候，先假定不会有冲突，若不发生冲突，则直接执行成功；当发生冲突的时候，则执行失败，回滚再重新操作，直到不发生冲突。</p>\n<p><img src=\"https://p0.meituan.net/travelcube/de0ced42337014947e7466db4d8f2d4d158395.png\" alt=\"图2 通过原子变量CAS实现线程安全\"></p>\n<p>图2 通过原子变量CAS实现线程安全</p>\n<p>如图所示，Thread1和Thread2都要把Entry加1。若不加锁，也不使用CAS，有可能Thread1取到了myValue=1，Thread2也取到了myValue=1，然后相加，Entry中的value值为2。这与预期不相符，我们预期的是Entry的值经过两次相加后等于3。</p>\n<p>CAS会先把Entry现在的value跟线程当初读出的值相比较，若相同，则赋值；若不相同，则赋值执行失败。一般会通过while/for循环来重新执行，直到赋值成功。</p>\n<p>代码示例是AtomicInteger的getAndAdd方法。CAS是CPU的一个指令，由CPU保证原子性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * Atomically adds the given value to the current value.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param delta the value to add</span><br><span class=\"line\"> * @return the previous value</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public final int getAndAdd(int delta) &#123;</span><br><span class=\"line\">    for (;;) &#123;</span><br><span class=\"line\">        int current &#x3D; get();</span><br><span class=\"line\">        int next &#x3D; current + delta;</span><br><span class=\"line\">        if (compareAndSet(current, next))</span><br><span class=\"line\">            return current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * Atomically sets the value to the given updated value</span><br><span class=\"line\"> * if the current value &#123;@code &#x3D;&#x3D;&#125; the expected value.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param expect the expected value</span><br><span class=\"line\"> * @param update the new value</span><br><span class=\"line\"> * @return true if successful. False return indicates that</span><br><span class=\"line\"> * the actual value was not equal to the expected value.</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public final boolean compareAndSet(int expect, int update) &#123;</span><br><span class=\"line\">    return unsafe.compareAndSwapInt(this, valueOffset, expect, update);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在高度竞争的情况下，锁的性能将超过原子变量的性能，但是更真实的竞争情况下，原子变量的性能将超过锁的性能。同时原子变量不会有死锁等活跃性问题。</p>\n<h3 id=\"伪共享\"><a href=\"#伪共享\" class=\"headerlink\" title=\"伪共享\"></a>伪共享</h3><p><strong>什么是共享</strong></p>\n<p>下图是计算的基本结构。L1、L2、L3分别表示一级缓存、二级缓存、三级缓存，越靠近CPU的缓存，速度越快，容量也越小。所以L1缓存很小但很快，并且紧靠着在使用它的CPU内核；L2大一些，也慢一些，并且仍然只能被一个单独的CPU核使用；L3更大、更慢，并且被单个插槽上的所有CPU核共享；最后是主存，由全部插槽上的所有CPU核共享。</p>\n<p><img src=\"https://p1.meituan.net/travelcube/69ce8ffbe7a4ebee01c377dac174842d433755.png\" alt=\"图3 计算机CPU与缓存示意图\"></p>\n<p>图3 计算机CPU与缓存示意图</p>\n<p>当CPU执行运算的时候，它先去L1查找所需的数据、再去L2、然后是L3，如果最后这些缓存中都没有，所需的数据就要去主内存拿。走得越远，运算耗费的时间就越长。所以如果你在做一些很频繁的事，你要尽量确保数据在L1缓存中。</p>\n<p>另外，线程之间共享一份数据的时候，需要一个线程把数据写回主存，而另一个线程访问主存中相应的数据。</p>\n<p>下面是从CPU访问不同层级数据的时间概念:</p>\n<table>\n<thead>\n<tr>\n<th>从CPU到</th>\n<th>大约需要的CPU周期</th>\n<th>大约需要的时间</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主存</td>\n<td>-</td>\n<td>约60-80ns</td>\n</tr>\n<tr>\n<td>QPI 总线传输(between sockets, not drawn)</td>\n<td>-</td>\n<td>约20ns</td>\n</tr>\n<tr>\n<td>L3 cache</td>\n<td>约40-45 cycles</td>\n<td>约15ns</td>\n</tr>\n<tr>\n<td>L2 cache</td>\n<td>约10 cycles</td>\n<td>约3ns</td>\n</tr>\n<tr>\n<td>L1 cache</td>\n<td>约3-4 cycles</td>\n<td>约1ns</td>\n</tr>\n<tr>\n<td>寄存器</td>\n<td>1 cycle</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<p>可见CPU读取主存中的数据会比从L1中读取慢了近2个数量级。</p>\n<p><strong>缓存行</strong></p>\n<p>Cache是由很多个cache line组成的。每个cache line通常是64字节，并且它有效地引用主内存中的一块儿地址。一个Java的long类型变量是8字节，因此在一个缓存行中可以存8个long类型的变量。</p>\n<p>CPU每次从主存中拉取数据时，会把相邻的数据也存入同一个cache line。</p>\n<p>在访问一个long数组的时候，如果数组中的一个值被加载到缓存中，它会自动加载另外7个。因此你能非常快的遍历这个数组。事实上，你可以非常快速的遍历在连续内存块中分配的任意数据结构。</p>\n<p>下面的例子是测试利用cache line的特性和不利用cache line的特性的效果对比。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.meituan.FalseSharing;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * @author gongming</span><br><span class=\"line\"> * @description</span><br><span class=\"line\"> * @date 16&#x2F;6&#x2F;4</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class CacheLineEffect &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;考虑一般缓存行大小是64字节，一个 long 类型占8字节</span><br><span class=\"line\">    static  long[][] arr;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        arr &#x3D; new long[1024 * 1024][];</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; 1024 * 1024; i++) &#123;</span><br><span class=\"line\">            arr[i] &#x3D; new long[8];</span><br><span class=\"line\">            for (int j &#x3D; 0; j &lt; 8; j++) &#123;</span><br><span class=\"line\">                arr[i][j] &#x3D; 0L;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long sum &#x3D; 0L;</span><br><span class=\"line\">        long marked &#x3D; System.currentTimeMillis();</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; 1024 * 1024; i+&#x3D;1) &#123;</span><br><span class=\"line\">            for(int j &#x3D;0; j&lt; 8;j++)&#123;</span><br><span class=\"line\">                sum &#x3D; arr[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(&quot;Loop times:&quot; + (System.currentTimeMillis() - marked) + &quot;ms&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">        marked &#x3D; System.currentTimeMillis();</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; 8; i+&#x3D;1) &#123;</span><br><span class=\"line\">            for(int j &#x3D;0; j&lt; 1024 * 1024;j++)&#123;</span><br><span class=\"line\">                sum &#x3D; arr[j][i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(&quot;Loop times:&quot; + (System.currentTimeMillis() - marked) + &quot;ms&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在2G Hz、2核、8G内存的运行环境中测试，速度差一倍。</p>\n<p>结果：</p>\n<p>Loop times:30ms Loop times:65ms</p>\n<p><strong>什么是伪共享</strong></p>\n<p>ArrayBlockingQueue有三个成员变量： - takeIndex：需要被取走的元素下标 - putIndex：可被元素插入的位置的下标 - count：队列中元素的数量</p>\n<p>这三个变量很容易放到一个缓存行中，但是之间修改没有太多的关联。所以每次修改，都会使之前缓存的数据失效，从而不能完全达到共享的效果。</p>\n<p><img src=\"https://p0.meituan.net/travelcube/192e9b87b7a5b68cac352fdeb81dc93b161543.png\" alt=\"图4 ArrayBlockingQueue伪共享示意图\"></p>\n<p>图4 ArrayBlockingQueue伪共享示意图</p>\n<p>如上图所示，当生产者线程put一个元素到ArrayBlockingQueue时，putIndex会修改，从而导致消费者线程的缓存中的缓存行无效，需要从主存中重新读取。</p>\n<p>这种无法充分使用缓存行特性的现象，称为伪共享。</p>\n<p>对于伪共享，一般的解决方案是，增大数组元素的间隔使得由不同线程存取的元素位于不同的缓存行上，以空间换时间。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.meituan.FalseSharing;</span><br><span class=\"line\"> </span><br><span class=\"line\">public class FalseSharing implements Runnable&#123;</span><br><span class=\"line\">        public final static long ITERATIONS &#x3D; 500L * 1000L * 100L;</span><br><span class=\"line\">        private int arrayIndex &#x3D; 0;</span><br><span class=\"line\"> </span><br><span class=\"line\">        private static ValuePadding[] longs;</span><br><span class=\"line\">        public FalseSharing(final int arrayIndex) &#123;</span><br><span class=\"line\">            this.arrayIndex &#x3D; arrayIndex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        public static void main(final String[] args) throws Exception &#123;</span><br><span class=\"line\">            for(int i&#x3D;1;i&lt;10;i++)&#123;</span><br><span class=\"line\">                System.gc();</span><br><span class=\"line\">                final long start &#x3D; System.currentTimeMillis();</span><br><span class=\"line\">                runTest(i);</span><br><span class=\"line\">                System.out.println(&quot;Thread num &quot;+i+&quot; duration &#x3D; &quot; + (System.currentTimeMillis() - start));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        private static void runTest(int NUM_THREADS) throws InterruptedException &#123;</span><br><span class=\"line\">            Thread[] threads &#x3D; new Thread[NUM_THREADS];</span><br><span class=\"line\">            longs &#x3D; new ValuePadding[NUM_THREADS];</span><br><span class=\"line\">            for (int i &#x3D; 0; i &lt; longs.length; i++) &#123;</span><br><span class=\"line\">                longs[i] &#x3D; new ValuePadding();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            for (int i &#x3D; 0; i &lt; threads.length; i++) &#123;</span><br><span class=\"line\">                threads[i] &#x3D; new Thread(new FalseSharing(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            for (Thread t : threads) &#123;</span><br><span class=\"line\">                t.start();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            for (Thread t : threads) &#123;</span><br><span class=\"line\">                t.join();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            long i &#x3D; ITERATIONS + 1;</span><br><span class=\"line\">            while (0 !&#x3D; --i) &#123;</span><br><span class=\"line\">                longs[arrayIndex].value &#x3D; 0L;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        public final static class ValuePadding &#123;</span><br><span class=\"line\">            protected long p1, p2, p3, p4, p5, p6, p7;</span><br><span class=\"line\">            protected volatile long value &#x3D; 0L;</span><br><span class=\"line\">            protected long p9, p10, p11, p12, p13, p14;</span><br><span class=\"line\">            protected long p15;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public final static class ValueNoPadding &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; protected long p1, p2, p3, p4, p5, p6, p7;</span><br><span class=\"line\">            protected volatile long value &#x3D; 0L;</span><br><span class=\"line\">            &#x2F;&#x2F; protected long p9, p10, p11, p12, p13, p14, p15;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在2G Hz，2核，8G内存, jdk 1.7.0_45 的运行环境下，使用了共享机制比没有使用共享机制，速度快了4倍左右。</p>\n<p>结果：</p>\n<ul>\n<li>Thread num 1 duration = 447</li>\n<li>Thread num 2 duration = 463</li>\n<li>Thread num 3 duration = 454</li>\n<li>Thread num 4 duration = 464</li>\n<li>Thread num 5 duration = 561</li>\n<li>Thread num 6 duration = 606</li>\n<li>Thread num 7 duration = 684</li>\n<li>Thread num 8 duration = 870</li>\n<li>Thread num 9 duration = 823</li>\n</ul>\n<p>把代码中ValuePadding都替换为ValueNoPadding后的结果：</p>\n<ul>\n<li>Thread num 1 duration = 446</li>\n<li>Thread num 2 duration = 2549</li>\n<li>Thread num 3 duration = 2898</li>\n<li>Thread num 4 duration = 3931</li>\n<li>Thread num 5 duration = 4716</li>\n<li>Thread num 6 duration = 5424</li>\n<li>Thread num 7 duration = 4868</li>\n<li>Thread num 8 duration = 4595</li>\n<li>Thread num 9 duration = 4540</li>\n</ul>\n<p>备注：在jdk1.8中，有专门的注解@Contended来避免伪共享，更优雅地解决问题。</p>\n<h2 id=\"Disruptor的设计方案\"><a href=\"#Disruptor的设计方案\" class=\"headerlink\" title=\"Disruptor的设计方案\"></a>Disruptor的设计方案</h2><p>Disruptor通过以下设计来解决队列速度慢的问题：</p>\n<ul>\n<li>环形数组结构</li>\n</ul>\n<p>为了避免垃圾回收，采用数组而非链表。同时，数组对处理器的缓存机制更加友好。</p>\n<ul>\n<li>元素位置定位</li>\n</ul>\n<p>数组长度2^n，通过位运算，加快定位的速度。下标采取递增的形式。不用担心index溢出的问题。index是long类型，即使100万QPS的处理速度，也需要30万年才能用完。</p>\n<ul>\n<li>无锁设计</li>\n</ul>\n<p>每个生产者或者消费者线程，会先申请可以操作的元素在数组中的位置，申请到之后，直接在该位置写入或者读取数据。</p>\n<p>下面忽略数组的环形结构，介绍一下如何实现无锁设计。整个过程通过原子变量CAS，保证操作的线程安全。</p>\n<h3 id=\"一个生产者\"><a href=\"#一个生产者\" class=\"headerlink\" title=\"一个生产者\"></a>一个生产者</h3><p><strong>写数据</strong></p>\n<p>生产者单线程写数据的流程比较简单：</p>\n<ol>\n<li>申请写入m个元素；</li>\n<li>若是有m个元素可以入，则返回最大的序列号。这儿主要判断是否会覆盖未读的元素；</li>\n<li>若是返回的正确，则生产者开始写入元素。</li>\n</ol>\n<p><img src=\"https://p1.meituan.net/travelcube/e71c1449273361ec413fffc7b0bf5507208689.png\" alt=\"图5 单个生产者生产过程示意图\"></p>\n<p>图5 单个生产者生产过程示意图</p>\n<h2 id=\"多个生产者\"><a href=\"#多个生产者\" class=\"headerlink\" title=\"多个生产者\"></a>多个生产者</h2><p>多个生产者的情况下，会遇到“如何防止多个线程重复写同一个元素”的问题。Disruptor的解决方法是，每个线程获取不同的一段数组空间进行操作。这个通过CAS很容易达到。只需要在分配元素的时候，通过CAS判断一下这段空间是否已经分配出去即可。</p>\n<p>但是会遇到一个新问题：如何防止读取的时候，读到还未写的元素。Disruptor在多个生产者的情况下，引入了一个与Ring Buffer大小相同的buffer：available Buffer。当某个位置写入成功的时候，便把availble Buffer相应的位置置位，标记为写入成功。读取的时候，会遍历available Buffer，来判断元素是否已经就绪。</p>\n<p>下面分读数据和写数据两种情况介绍。</p>\n<h3 id=\"读数据\"><a href=\"#读数据\" class=\"headerlink\" title=\"读数据\"></a>读数据</h3><p>生产者多线程写入的情况会复杂很多：</p>\n<ol>\n<li>申请读取到序号n；</li>\n<li>若writer cursor &gt;= n，这时仍然无法确定连续可读的最大下标。从reader cursor开始读取available Buffer，一直查到第一个不可用的元素，然后返回最大连续可读元素的位置；</li>\n<li>消费者读取元素。</li>\n</ol>\n<p>如下图所示，读线程读到下标为2的元素，三个线程Writer1/Writer2/Writer3正在向RingBuffer相应位置写数据，写线程被分配到的最大元素下标是11。</p>\n<p>读线程申请读取到下标从3到11的元素，判断writer cursor&gt;=11。然后开始读取availableBuffer，从3开始，往后读取，发现下标为7的元素没有生产成功，于是WaitFor(11)返回6。</p>\n<p>然后，消费者读取下标从3到6共计4个元素。</p>\n<p><img src=\"https://p0.meituan.net/travelcube/99c603494ea90c9535e165579daf340a161527.png\" alt=\"图6 多个生产者情况下，消费者消费过程示意图\"></p>\n<p>图6 多个生产者情况下，消费者消费过程示意图</p>\n<h3 id=\"写数据\"><a href=\"#写数据\" class=\"headerlink\" title=\"写数据\"></a>写数据</h3><p>多个生产者写入的时候：</p>\n<ol>\n<li>申请写入m个元素；</li>\n<li>若是有m个元素可以写入，则返回最大的序列号。每个生产者会被分配一段独享的空间；</li>\n<li>生产者写入元素，写入元素的同时设置available Buffer里面相应的位置，以标记自己哪些位置是已经写入成功的。</li>\n</ol>\n<p>如下图所示，Writer1和Writer2两个线程写入数组，都申请可写的数组空间。Writer1被分配了下标3到下表5的空间，Writer2被分配了下标6到下标9的空间。</p>\n<p>Writer1写入下标3位置的元素，同时把available Buffer相应位置置位，标记已经写入成功，往后移一位，开始写下标4位置的元素。Writer2同样的方式。最终都写入完成。</p>\n<p><img src=\"https://p1.meituan.net/travelcube/5e06841b1bba4dcf1d3fac169734ba36133983.png\" alt=\"图7 多个生产者情况下，生产者生产过程示意图\"></p>\n<p>图7 多个生产者情况下，生产者生产过程示意图</p>\n<p>防止不同生产者对同一段空间写入的代码，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public long tryNext(int n) throws InsufficientCapacityException</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (n &lt; 1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;n must be &gt; 0&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    long current;</span><br><span class=\"line\">    long next;</span><br><span class=\"line\"> </span><br><span class=\"line\">    do</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        current &#x3D; cursor.get();</span><br><span class=\"line\">        next &#x3D; current + n;</span><br><span class=\"line\"> </span><br><span class=\"line\">        if (!hasAvailableCapacity(gatingSequences, n, current))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            throw InsufficientCapacityException.INSTANCE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while (!cursor.compareAndSet(current, next));</span><br><span class=\"line\"> </span><br><span class=\"line\">    return next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过do/while循环的条件cursor.compareAndSet(current, next)，来判断每次申请的空间是否已经被其他生产者占据。假如已经被占据，该函数会返回失败，While循环重新执行，申请写入空间。</p>\n<p>消费者的流程与生产者非常类似，这儿就不多描述了。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Disruptor通过精巧的无锁设计实现了在高并发情形下的高性能。</p>\n<p>在美团内部，很多高并发场景借鉴了Disruptor的设计，减少竞争的强度。其设计思想可以扩展到分布式场景，通过无锁设计，来提升服务性能。</p>\n<p>使用Disruptor比使用ArrayBlockingQueue略微复杂，为方便读者上手，增加代码样例。</p>\n<p>代码实现的功能：每10ms向disruptor中插入一个元素，消费者读取数据，并打印到终端。详细逻辑请细读代码。</p>\n<p>以下代码基于3.3.4版本的Disruptor包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.meituan.Disruptor;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * @description disruptor代码样例。每10ms向disruptor中插入一个元素，消费者读取数据，并打印到终端</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">import com.lmax.disruptor.*;</span><br><span class=\"line\">import com.lmax.disruptor.dsl.Disruptor;</span><br><span class=\"line\">import com.lmax.disruptor.dsl.ProducerType;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.concurrent.ThreadFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class DisruptorMain</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args) throws Exception</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 队列中的元素</span><br><span class=\"line\">        class Element &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            private int value;</span><br><span class=\"line\"></span><br><span class=\"line\">            public int get()&#123;</span><br><span class=\"line\">                return value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            public void set(int value)&#123;</span><br><span class=\"line\">                this.value&#x3D; value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 生产者的线程工厂</span><br><span class=\"line\">        ThreadFactory threadFactory &#x3D; new ThreadFactory()&#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public Thread newThread(Runnable r) &#123;</span><br><span class=\"line\">                return new Thread(r, &quot;simpleThread&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; RingBuffer生产工厂,初始化RingBuffer的时候使用</span><br><span class=\"line\">        EventFactory&lt;Element&gt; factory &#x3D; new EventFactory&lt;Element&gt;() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public Element newInstance() &#123;</span><br><span class=\"line\">                return new Element();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 处理Event的handler</span><br><span class=\"line\">        EventHandler&lt;Element&gt; handler &#x3D; new EventHandler&lt;Element&gt;()&#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onEvent(Element element, long sequence, boolean endOfBatch)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                System.out.println(&quot;Element: &quot; + element.get());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 阻塞策略</span><br><span class=\"line\">        BlockingWaitStrategy strategy &#x3D; new BlockingWaitStrategy();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 指定RingBuffer的大小</span><br><span class=\"line\">        int bufferSize &#x3D; 16;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 创建disruptor，采用单生产者模式</span><br><span class=\"line\">        Disruptor&lt;Element&gt; disruptor &#x3D; new Disruptor(factory, bufferSize, threadFactory, ProducerType.SINGLE, strategy);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 设置EventHandler</span><br><span class=\"line\">        disruptor.handleEventsWith(handler);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 启动disruptor的线程</span><br><span class=\"line\">        disruptor.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        RingBuffer&lt;Element&gt; ringBuffer &#x3D; disruptor.getRingBuffer();</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int l &#x3D; 0; true; l++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 获取下一个可用位置的下标</span><br><span class=\"line\">            long sequence &#x3D; ringBuffer.next();  </span><br><span class=\"line\">            try</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &#x2F;&#x2F; 返回可用位置的元素</span><br><span class=\"line\">                Element event &#x3D; ringBuffer.get(sequence); </span><br><span class=\"line\">                &#x2F;&#x2F; 设置该位置元素的值</span><br><span class=\"line\">                event.set(l); </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            finally</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ringBuffer.publish(sequence);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Thread.sleep(10);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h2><p>以下面这些模式测试性能:</p>\n<p><img src=\"https://p1.meituan.net/travelcube/ada37da4ad62709ab67d7a32147cb19a306409.png\" alt=\"img\"></p>\n<p>吞吐量测试数据（每秒的数量）如下。</p>\n<p>环境： - CPU:Intel Core i7 860 @ 2.8 GHz without HT - JVM:Java 1.6.0_25 64-bit - OS:Windows 7</p>\n<table>\n<thead>\n<tr>\n<th>-</th>\n<th>ABQ</th>\n<th>Disruptor</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Unicast: 1P – 1C</td>\n<td>5,339,256</td>\n<td>25,998,336</td>\n</tr>\n<tr>\n<td>Pipeline: 1P – 3C</td>\n<td>2,128,918</td>\n<td>16,806,157</td>\n</tr>\n<tr>\n<td>Sequencer: 3P – 1C</td>\n<td>5,539,531</td>\n<td>13,403,268</td>\n</tr>\n<tr>\n<td>Multicast: 1P – 3C</td>\n<td>1,077,384</td>\n<td>9,377,871</td>\n</tr>\n<tr>\n<td>Diamond: 1P – 3C</td>\n<td>2,113,941</td>\n<td>16,143,613</td>\n</tr>\n</tbody></table>\n<p>环境：</p>\n<ul>\n<li>CPU:Intel Core i7-2720QM</li>\n<li>JVM:Java 1.6.0_25 64-bit</li>\n<li>OS:Ubuntu 11.04</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>-</th>\n<th>ABQ</th>\n<th>Disruptor</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Unicast: 1P – 1C</td>\n<td>4,057,453</td>\n<td>22,381,378</td>\n</tr>\n<tr>\n<td>Pipeline: 1P – 3C</td>\n<td>2,006,903</td>\n<td>15,857,913</td>\n</tr>\n<tr>\n<td>Sequencer: 3P – 1C</td>\n<td>2,056,118</td>\n<td>14,540,519</td>\n</tr>\n<tr>\n<td>Multicast: 1P – 3C</td>\n<td>260,733</td>\n<td>10,860,121</td>\n</tr>\n<tr>\n<td>Diamond: 1P – 3C</td>\n<td>2,082,725</td>\n<td>15,295,197</td>\n</tr>\n</tbody></table>\n<p>依据并发竞争的激烈程度的不同，Disruptor比ArrayBlockingQueue吞吐量快4~7倍。</p>\n<p>按照Pipeline: 1P – 3C的连接模式测试延迟，生产者两次写入之间的延迟为1ms。</p>\n<p>运行环境：</p>\n<ul>\n<li>CPU:2.2GHz Core i7-2720QM</li>\n<li>Java: 1.6.0_25 64-bit</li>\n<li>OS:Ubuntu 11.04.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>-</th>\n<th>Array Blocking Queue (ns)</th>\n<th>Disruptor (ns)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>99% observations less than</td>\n<td>2,097,152</td>\n<td>128</td>\n</tr>\n<tr>\n<td>99.99% observations less than</td>\n<td>4,194,304</td>\n<td>8,192</td>\n</tr>\n<tr>\n<td>Max Latency</td>\n<td>5,069,086</td>\n<td>175,567</td>\n</tr>\n<tr>\n<td>Mean Latency</td>\n<td>32,757</td>\n<td>52</td>\n</tr>\n<tr>\n<td>Min Latency</td>\n<td>145</td>\n<td>29</td>\n</tr>\n</tbody></table>\n<p>可见，平均延迟差了3个数量级。</p>\n<h2 id=\"等待策略\"><a href=\"#等待策略\" class=\"headerlink\" title=\"等待策略\"></a>等待策略</h2><h3 id=\"生产者的等待策略\"><a href=\"#生产者的等待策略\" class=\"headerlink\" title=\"生产者的等待策略\"></a>生产者的等待策略</h3><p>暂时只有休眠1ns。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LockSupport.parkNanos(1);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"消费者的等待策略\"><a href=\"#消费者的等待策略\" class=\"headerlink\" title=\"消费者的等待策略\"></a>消费者的等待策略</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>措施</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BlockingWaitStrategy</td>\n<td>加锁</td>\n<td>CPU资源紧缺，吞吐量和延迟并不重要的场景</td>\n</tr>\n<tr>\n<td>BusySpinWaitStrategy</td>\n<td>自旋</td>\n<td>通过不断重试，减少切换线程导致的系统调用，而降低延迟。推荐在线程绑定到固定的CPU的场景下使用</td>\n</tr>\n<tr>\n<td>PhasedBackoffWaitStrategy</td>\n<td>自旋 + yield + 自定义策略</td>\n<td>CPU资源紧缺，吞吐量和延迟并不重要的场景</td>\n</tr>\n<tr>\n<td>SleepingWaitStrategy</td>\n<td>自旋 + yield + sleep</td>\n<td>性能和CPU资源之间有很好的折中。延迟不均匀</td>\n</tr>\n<tr>\n<td>TimeoutBlockingWaitStrategy</td>\n<td>加锁，有超时限制</td>\n<td>CPU资源紧缺，吞吐量和延迟并不重要的场景</td>\n</tr>\n<tr>\n<td>YieldingWaitStrategy</td>\n<td>自旋 + yield + 自旋</td>\n<td>性能和CPU资源之间有很好的折中。延迟比较均匀</td>\n</tr>\n</tbody></table>\n<h2 id=\"Log4j-2应用场景\"><a href=\"#Log4j-2应用场景\" class=\"headerlink\" title=\"Log4j 2应用场景\"></a>Log4j 2应用场景</h2><p>Log4j 2相对于Log4j 1最大的优势在于多线程并发场景下性能更优。该特性源自于Log4j 2的异步模式采用了Disruptor来处理。 在Log4j 2的配置文件中可以配置WaitStrategy，默认是Timeout策略。下面是Log4j 2中对WaitStrategy的配置官方文档：</p>\n<table>\n<thead>\n<tr>\n<th>System Property</th>\n<th>Default Value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AsyncLogger.WaitStrategy</td>\n<td>Timeout</td>\n<td>Valid values: Block, Timeout, Sleep, Yield. Block is a strategy that uses a lock and condition variable for the I/O thread waiting for log events. Block can be used when throughput and low-latency are not as important as CPU resource. Recommended for resource constrained/virtualised environments. Timeout is a variation of the Block strategy that will periodically wake up from the lock condition await() call. This ensures that if a notification is missed somehow the consumer thread is not stuck but will recover with a small latency delay (default 10ms). Sleep is a strategy that initially spins, then uses a Thread.yield(), and eventually parks for the minimum number of nanos the OS and JVM will allow while the I/O thread is waiting for log events. Sleep is a good compromise between performance and CPU resource. This strategy has very low impact on the application thread, in exchange for some additional latency for actually getting the message logged. Yield is a strategy that uses a Thread.yield() for waiting for log events after an initially spinning. Yield is a good compromise between performance and CPU resource, but may use more CPU than Sleep in order to get the message logged to disk sooner.</td>\n</tr>\n</tbody></table>\n<h3 id=\"性能差异\"><a href=\"#性能差异\" class=\"headerlink\" title=\"性能差异\"></a>性能差异</h3><p>loggers all async采用的是Disruptor，而Async Appender采用的是ArrayBlockingQueue队列。</p>\n<p>由图可见，单线程情况下，loggers all async与Async Appender吞吐量相差不大，但是在64个线程的时候，loggers all async的吞吐量比Async Appender增加了12倍，是Sync模式的68倍。</p>\n<p><img src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/ad04b8bd.png\" alt=\"图8 Log4j 2各个模式性能比较\"></p>\n<p>图8 Log4j 2各个模式性能比较</p>\n<p>美团在公司内部统一推行日志接入规范，要求必须使用Log4j 2，使普通单机QPS的上限不再只停留在几千，极高地提升了服务性能。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ol>\n<li><a href=\"http://brokendreams.iteye.com/blog/2255720\" target=\"_blank\" rel=\"noopener\">http://brokendreams.iteye.com/blog/2255720</a></li>\n<li><a href=\"http://ifeve.com/dissecting-disruptor-whats-so-special/\" target=\"_blank\" rel=\"noopener\">http://ifeve.com/dissecting-disruptor-whats-so-special/</a></li>\n<li><a href=\"https://github.com/LMAX-Exchange/disruptor/wiki/Performance-Results\" target=\"_blank\" rel=\"noopener\">https://github.com/LMAX-Exchange/disruptor/wiki/Performance-Results</a></li>\n<li><a href=\"https://lmax-exchange.github.io/disruptor/\" target=\"_blank\" rel=\"noopener\">https://lmax-exchange.github.io/disruptor/</a></li>\n<li><a href=\"https://logging.apache.org/log4j/2.x/manual/async.html\" target=\"_blank\" rel=\"noopener\">https://logging.apache.org/log4j/2.x/manual/async.html</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>Disruptor是英国外汇交易公司LMAX开发的一个高性能队列，研发的初衷是解决内存队列的延迟问题（在性能测试中发现竟然与I/O操作处于同样的数量级）。基于Disruptor开发的系统单线程能支撑每秒600万订单，2010年在QCon演讲后，获得了业界关注。2011年，企业应用软件专家Martin Fowler专门撰写长文介绍。同年它还获得了Oracle官方的Duke大奖。</p>\n<p>目前，包括Apache Storm、Camel、Log4j 2在内的很多知名项目都应用了Disruptor以获取高性能。在美团技术团队它也有不少应用，有的项目架构借鉴了它的设计机制。本文从实战角度剖析了Disruptor的实现原理。</p>\n<p>需要特别指出的是，这里所说的队列是系统内部的内存队列，而不是Kafka这样的分布式队列。另外，本文所描述的Disruptor特性限于3.3.4。</p>\n<h2 id=\"Java内置队列\"><a href=\"#Java内置队列\" class=\"headerlink\" title=\"Java内置队列\"></a>Java内置队列</h2><p>介绍Disruptor之前，我们先来看一看常用的线程安全的内置队列有什么问题。Java的内置队列如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>队列</th>\n<th>有界性</th>\n<th>锁</th>\n<th>数据结构</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ArrayBlockingQueue</td>\n<td>bounded</td>\n<td>加锁</td>\n<td>arraylist</td>\n</tr>\n<tr>\n<td>LinkedBlockingQueue</td>\n<td>optionally-bounded</td>\n<td>加锁</td>\n<td>linkedlist</td>\n</tr>\n<tr>\n<td>ConcurrentLinkedQueue</td>\n<td>unbounded</td>\n<td>无锁</td>\n<td>linkedlist</td>\n</tr>\n<tr>\n<td>LinkedTransferQueue</td>\n<td>unbounded</td>\n<td>无锁</td>\n<td>linkedlist</td>\n</tr>\n<tr>\n<td>PriorityBlockingQueue</td>\n<td>unbounded</td>\n<td>加锁</td>\n<td>heap</td>\n</tr>\n<tr>\n<td>DelayQueue</td>\n<td>unbounded</td>\n<td>加锁</td>\n<td>heap</td>\n</tr>\n</tbody></table>\n<p>队列的底层一般分成三种：数组、链表和堆。其中，堆一般情况下是为了实现带有优先级特性的队列，暂且不考虑。</p>\n<p>我们就从数组和链表两种数据结构来看，基于数组线程安全的队列，比较典型的是ArrayBlockingQueue，它主要通过加锁的方式来保证线程安全；基于链表的线程安全队列分成LinkedBlockingQueue和ConcurrentLinkedQueue两大类，前者也通过锁的方式来实现线程安全，而后者以及上面表格中的LinkedTransferQueue都是通过原子变量compare and swap（以下简称“CAS”）这种不加锁的方式来实现的。</p>\n<p>通过不加锁的方式实现的队列都是无界的（无法保证队列的长度在确定的范围内）；而加锁的方式，可以实现有界队列。在稳定性要求特别高的系统中，为了防止生产者速度过快，导致内存溢出，只能选择有界队列；同时，为了减少Java的垃圾回收对系统性能的影响，会尽量选择array/heap格式的数据结构。这样筛选下来，符合条件的队列就只有ArrayBlockingQueue。</p>\n<h2 id=\"ArrayBlockingQueue的问题\"><a href=\"#ArrayBlockingQueue的问题\" class=\"headerlink\" title=\"ArrayBlockingQueue的问题\"></a>ArrayBlockingQueue的问题</h2><p>ArrayBlockingQueue在实际使用过程中，会因为加锁和伪共享等出现严重的性能问题，我们下面来分析一下。</p>\n<h3 id=\"加锁\"><a href=\"#加锁\" class=\"headerlink\" title=\"加锁\"></a>加锁</h3><p>现实编程过程中，加锁通常会严重地影响性能。线程会因为竞争不到锁而被挂起，等锁被释放的时候，线程又会被恢复，这个过程中存在着很大的开销，并且通常会有较长时间的中断，因为当一个线程正在等待锁时，它不能做任何其他事情。如果一个线程在持有锁的情况下被延迟执行，例如发生了缺页错误、调度延迟或者其它类似情况，那么所有需要这个锁的线程都无法执行下去。如果被阻塞线程的优先级较高，而持有锁的线程优先级较低，就会发生优先级反转。</p>\n<p>Disruptor论文中讲述了一个实验：</p>\n<ul>\n<li>这个测试程序调用了一个函数，该函数会对一个64位的计数器循环自增5亿次。</li>\n<li>机器环境：2.4G 6核</li>\n<li>运算： 64位的计数器累加5亿次</li>\n</ul>\n<p>|Method | Time (ms) | |— | —| |Single thread | 300| |Single thread with CAS | 5,700| |Single thread with lock | 10,000| |Single thread with volatile write | 4,700| |Two threads with CAS | 30,000| |Two threads with lock | 224,000|</p>\n<p>CAS操作比单线程无锁慢了1个数量级；有锁且多线程并发的情况下，速度比单线程无锁慢3个数量级。可见无锁速度最快。</p>\n<p>单线程情况下，不加锁的性能 &gt; CAS操作的性能 &gt; 加锁的性能。</p>\n<p>在多线程情况下，为了保证线程安全，必须使用CAS或锁，这种情况下，CAS的性能超过锁的性能，前者大约是后者的8倍。</p>\n<p>综上可知，加锁的性能是最差的。</p>\n<p><strong>关于锁和CAS</strong></p>\n<p>保证线程安全一般分成两种方式：锁和原子变量。</p>\n<p><strong>锁</strong></p>\n<p><img src=\"https://p1.meituan.net/travelcube/9b6a41f7d8527df9730b7832b38ec4d5180025.png\" alt=\"图1 通过加锁的方式实现线程安全\"></p>\n<p>图1 通过加锁的方式实现线程安全</p>\n<p>采取加锁的方式，默认线程会冲突，访问数据时，先加上锁再访问，访问之后再解锁。通过锁界定一个临界区，同时只有一个线程进入。如上图所示，Thread2访问Entry的时候，加了锁，Thread1就不能再执行访问Entry的代码，从而保证线程安全。</p>\n<p>下面是ArrayBlockingQueue通过加锁的方式实现的offer方法，保证线程安全。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean offer(E e) &#123;</span><br><span class=\"line\">    checkNotNull(e);</span><br><span class=\"line\">    final ReentrantLock lock &#x3D; this.lock;</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        if (count &#x3D;&#x3D; items.length)</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            insert(e);</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>原子变量</strong></p>\n<p>原子变量能够保证原子性的操作，意思是某个任务在执行过程中，要么全部成功，要么全部失败回滚，恢复到执行之前的初态，不存在初态和成功之间的中间状态。例如CAS操作，要么比较并交换成功，要么比较并交换失败。由CPU保证原子性。</p>\n<p>通过原子变量可以实现线程安全。执行某个任务的时候，先假定不会有冲突，若不发生冲突，则直接执行成功；当发生冲突的时候，则执行失败，回滚再重新操作，直到不发生冲突。</p>\n<p><img src=\"https://p0.meituan.net/travelcube/de0ced42337014947e7466db4d8f2d4d158395.png\" alt=\"图2 通过原子变量CAS实现线程安全\"></p>\n<p>图2 通过原子变量CAS实现线程安全</p>\n<p>如图所示，Thread1和Thread2都要把Entry加1。若不加锁，也不使用CAS，有可能Thread1取到了myValue=1，Thread2也取到了myValue=1，然后相加，Entry中的value值为2。这与预期不相符，我们预期的是Entry的值经过两次相加后等于3。</p>\n<p>CAS会先把Entry现在的value跟线程当初读出的值相比较，若相同，则赋值；若不相同，则赋值执行失败。一般会通过while/for循环来重新执行，直到赋值成功。</p>\n<p>代码示例是AtomicInteger的getAndAdd方法。CAS是CPU的一个指令，由CPU保证原子性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * Atomically adds the given value to the current value.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param delta the value to add</span><br><span class=\"line\"> * @return the previous value</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public final int getAndAdd(int delta) &#123;</span><br><span class=\"line\">    for (;;) &#123;</span><br><span class=\"line\">        int current &#x3D; get();</span><br><span class=\"line\">        int next &#x3D; current + delta;</span><br><span class=\"line\">        if (compareAndSet(current, next))</span><br><span class=\"line\">            return current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * Atomically sets the value to the given updated value</span><br><span class=\"line\"> * if the current value &#123;@code &#x3D;&#x3D;&#125; the expected value.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param expect the expected value</span><br><span class=\"line\"> * @param update the new value</span><br><span class=\"line\"> * @return true if successful. False return indicates that</span><br><span class=\"line\"> * the actual value was not equal to the expected value.</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public final boolean compareAndSet(int expect, int update) &#123;</span><br><span class=\"line\">    return unsafe.compareAndSwapInt(this, valueOffset, expect, update);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在高度竞争的情况下，锁的性能将超过原子变量的性能，但是更真实的竞争情况下，原子变量的性能将超过锁的性能。同时原子变量不会有死锁等活跃性问题。</p>\n<h3 id=\"伪共享\"><a href=\"#伪共享\" class=\"headerlink\" title=\"伪共享\"></a>伪共享</h3><p><strong>什么是共享</strong></p>\n<p>下图是计算的基本结构。L1、L2、L3分别表示一级缓存、二级缓存、三级缓存，越靠近CPU的缓存，速度越快，容量也越小。所以L1缓存很小但很快，并且紧靠着在使用它的CPU内核；L2大一些，也慢一些，并且仍然只能被一个单独的CPU核使用；L3更大、更慢，并且被单个插槽上的所有CPU核共享；最后是主存，由全部插槽上的所有CPU核共享。</p>\n<p><img src=\"https://p1.meituan.net/travelcube/69ce8ffbe7a4ebee01c377dac174842d433755.png\" alt=\"图3 计算机CPU与缓存示意图\"></p>\n<p>图3 计算机CPU与缓存示意图</p>\n<p>当CPU执行运算的时候，它先去L1查找所需的数据、再去L2、然后是L3，如果最后这些缓存中都没有，所需的数据就要去主内存拿。走得越远，运算耗费的时间就越长。所以如果你在做一些很频繁的事，你要尽量确保数据在L1缓存中。</p>\n<p>另外，线程之间共享一份数据的时候，需要一个线程把数据写回主存，而另一个线程访问主存中相应的数据。</p>\n<p>下面是从CPU访问不同层级数据的时间概念:</p>\n<table>\n<thead>\n<tr>\n<th>从CPU到</th>\n<th>大约需要的CPU周期</th>\n<th>大约需要的时间</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主存</td>\n<td>-</td>\n<td>约60-80ns</td>\n</tr>\n<tr>\n<td>QPI 总线传输(between sockets, not drawn)</td>\n<td>-</td>\n<td>约20ns</td>\n</tr>\n<tr>\n<td>L3 cache</td>\n<td>约40-45 cycles</td>\n<td>约15ns</td>\n</tr>\n<tr>\n<td>L2 cache</td>\n<td>约10 cycles</td>\n<td>约3ns</td>\n</tr>\n<tr>\n<td>L1 cache</td>\n<td>约3-4 cycles</td>\n<td>约1ns</td>\n</tr>\n<tr>\n<td>寄存器</td>\n<td>1 cycle</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<p>可见CPU读取主存中的数据会比从L1中读取慢了近2个数量级。</p>\n<p><strong>缓存行</strong></p>\n<p>Cache是由很多个cache line组成的。每个cache line通常是64字节，并且它有效地引用主内存中的一块儿地址。一个Java的long类型变量是8字节，因此在一个缓存行中可以存8个long类型的变量。</p>\n<p>CPU每次从主存中拉取数据时，会把相邻的数据也存入同一个cache line。</p>\n<p>在访问一个long数组的时候，如果数组中的一个值被加载到缓存中，它会自动加载另外7个。因此你能非常快的遍历这个数组。事实上，你可以非常快速的遍历在连续内存块中分配的任意数据结构。</p>\n<p>下面的例子是测试利用cache line的特性和不利用cache line的特性的效果对比。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.meituan.FalseSharing;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * @author gongming</span><br><span class=\"line\"> * @description</span><br><span class=\"line\"> * @date 16&#x2F;6&#x2F;4</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class CacheLineEffect &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;考虑一般缓存行大小是64字节，一个 long 类型占8字节</span><br><span class=\"line\">    static  long[][] arr;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        arr &#x3D; new long[1024 * 1024][];</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; 1024 * 1024; i++) &#123;</span><br><span class=\"line\">            arr[i] &#x3D; new long[8];</span><br><span class=\"line\">            for (int j &#x3D; 0; j &lt; 8; j++) &#123;</span><br><span class=\"line\">                arr[i][j] &#x3D; 0L;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long sum &#x3D; 0L;</span><br><span class=\"line\">        long marked &#x3D; System.currentTimeMillis();</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; 1024 * 1024; i+&#x3D;1) &#123;</span><br><span class=\"line\">            for(int j &#x3D;0; j&lt; 8;j++)&#123;</span><br><span class=\"line\">                sum &#x3D; arr[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(&quot;Loop times:&quot; + (System.currentTimeMillis() - marked) + &quot;ms&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">        marked &#x3D; System.currentTimeMillis();</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; 8; i+&#x3D;1) &#123;</span><br><span class=\"line\">            for(int j &#x3D;0; j&lt; 1024 * 1024;j++)&#123;</span><br><span class=\"line\">                sum &#x3D; arr[j][i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(&quot;Loop times:&quot; + (System.currentTimeMillis() - marked) + &quot;ms&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在2G Hz、2核、8G内存的运行环境中测试，速度差一倍。</p>\n<p>结果：</p>\n<p>Loop times:30ms Loop times:65ms</p>\n<p><strong>什么是伪共享</strong></p>\n<p>ArrayBlockingQueue有三个成员变量： - takeIndex：需要被取走的元素下标 - putIndex：可被元素插入的位置的下标 - count：队列中元素的数量</p>\n<p>这三个变量很容易放到一个缓存行中，但是之间修改没有太多的关联。所以每次修改，都会使之前缓存的数据失效，从而不能完全达到共享的效果。</p>\n<p><img src=\"https://p0.meituan.net/travelcube/192e9b87b7a5b68cac352fdeb81dc93b161543.png\" alt=\"图4 ArrayBlockingQueue伪共享示意图\"></p>\n<p>图4 ArrayBlockingQueue伪共享示意图</p>\n<p>如上图所示，当生产者线程put一个元素到ArrayBlockingQueue时，putIndex会修改，从而导致消费者线程的缓存中的缓存行无效，需要从主存中重新读取。</p>\n<p>这种无法充分使用缓存行特性的现象，称为伪共享。</p>\n<p>对于伪共享，一般的解决方案是，增大数组元素的间隔使得由不同线程存取的元素位于不同的缓存行上，以空间换时间。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.meituan.FalseSharing;</span><br><span class=\"line\"> </span><br><span class=\"line\">public class FalseSharing implements Runnable&#123;</span><br><span class=\"line\">        public final static long ITERATIONS &#x3D; 500L * 1000L * 100L;</span><br><span class=\"line\">        private int arrayIndex &#x3D; 0;</span><br><span class=\"line\"> </span><br><span class=\"line\">        private static ValuePadding[] longs;</span><br><span class=\"line\">        public FalseSharing(final int arrayIndex) &#123;</span><br><span class=\"line\">            this.arrayIndex &#x3D; arrayIndex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        public static void main(final String[] args) throws Exception &#123;</span><br><span class=\"line\">            for(int i&#x3D;1;i&lt;10;i++)&#123;</span><br><span class=\"line\">                System.gc();</span><br><span class=\"line\">                final long start &#x3D; System.currentTimeMillis();</span><br><span class=\"line\">                runTest(i);</span><br><span class=\"line\">                System.out.println(&quot;Thread num &quot;+i+&quot; duration &#x3D; &quot; + (System.currentTimeMillis() - start));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        private static void runTest(int NUM_THREADS) throws InterruptedException &#123;</span><br><span class=\"line\">            Thread[] threads &#x3D; new Thread[NUM_THREADS];</span><br><span class=\"line\">            longs &#x3D; new ValuePadding[NUM_THREADS];</span><br><span class=\"line\">            for (int i &#x3D; 0; i &lt; longs.length; i++) &#123;</span><br><span class=\"line\">                longs[i] &#x3D; new ValuePadding();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            for (int i &#x3D; 0; i &lt; threads.length; i++) &#123;</span><br><span class=\"line\">                threads[i] &#x3D; new Thread(new FalseSharing(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            for (Thread t : threads) &#123;</span><br><span class=\"line\">                t.start();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            for (Thread t : threads) &#123;</span><br><span class=\"line\">                t.join();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            long i &#x3D; ITERATIONS + 1;</span><br><span class=\"line\">            while (0 !&#x3D; --i) &#123;</span><br><span class=\"line\">                longs[arrayIndex].value &#x3D; 0L;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        public final static class ValuePadding &#123;</span><br><span class=\"line\">            protected long p1, p2, p3, p4, p5, p6, p7;</span><br><span class=\"line\">            protected volatile long value &#x3D; 0L;</span><br><span class=\"line\">            protected long p9, p10, p11, p12, p13, p14;</span><br><span class=\"line\">            protected long p15;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public final static class ValueNoPadding &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; protected long p1, p2, p3, p4, p5, p6, p7;</span><br><span class=\"line\">            protected volatile long value &#x3D; 0L;</span><br><span class=\"line\">            &#x2F;&#x2F; protected long p9, p10, p11, p12, p13, p14, p15;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在2G Hz，2核，8G内存, jdk 1.7.0_45 的运行环境下，使用了共享机制比没有使用共享机制，速度快了4倍左右。</p>\n<p>结果：</p>\n<ul>\n<li>Thread num 1 duration = 447</li>\n<li>Thread num 2 duration = 463</li>\n<li>Thread num 3 duration = 454</li>\n<li>Thread num 4 duration = 464</li>\n<li>Thread num 5 duration = 561</li>\n<li>Thread num 6 duration = 606</li>\n<li>Thread num 7 duration = 684</li>\n<li>Thread num 8 duration = 870</li>\n<li>Thread num 9 duration = 823</li>\n</ul>\n<p>把代码中ValuePadding都替换为ValueNoPadding后的结果：</p>\n<ul>\n<li>Thread num 1 duration = 446</li>\n<li>Thread num 2 duration = 2549</li>\n<li>Thread num 3 duration = 2898</li>\n<li>Thread num 4 duration = 3931</li>\n<li>Thread num 5 duration = 4716</li>\n<li>Thread num 6 duration = 5424</li>\n<li>Thread num 7 duration = 4868</li>\n<li>Thread num 8 duration = 4595</li>\n<li>Thread num 9 duration = 4540</li>\n</ul>\n<p>备注：在jdk1.8中，有专门的注解@Contended来避免伪共享，更优雅地解决问题。</p>\n<h2 id=\"Disruptor的设计方案\"><a href=\"#Disruptor的设计方案\" class=\"headerlink\" title=\"Disruptor的设计方案\"></a>Disruptor的设计方案</h2><p>Disruptor通过以下设计来解决队列速度慢的问题：</p>\n<ul>\n<li>环形数组结构</li>\n</ul>\n<p>为了避免垃圾回收，采用数组而非链表。同时，数组对处理器的缓存机制更加友好。</p>\n<ul>\n<li>元素位置定位</li>\n</ul>\n<p>数组长度2^n，通过位运算，加快定位的速度。下标采取递增的形式。不用担心index溢出的问题。index是long类型，即使100万QPS的处理速度，也需要30万年才能用完。</p>\n<ul>\n<li>无锁设计</li>\n</ul>\n<p>每个生产者或者消费者线程，会先申请可以操作的元素在数组中的位置，申请到之后，直接在该位置写入或者读取数据。</p>\n<p>下面忽略数组的环形结构，介绍一下如何实现无锁设计。整个过程通过原子变量CAS，保证操作的线程安全。</p>\n<h3 id=\"一个生产者\"><a href=\"#一个生产者\" class=\"headerlink\" title=\"一个生产者\"></a>一个生产者</h3><p><strong>写数据</strong></p>\n<p>生产者单线程写数据的流程比较简单：</p>\n<ol>\n<li>申请写入m个元素；</li>\n<li>若是有m个元素可以入，则返回最大的序列号。这儿主要判断是否会覆盖未读的元素；</li>\n<li>若是返回的正确，则生产者开始写入元素。</li>\n</ol>\n<p><img src=\"https://p1.meituan.net/travelcube/e71c1449273361ec413fffc7b0bf5507208689.png\" alt=\"图5 单个生产者生产过程示意图\"></p>\n<p>图5 单个生产者生产过程示意图</p>\n<h2 id=\"多个生产者\"><a href=\"#多个生产者\" class=\"headerlink\" title=\"多个生产者\"></a>多个生产者</h2><p>多个生产者的情况下，会遇到“如何防止多个线程重复写同一个元素”的问题。Disruptor的解决方法是，每个线程获取不同的一段数组空间进行操作。这个通过CAS很容易达到。只需要在分配元素的时候，通过CAS判断一下这段空间是否已经分配出去即可。</p>\n<p>但是会遇到一个新问题：如何防止读取的时候，读到还未写的元素。Disruptor在多个生产者的情况下，引入了一个与Ring Buffer大小相同的buffer：available Buffer。当某个位置写入成功的时候，便把availble Buffer相应的位置置位，标记为写入成功。读取的时候，会遍历available Buffer，来判断元素是否已经就绪。</p>\n<p>下面分读数据和写数据两种情况介绍。</p>\n<h3 id=\"读数据\"><a href=\"#读数据\" class=\"headerlink\" title=\"读数据\"></a>读数据</h3><p>生产者多线程写入的情况会复杂很多：</p>\n<ol>\n<li>申请读取到序号n；</li>\n<li>若writer cursor &gt;= n，这时仍然无法确定连续可读的最大下标。从reader cursor开始读取available Buffer，一直查到第一个不可用的元素，然后返回最大连续可读元素的位置；</li>\n<li>消费者读取元素。</li>\n</ol>\n<p>如下图所示，读线程读到下标为2的元素，三个线程Writer1/Writer2/Writer3正在向RingBuffer相应位置写数据，写线程被分配到的最大元素下标是11。</p>\n<p>读线程申请读取到下标从3到11的元素，判断writer cursor&gt;=11。然后开始读取availableBuffer，从3开始，往后读取，发现下标为7的元素没有生产成功，于是WaitFor(11)返回6。</p>\n<p>然后，消费者读取下标从3到6共计4个元素。</p>\n<p><img src=\"https://p0.meituan.net/travelcube/99c603494ea90c9535e165579daf340a161527.png\" alt=\"图6 多个生产者情况下，消费者消费过程示意图\"></p>\n<p>图6 多个生产者情况下，消费者消费过程示意图</p>\n<h3 id=\"写数据\"><a href=\"#写数据\" class=\"headerlink\" title=\"写数据\"></a>写数据</h3><p>多个生产者写入的时候：</p>\n<ol>\n<li>申请写入m个元素；</li>\n<li>若是有m个元素可以写入，则返回最大的序列号。每个生产者会被分配一段独享的空间；</li>\n<li>生产者写入元素，写入元素的同时设置available Buffer里面相应的位置，以标记自己哪些位置是已经写入成功的。</li>\n</ol>\n<p>如下图所示，Writer1和Writer2两个线程写入数组，都申请可写的数组空间。Writer1被分配了下标3到下表5的空间，Writer2被分配了下标6到下标9的空间。</p>\n<p>Writer1写入下标3位置的元素，同时把available Buffer相应位置置位，标记已经写入成功，往后移一位，开始写下标4位置的元素。Writer2同样的方式。最终都写入完成。</p>\n<p><img src=\"https://p1.meituan.net/travelcube/5e06841b1bba4dcf1d3fac169734ba36133983.png\" alt=\"图7 多个生产者情况下，生产者生产过程示意图\"></p>\n<p>图7 多个生产者情况下，生产者生产过程示意图</p>\n<p>防止不同生产者对同一段空间写入的代码，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public long tryNext(int n) throws InsufficientCapacityException</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (n &lt; 1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;n must be &gt; 0&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    long current;</span><br><span class=\"line\">    long next;</span><br><span class=\"line\"> </span><br><span class=\"line\">    do</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        current &#x3D; cursor.get();</span><br><span class=\"line\">        next &#x3D; current + n;</span><br><span class=\"line\"> </span><br><span class=\"line\">        if (!hasAvailableCapacity(gatingSequences, n, current))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            throw InsufficientCapacityException.INSTANCE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while (!cursor.compareAndSet(current, next));</span><br><span class=\"line\"> </span><br><span class=\"line\">    return next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过do/while循环的条件cursor.compareAndSet(current, next)，来判断每次申请的空间是否已经被其他生产者占据。假如已经被占据，该函数会返回失败，While循环重新执行，申请写入空间。</p>\n<p>消费者的流程与生产者非常类似，这儿就不多描述了。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Disruptor通过精巧的无锁设计实现了在高并发情形下的高性能。</p>\n<p>在美团内部，很多高并发场景借鉴了Disruptor的设计，减少竞争的强度。其设计思想可以扩展到分布式场景，通过无锁设计，来提升服务性能。</p>\n<p>使用Disruptor比使用ArrayBlockingQueue略微复杂，为方便读者上手，增加代码样例。</p>\n<p>代码实现的功能：每10ms向disruptor中插入一个元素，消费者读取数据，并打印到终端。详细逻辑请细读代码。</p>\n<p>以下代码基于3.3.4版本的Disruptor包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.meituan.Disruptor;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * @description disruptor代码样例。每10ms向disruptor中插入一个元素，消费者读取数据，并打印到终端</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">import com.lmax.disruptor.*;</span><br><span class=\"line\">import com.lmax.disruptor.dsl.Disruptor;</span><br><span class=\"line\">import com.lmax.disruptor.dsl.ProducerType;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.concurrent.ThreadFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class DisruptorMain</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args) throws Exception</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 队列中的元素</span><br><span class=\"line\">        class Element &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            private int value;</span><br><span class=\"line\"></span><br><span class=\"line\">            public int get()&#123;</span><br><span class=\"line\">                return value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            public void set(int value)&#123;</span><br><span class=\"line\">                this.value&#x3D; value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 生产者的线程工厂</span><br><span class=\"line\">        ThreadFactory threadFactory &#x3D; new ThreadFactory()&#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public Thread newThread(Runnable r) &#123;</span><br><span class=\"line\">                return new Thread(r, &quot;simpleThread&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; RingBuffer生产工厂,初始化RingBuffer的时候使用</span><br><span class=\"line\">        EventFactory&lt;Element&gt; factory &#x3D; new EventFactory&lt;Element&gt;() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public Element newInstance() &#123;</span><br><span class=\"line\">                return new Element();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 处理Event的handler</span><br><span class=\"line\">        EventHandler&lt;Element&gt; handler &#x3D; new EventHandler&lt;Element&gt;()&#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onEvent(Element element, long sequence, boolean endOfBatch)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                System.out.println(&quot;Element: &quot; + element.get());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 阻塞策略</span><br><span class=\"line\">        BlockingWaitStrategy strategy &#x3D; new BlockingWaitStrategy();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 指定RingBuffer的大小</span><br><span class=\"line\">        int bufferSize &#x3D; 16;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 创建disruptor，采用单生产者模式</span><br><span class=\"line\">        Disruptor&lt;Element&gt; disruptor &#x3D; new Disruptor(factory, bufferSize, threadFactory, ProducerType.SINGLE, strategy);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 设置EventHandler</span><br><span class=\"line\">        disruptor.handleEventsWith(handler);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 启动disruptor的线程</span><br><span class=\"line\">        disruptor.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        RingBuffer&lt;Element&gt; ringBuffer &#x3D; disruptor.getRingBuffer();</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int l &#x3D; 0; true; l++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 获取下一个可用位置的下标</span><br><span class=\"line\">            long sequence &#x3D; ringBuffer.next();  </span><br><span class=\"line\">            try</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &#x2F;&#x2F; 返回可用位置的元素</span><br><span class=\"line\">                Element event &#x3D; ringBuffer.get(sequence); </span><br><span class=\"line\">                &#x2F;&#x2F; 设置该位置元素的值</span><br><span class=\"line\">                event.set(l); </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            finally</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ringBuffer.publish(sequence);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Thread.sleep(10);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h2><p>以下面这些模式测试性能:</p>\n<p><img src=\"https://p1.meituan.net/travelcube/ada37da4ad62709ab67d7a32147cb19a306409.png\" alt=\"img\"></p>\n<p>吞吐量测试数据（每秒的数量）如下。</p>\n<p>环境： - CPU:Intel Core i7 860 @ 2.8 GHz without HT - JVM:Java 1.6.0_25 64-bit - OS:Windows 7</p>\n<table>\n<thead>\n<tr>\n<th>-</th>\n<th>ABQ</th>\n<th>Disruptor</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Unicast: 1P – 1C</td>\n<td>5,339,256</td>\n<td>25,998,336</td>\n</tr>\n<tr>\n<td>Pipeline: 1P – 3C</td>\n<td>2,128,918</td>\n<td>16,806,157</td>\n</tr>\n<tr>\n<td>Sequencer: 3P – 1C</td>\n<td>5,539,531</td>\n<td>13,403,268</td>\n</tr>\n<tr>\n<td>Multicast: 1P – 3C</td>\n<td>1,077,384</td>\n<td>9,377,871</td>\n</tr>\n<tr>\n<td>Diamond: 1P – 3C</td>\n<td>2,113,941</td>\n<td>16,143,613</td>\n</tr>\n</tbody></table>\n<p>环境：</p>\n<ul>\n<li>CPU:Intel Core i7-2720QM</li>\n<li>JVM:Java 1.6.0_25 64-bit</li>\n<li>OS:Ubuntu 11.04</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>-</th>\n<th>ABQ</th>\n<th>Disruptor</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Unicast: 1P – 1C</td>\n<td>4,057,453</td>\n<td>22,381,378</td>\n</tr>\n<tr>\n<td>Pipeline: 1P – 3C</td>\n<td>2,006,903</td>\n<td>15,857,913</td>\n</tr>\n<tr>\n<td>Sequencer: 3P – 1C</td>\n<td>2,056,118</td>\n<td>14,540,519</td>\n</tr>\n<tr>\n<td>Multicast: 1P – 3C</td>\n<td>260,733</td>\n<td>10,860,121</td>\n</tr>\n<tr>\n<td>Diamond: 1P – 3C</td>\n<td>2,082,725</td>\n<td>15,295,197</td>\n</tr>\n</tbody></table>\n<p>依据并发竞争的激烈程度的不同，Disruptor比ArrayBlockingQueue吞吐量快4~7倍。</p>\n<p>按照Pipeline: 1P – 3C的连接模式测试延迟，生产者两次写入之间的延迟为1ms。</p>\n<p>运行环境：</p>\n<ul>\n<li>CPU:2.2GHz Core i7-2720QM</li>\n<li>Java: 1.6.0_25 64-bit</li>\n<li>OS:Ubuntu 11.04.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>-</th>\n<th>Array Blocking Queue (ns)</th>\n<th>Disruptor (ns)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>99% observations less than</td>\n<td>2,097,152</td>\n<td>128</td>\n</tr>\n<tr>\n<td>99.99% observations less than</td>\n<td>4,194,304</td>\n<td>8,192</td>\n</tr>\n<tr>\n<td>Max Latency</td>\n<td>5,069,086</td>\n<td>175,567</td>\n</tr>\n<tr>\n<td>Mean Latency</td>\n<td>32,757</td>\n<td>52</td>\n</tr>\n<tr>\n<td>Min Latency</td>\n<td>145</td>\n<td>29</td>\n</tr>\n</tbody></table>\n<p>可见，平均延迟差了3个数量级。</p>\n<h2 id=\"等待策略\"><a href=\"#等待策略\" class=\"headerlink\" title=\"等待策略\"></a>等待策略</h2><h3 id=\"生产者的等待策略\"><a href=\"#生产者的等待策略\" class=\"headerlink\" title=\"生产者的等待策略\"></a>生产者的等待策略</h3><p>暂时只有休眠1ns。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LockSupport.parkNanos(1);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"消费者的等待策略\"><a href=\"#消费者的等待策略\" class=\"headerlink\" title=\"消费者的等待策略\"></a>消费者的等待策略</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>措施</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BlockingWaitStrategy</td>\n<td>加锁</td>\n<td>CPU资源紧缺，吞吐量和延迟并不重要的场景</td>\n</tr>\n<tr>\n<td>BusySpinWaitStrategy</td>\n<td>自旋</td>\n<td>通过不断重试，减少切换线程导致的系统调用，而降低延迟。推荐在线程绑定到固定的CPU的场景下使用</td>\n</tr>\n<tr>\n<td>PhasedBackoffWaitStrategy</td>\n<td>自旋 + yield + 自定义策略</td>\n<td>CPU资源紧缺，吞吐量和延迟并不重要的场景</td>\n</tr>\n<tr>\n<td>SleepingWaitStrategy</td>\n<td>自旋 + yield + sleep</td>\n<td>性能和CPU资源之间有很好的折中。延迟不均匀</td>\n</tr>\n<tr>\n<td>TimeoutBlockingWaitStrategy</td>\n<td>加锁，有超时限制</td>\n<td>CPU资源紧缺，吞吐量和延迟并不重要的场景</td>\n</tr>\n<tr>\n<td>YieldingWaitStrategy</td>\n<td>自旋 + yield + 自旋</td>\n<td>性能和CPU资源之间有很好的折中。延迟比较均匀</td>\n</tr>\n</tbody></table>\n<h2 id=\"Log4j-2应用场景\"><a href=\"#Log4j-2应用场景\" class=\"headerlink\" title=\"Log4j 2应用场景\"></a>Log4j 2应用场景</h2><p>Log4j 2相对于Log4j 1最大的优势在于多线程并发场景下性能更优。该特性源自于Log4j 2的异步模式采用了Disruptor来处理。 在Log4j 2的配置文件中可以配置WaitStrategy，默认是Timeout策略。下面是Log4j 2中对WaitStrategy的配置官方文档：</p>\n<table>\n<thead>\n<tr>\n<th>System Property</th>\n<th>Default Value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AsyncLogger.WaitStrategy</td>\n<td>Timeout</td>\n<td>Valid values: Block, Timeout, Sleep, Yield. Block is a strategy that uses a lock and condition variable for the I/O thread waiting for log events. Block can be used when throughput and low-latency are not as important as CPU resource. Recommended for resource constrained/virtualised environments. Timeout is a variation of the Block strategy that will periodically wake up from the lock condition await() call. This ensures that if a notification is missed somehow the consumer thread is not stuck but will recover with a small latency delay (default 10ms). Sleep is a strategy that initially spins, then uses a Thread.yield(), and eventually parks for the minimum number of nanos the OS and JVM will allow while the I/O thread is waiting for log events. Sleep is a good compromise between performance and CPU resource. This strategy has very low impact on the application thread, in exchange for some additional latency for actually getting the message logged. Yield is a strategy that uses a Thread.yield() for waiting for log events after an initially spinning. Yield is a good compromise between performance and CPU resource, but may use more CPU than Sleep in order to get the message logged to disk sooner.</td>\n</tr>\n</tbody></table>\n<h3 id=\"性能差异\"><a href=\"#性能差异\" class=\"headerlink\" title=\"性能差异\"></a>性能差异</h3><p>loggers all async采用的是Disruptor，而Async Appender采用的是ArrayBlockingQueue队列。</p>\n<p>由图可见，单线程情况下，loggers all async与Async Appender吞吐量相差不大，但是在64个线程的时候，loggers all async的吞吐量比Async Appender增加了12倍，是Sync模式的68倍。</p>\n<p><img src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/ad04b8bd.png\" alt=\"图8 Log4j 2各个模式性能比较\"></p>\n<p>图8 Log4j 2各个模式性能比较</p>\n<p>美团在公司内部统一推行日志接入规范，要求必须使用Log4j 2，使普通单机QPS的上限不再只停留在几千，极高地提升了服务性能。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ol>\n<li><a href=\"http://brokendreams.iteye.com/blog/2255720\" target=\"_blank\" rel=\"noopener\">http://brokendreams.iteye.com/blog/2255720</a></li>\n<li><a href=\"http://ifeve.com/dissecting-disruptor-whats-so-special/\" target=\"_blank\" rel=\"noopener\">http://ifeve.com/dissecting-disruptor-whats-so-special/</a></li>\n<li><a href=\"https://github.com/LMAX-Exchange/disruptor/wiki/Performance-Results\" target=\"_blank\" rel=\"noopener\">https://github.com/LMAX-Exchange/disruptor/wiki/Performance-Results</a></li>\n<li><a href=\"https://lmax-exchange.github.io/disruptor/\" target=\"_blank\" rel=\"noopener\">https://lmax-exchange.github.io/disruptor/</a></li>\n<li><a href=\"https://logging.apache.org/log4j/2.x/manual/async.html\" target=\"_blank\" rel=\"noopener\">https://logging.apache.org/log4j/2.x/manual/async.html</a></li>\n</ol>\n"},{"title":"Java线程池实现原理及实践","date":"2020-05-22T08:55:27.000Z","_content":"# Java线程池实现原理及实践\n\n随着计算机行业的飞速发展，摩尔定律逐渐失效，多核CPU成为主流。使用多线程并行计算逐渐成为开发人员提升服务器性能的基本武器。J.U.C提供的线程池：ThreadPoolExecutor类，帮助开发人员管理线程并方便地执行并行任务。了解并合理使用线程池，是一个开发人员必修的基本功。\n\n本文开篇简述线程池概念和用途，接着结合线程池的源码，帮助读者领略线程池的设计思路，最后回归实践，通过案例讲述使用线程池遇到的问题，并给出了一种动态化线程池解决方案。\n\n## 一、写在前面\n\n### 1.1 线程池是什么\n\n线程池（Thread Pool）是一种基于池化思想管理线程的工具，经常出现在多线程服务器中，如MySQL。\n\n线程过多会带来额外的开销，其中包括创建销毁线程的开销、调度线程的开销等等，同时也降低了计算机的整体性能。线程池维护多个线程，等待监督管理者分配可并发执行的任务。这种做法，一方面避免了处理任务时创建销毁线程开销的代价，另一方面避免了线程数量膨胀导致的过分调度问题，保证了对内核的充分利用。\n\n而本文描述线程池是JDK中提供的ThreadPoolExecutor类。\n\n当然，使用线程池可以带来一系列好处：\n\n- **降低资源消耗**：通过池化技术重复利用已创建的线程，降低线程创建和销毁造成的损耗。\n- **提高响应速度**：任务到达时，无需等待线程创建即可立即执行。\n- **提高线程的可管理性**：线程是稀缺资源，如果无限制创建，不仅会消耗系统资源，还会因为线程的不合理分布导致资源调度失衡，降低系统的稳定性。使用线程池可以进行统一的分配、调优和监控。\n- **提供更多更强大的功能**：线程池具备可拓展性，允许开发人员向其中增加更多的功能。比如延时定时线程池ScheduledThreadPoolExecutor，就允许任务延期执行或定期执行。\n\n### 1.2 线程池解决的问题是什么\n\n线程池解决的核心问题就是资源管理问题。在并发环境下，系统不能够确定在任意时刻中，有多少任务需要执行，有多少资源需要投入。这种不确定性将带来以下若干问题：\n\n1. 频繁申请/销毁资源和调度资源，将带来额外的消耗，可能会非常巨大。\n2. 对资源无限申请缺少抑制手段，易引发系统资源耗尽的风险。\n3. 系统无法合理管理内部的资源分布，会降低系统的稳定性。\n\n为解决资源分配这个问题，线程池采用了“池化”（Pooling）思想。池化，顾名思义，是为了最大化收益并最小化风险，而将资源统一在一起管理的一种思想。\n\nPooling is the grouping together of resources (assets, equipment, personnel, effort, etc.) for the purposes of maximizing advantage or minimizing risk to the users. The term is used in finance, computing and equipment management.——wikipedia\n\n“池化”思想不仅仅能应用在计算机领域，在金融、设备、人员管理、工作管理等领域也有相关的应用。\n\n在计算机领域中的表现为：统一管理IT资源，包括服务器、存储、和网络资源等等。通过共享资源，使用户在低投入中获益。除去线程池，还有其他比较典型的几种使用策略包括：\n\n1. 内存池(Memory Pooling)：预先申请内存，提升申请内存速度，减少内存碎片。\n2. 连接池(Connection Pooling)：预先申请数据库连接，提升申请连接的速度，降低系统的开销。\n3. 实例池(Object Pooling)：循环使用对象，减少资源在初始化和释放时的昂贵损耗。\n\n在了解完“是什么”和“为什么”之后，下面我们来一起深入一下线程池的内部实现原理。\n\n## 二、线程池核心设计与实现\n\n在前文中，我们了解到：线程池是一种通过“池化”思想，帮助我们管理线程而获取并发性的工具，在Java中的体现是ThreadPoolExecutor类。那么它的的详细设计与实现是什么样的呢？我们会在本章进行详细介绍。\n\n### 2.1 总体设计\n\nJava中的线程池核心实现类是ThreadPoolExecutor，本章基于JDK 1.8的源码来分析Java线程池的核心设计与实现。我们首先来看一下ThreadPoolExecutor的UML类图，了解下ThreadPoolExecutor的继承关系。\n\n![图1 ThreadPoolExecutor UML类图](/images/912883e51327e0c7a9d753d11896326511272.png)\n\n图1 ThreadPoolExecutor UML类图\n\nThreadPoolExecutor实现的顶层接口是Executor，顶层接口Executor提供了一种思想：将任务提交和任务执行进行解耦。用户无需关注如何创建线程，如何调度线程来执行任务，用户只需提供Runnable对象，将任务的运行逻辑提交到执行器(Executor)中，由Executor框架完成线程的调配和任务的执行部分。ExecutorService接口增加了一些能力：（1）扩充执行任务的能力，补充可以为一个或一批异步任务生成Future的方法；（2）提供了管控线程池的方法，比如停止线程池的运行。AbstractExecutorService则是上层的抽象类，将执行任务的流程串联了起来，保证下层的实现只需关注一个执行任务的方法即可。最下层的实现类ThreadPoolExecutor实现最复杂的运行部分，ThreadPoolExecutor将会一方面维护自身的生命周期，另一方面同时管理线程和任务，使两者良好的结合从而执行并行任务。\n\nThreadPoolExecutor是如何运行，如何同时维护线程和执行任务的呢？其运行机制如下图所示：\n\n![图2 ThreadPoolExecutor运行流程](/images/thread-pool.png)\n\n图2 ThreadPoolExecutor运行流程\n\n线程池在内部实际上构建了一个生产者消费者模型，将线程和任务两者解耦，并不直接关联，从而良好的缓冲任务，复用线程。线程池的运行主要分成两部分：任务管理、线程管理。任务管理部分充当生产者的角色，当任务提交后，线程池会判断该任务后续的流转：（1）直接申请线程执行该任务；（2）缓冲到队列中等待线程执行；（3）拒绝该任务。线程管理部分是消费者，它们被统一维护在线程池内，根据任务请求进行线程的分配，当线程执行完任务后则会继续获取新的任务去执行，最终当线程获取不到任务的时候，线程就会被回收。\n\n接下来，我们会按照以下三个部分去详细讲解线程池运行机制：\n\n1. 线程池如何维护自身状态。\n2. 线程池如何管理任务。\n3. 线程池如何管理线程。\n\n### 2.2 生命周期管理\n\n线程池运行的状态，并不是用户显式设置的，而是伴随着线程池的运行，由内部来维护。线程池内部使用一个变量维护两个值：运行状态(runState)和线程数量 (workerCount)。在具体实现中，线程池将运行状态(runState)、线程数量 (workerCount)两个关键参数的维护放在了一起，如下代码所示：\n\n```\nprivate final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));\n```\n\n`ctl`这个AtomicInteger类型，是对线程池的运行状态和线程池中有效线程的数量进行控制的一个字段， 它同时包含两部分的信息：线程池的运行状态 (runState) 和线程池内有效线程的数量 (workerCount)，高3位保存runState，低29位保存workerCount，两个变量之间互不干扰。用一个变量去存储两个值，可避免在做相关决策时，出现不一致的情况，不必为了维护两者的一致，而占用锁资源。通过阅读线程池源代码也可以发现，经常出现要同时判断线程池运行状态和线程数量的情况。线程池也提供了若干方法去供用户获得线程池当前的运行状态、线程个数。这里都使用的是位运算的方式，相比于基本运算，速度也会快很多。\n\n关于内部封装的获取生命周期状态、获取线程池线程数量的计算方法如以下代码所示：\n\n```\nprivate static int runStateOf(int c)     { return c & ~CAPACITY; } //计算当前运行状态\nprivate static int workerCountOf(int c)  { return c & CAPACITY; }  //计算当前线程数量\nprivate static int ctlOf(int rs, int wc) { return rs | wc; }   //通过状态和线程数生成ctl\n```\n\nThreadPoolExecutor的运行状态有5种，分别为：\n\n![img](https://p0.meituan.net/travelcube/62853fa44bfa47d63143babe3b5a4c6e82532.png)\n\n其生命周期转换如下入所示：\n\n![图3 线程池生命周期](/images/582d1606d57ff99aa0e5f8fc59c7819329028.png)\n\n图3 线程池生命周期\n\n### 2.3 任务执行机制\n\n**2.3.1 任务调度**\n\n任务调度是线程池的主要入口，当用户提交了一个任务，接下来这个任务将如何执行都是由这个阶段决定的。了解这部分就相当于了解了线程池的核心运行机制。\n\n首先，所有任务的调度都是由execute方法完成的，这部分完成的工作是：检查现在线程池的运行状态、运行线程数、运行策略，决定接下来执行的流程，是直接申请线程执行，或是缓冲到队列中执行，亦或是直接拒绝该任务。其执行过程如下：\n\n1. 首先检测线程池运行状态，如果不是RUNNING，则直接拒绝，线程池要保证在RUNNING的状态下执行任务。\n2. 如果workerCount < corePoolSize，则创建并启动一个线程来执行新提交的任务。\n3. 如果workerCount >= corePoolSize，且线程池内的阻塞队列未满，则将任务添加到该阻塞队列中。\n4. 如果workerCount >= corePoolSize && workerCount < maximumPoolSize，且线程池内的阻塞队列已满，则创建并启动一个线程来执行新提交的任务。\n5. 如果workerCount >= maximumPoolSize，并且线程池内的阻塞队列已满, 则根据拒绝策略来处理该任务, 默认的处理方式是直接抛异常。\n\n其执行流程如下图所示：\n\n![图4 任务调度流程](/images/31bad766983e212431077ca8da92762050214.png)\n\n图4 任务调度流程\n\n**2.3.2 任务缓冲**\n\n任务缓冲模块是线程池能够管理任务的核心部分。线程池的本质是对任务和线程的管理，而做到这一点最关键的思想就是将任务和线程两者解耦，不让两者直接关联，才可以做后续的分配工作。线程池中是以生产者消费者模式，通过一个阻塞队列来实现的。阻塞队列缓存任务，工作线程从阻塞队列中获取任务。\n\n阻塞队列(BlockingQueue)是一个支持两个附加操作的队列。这两个附加的操作是：在队列为空时，获取元素的线程会等待队列变为非空。当队列满时，存储元素的线程会等待队列可用。阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。\n\n下图中展示了线程1往阻塞队列中添加元素，而线程2从阻塞队列中移除元素：\n\n![图5 阻塞队列](/images/f4d89c87acf102b45be8ccf3ed83352a9497.png)\n\n图5 阻塞队列\n\n使用不同的队列可以实现不一样的任务存取策略。在这里，我们可以再介绍下阻塞队列的成员：\n\n![img](/images/725a3db5114d95675f2098c12dc331c3316963.png)\n\n**2.3.3 任务申请**\n\n由上文的任务分配部分可知，任务的执行有两种可能：一种是任务直接由新创建的线程执行。另一种是线程从任务队列中获取任务然后执行，执行完任务的空闲线程会再次去从队列中申请任务再去执行。第一种情况仅出现在线程初始创建的时候，第二种是线程获取任务绝大多数的情况。\n\n线程需要从任务缓存模块中不断地取任务执行，帮助线程从阻塞队列中获取任务，实现线程管理模块和任务管理模块之间的通信。这部分策略由getTask方法实现，其执行流程如下图所示：\n\n![图6 获取任务流程图](/images/49d8041f8480aba5ef59079fcc7143b996706.png)\n\n图6 获取任务流程图\n\ngetTask这部分进行了多次判断，为的是控制线程的数量，使其符合线程池的状态。如果线程池现在不应该持有那么多线程，则会返回null值。工作线程Worker会不断接收新任务去执行，而当工作线程Worker接收不到任务的时候，就会开始被回收。\n\n**2.3.4 任务拒绝**\n\n任务拒绝模块是线程池的保护部分，线程池有一个最大的容量，当线程池的任务缓存队列已满，并且线程池中的线程数目达到maximumPoolSize时，就需要拒绝掉该任务，采取任务拒绝策略，保护线程池。\n\n拒绝策略是一个接口，其设计如下：\n\n```\npublic interface RejectedExecutionHandler {\n    void rejectedExecution(Runnable r, ThreadPoolExecutor executor);\n}\n```\n\n用户可以通过实现这个接口去定制拒绝策略，也可以选择JDK提供的四种已有拒绝策略，其特点如下：\n\n![img](/images/9ffb64cc4c64c0cb8d38dac01c89c905178456.png)\n\n2.4 Worker线程管理\n\n2.4.1 Worker线程\n\n线程池为了掌握线程的状态并维护线程的生命周期，设计了线程池内的工作线程Worker。我们来看一下它的部分代码：\n\n```\nprivate final class Worker extends AbstractQueuedSynchronizer implements Runnable{\n    final Thread thread;//Worker持有的线程\n    Runnable firstTask;//初始化的任务，可以为null\n}\n```\n\nWorker这个工作线程，实现了Runnable接口，并持有一个线程thread，一个初始化的任务firstTask。thread是在调用构造方法时通过ThreadFactory来创建的线程，可以用来执行任务；firstTask用它来保存传入的第一个任务，这个任务可以有也可以为null。如果这个值是非空的，那么线程就会在启动初期立即执行这个任务，也就对应核心线程创建时的情况；如果这个值是null，那么就需要创建一个线程去执行任务列表（workQueue）中的任务，也就是非核心线程的创建。\n\nWorker执行任务的模型如下图所示：\n\n![图7 Worker执行任务](/images/03268b9dc49bd30bb63064421bb036bf90315.png)\n\n图7 Worker执行任务\n\n线程池需要管理线程的生命周期，需要在线程长时间不运行的时候进行回收。线程池使用一张Hash表去持有线程的引用，这样可以通过添加引用、移除引用这样的操作来控制线程的生命周期。这个时候重要的就是如何判断线程是否在运行。\n\nWorker是通过继承AQS，使用AQS来实现独占锁这个功能。没有使用可重入锁ReentrantLock，而是使用AQS，为的就是实现不可重入的特性去反应线程现在的执行状态。\n\n1.lock方法一旦获取了独占锁，表示当前线程正在执行任务中。 2.如果正在执行任务，则不应该中断线程。 3.如果该线程现在不是独占锁的状态，也就是空闲的状态，说明它没有在处理任务，这时可以对该线程进行中断。 4.线程池在执行shutdown方法或tryTerminate方法时会调用interruptIdleWorkers方法来中断空闲的线程，interruptIdleWorkers方法会使用tryLock方法来判断线程池中的线程是否是空闲状态；如果线程是空闲状态则可以安全回收。\n\n在线程回收过程中就使用到了这种特性，回收过程如下图所示：\n\n![图8 线程池回收过程](/images/9d8dc9cebe59122127460f81a98894bb34085.png)\n\n图8 线程池回收过程\n\n**2.4.2 Worker线程增加**\n\n增加线程是通过线程池中的addWorker方法，该方法的功能就是增加一个线程，该方法不考虑线程池是在哪个阶段增加的该线程，这个分配线程的策略是在上个步骤完成的，该步骤仅仅完成增加线程，并使它运行，最后返回是否成功这个结果。addWorker方法有两个参数：firstTask、core。firstTask参数用于指定新增的线程执行的第一个任务，该参数可以为空；core参数为true表示在新增线程时会判断当前活动线程数是否少于corePoolSize，false表示新增线程前需要判断当前活动线程数是否少于maximumPoolSize，其执行流程如下图所示：\n\n![图9 申请线程执行流程图](/images/49527b1bb385f0f43529e57b614f59ae145454.png)\n\n图9 申请线程执行流程图\n\n**2.4.3 Worker线程回收**\n\n线程池中线程的销毁依赖JVM自动的回收，线程池做的工作是根据当前线程池的状态维护一定数量的线程引用，防止这部分线程被JVM回收，当线程池决定哪些线程需要回收时，只需要将其引用消除即可。Worker被创建出来后，就会不断地进行轮询，然后获取任务去执行，核心线程可以无限等待获取任务，非核心线程要限时获取任务。当Worker无法获取到任务，也就是获取的任务为空时，循环会结束，Worker会主动消除自身在线程池内的引用。\n\n```\ntry {\n  while (task != null || (task = getTask()) != null) {\n    //执行任务\n  }\n} finally {\n  processWorkerExit(w, completedAbruptly);//获取不到任务时，主动回收自己\n}\n```\n\n线程回收的工作是在processWorkerExit方法完成的。\n\n![图10 线程销毁流程](/images/90ea093549782945f2c968403fdc39d415386.png)\n\n图10 线程销毁流程\n\n事实上，在这个方法中，将线程引用移出线程池就已经结束了线程销毁的部分。但由于引起线程销毁的可能性有很多，线程池还要判断是什么引发了这次销毁，是否要改变线程池的现阶段状态，是否要根据新状态，重新分配线程。\n\n**2.4.4 Worker线程执行任务**\n\n在Worker类中的run方法调用了runWorker方法来执行任务，runWorker方法的执行过程如下：\n\n1.while循环不断地通过getTask()方法获取任务。 2.getTask()方法从阻塞队列中取任务。 3.如果线程池正在停止，那么要保证当前线程是中断状态，否则要保证当前线程不是中断状态。 4.执行任务。 5.如果getTask结果为null则跳出循环，执行processWorkerExit()方法，销毁线程。\n\n执行流程如下图所示：\n\n![图11 执行任务流程](/images/879edb4f06043d76cea27a3ff358cb1d45243.png)\n\n图11 执行任务流程\n\n## 三、线程池在业务中的实践\n\n### 3.1 业务背景\n\n在当今的互联网业界，为了最大程度利用CPU的多核性能，并行运算的能力是不可或缺的。通过线程池管理线程获取并发性是一个非常基础的操作，让我们来看两个典型的使用线程池获取并发性的场景。\n\n**场景1：快速响应用户请求**\n\n**描述**：用户发起的实时请求，服务追求响应时间。比如说用户要查看一个商品的信息，那么我们需要将商品维度的一系列信息如商品的价格、优惠、库存、图片等等聚合起来，展示给用户。\n\n**分析**：从用户体验角度看，这个结果响应的越快越好，如果一个页面半天都刷不出，用户可能就放弃查看这个商品了。而面向用户的功能聚合通常非常复杂，伴随着调用与调用之间的级联、多级级联等情况，业务开发同学往往会选择使用线程池这种简单的方式，将调用封装成任务并行的执行，缩短总体响应时间。另外，使用线程池也是有考量的，这种场景最重要的就是获取最大的响应速度去满足用户，所以应该不设置队列去缓冲并发任务，调高corePoolSize和maxPoolSize去尽可能创造多的线程快速执行任务。\n\n![图12 并行执行任务提升任务响应速度](/images/e9a363c8577f211577e4962e9110cb0226733.png)\n\n图12 并行执行任务提升任务响应速度\n\n**场景2：快速处理批量任务**\n\n**描述**：离线的大量计算任务，需要快速执行。比如说，统计某个报表，需要计算出全国各个门店中有哪些商品有某种属性，用于后续营销策略的分析，那么我们需要查询全国所有门店中的所有商品，并且记录具有某属性的商品，然后快速生成报表。\n\n**分析**：这种场景需要执行大量的任务，我们也会希望任务执行的越快越好。这种情况下，也应该使用多线程策略，并行计算。但与响应速度优先的场景区别在于，这类场景任务量巨大，并不需要瞬时的完成，而是关注如何使用有限的资源，尽可能在单位时间内处理更多的任务，也就是吞吐量优先的问题。所以应该设置队列去缓冲并发任务，调整合适的corePoolSize去设置处理任务的线程数。在这里，设置的线程数过多可能还会引发线程上下文切换频繁的问题，也会降低处理任务的速度，降低吞吐量。\n\n![图13 并行执行任务提升批量任务执行速度](/images/1a1746f33bfdcb03da074d8539ebb2f367563.png)\n\n图13 并行执行任务提升批量任务执行速度\n\n### 3.2 实际问题及方案思考\n\n线程池使用面临的核心的问题在于：**线程池的参数并不好配置**。一方面线程池的运行机制不是很好理解，配置合理需要强依赖开发人员的个人经验和知识；另一方面，线程池执行的情况和任务类型相关性较大，IO密集型和CPU密集型的任务运行起来的情况差异非常大，这导致业界并没有一些成熟的经验策略帮助开发人员参考。\n\n关于线程池配置不合理引发的故障，公司内部有较多记录，下面举一些例子：\n\n**Case1**：2018年XX页面展示接口大量调用降级：\n\n**事故描述**：XX页面展示接口产生大量调用降级，数量级在几十到上百。\n\n**事故原因**：该服务展示接口内部逻辑使用线程池做并行计算，由于没有预估好调用的流量，导致最大核心数设置偏小，大量抛出RejectedExecutionException，触发接口降级条件，示意图如下：\n\n![图14 线程数核心设置过小引发RejectExecutionException](/images/1df932840b31f41931bb69e16be2932844240.png)\n\n图14 线程数核心设置过小引发RejectExecutionException\n\n**Case2**：2018年XX业务服务不可用S2级故障\n\n**事故描述**：XX业务提供的服务执行时间过长，作为上游服务整体超时，大量下游服务调用失败。\n\n**事故原因**：该服务处理请求内部逻辑使用线程池做资源隔离，由于队列设置过长，最大线程数设置失效，导致请求数量增加时，大量任务堆积在队列中，任务执行时间过长，最终导致下游服务的大量调用超时失败。示意图如下：\n\n![图15 线程池队列长度设置过长、corePoolSize设置过小导致任务执行速度低](/images/668e3c90f4b918bfcead2f4280091e9757284.png)\n\n图15 线程池队列长度设置过长、corePoolSize设置过小导致任务执行速度低\n\n业务中要使用线程池，而使用不当又会导致故障，那么我们怎样才能更好地使用线程池呢？针对这个问题，我们下面延展几个方向：\n\n**1. 能否不用线程池?**\n\n回到最初的问题，业务使用线程池是为了获取并发性，对于获取并发性，是否可以有什么其他的方案呢替代？我们尝试进行了一些其他方案的调研：\n\n![img](/images/56ab763273b2c03b2f1c37db7b150338414771.png)\n\n综合考虑，这些新的方案都能在某种情况下提升并行任务的性能，然而本次重点解决的问题是如何更简易、更安全地获得的并发性。另外，Actor模型的应用实际上甚少，只在Scala中使用广泛，协程框架在Java中维护的也不成熟。这三者现阶段都不是足够的易用，也并不能解决业务上现阶段的问题。\n\n**2. 追求参数设置合理性？**\n\n有没有一种计算公式，能够让开发同学很简易地计算出某种场景中的线程池应该是什么参数呢？\n\n带着这样的疑问，我们调研了业界的一些线程池参数配置方案：\n\n![img](/images/23a44974ff68a08261fb675242b83648181953.png)\n\n调研了以上业界方案后，我们并没有得出通用的线程池计算方式。并发任务的执行情况和任务类型相关，IO密集型和CPU密集型的任务运行起来的情况差异非常大，但这种占比是较难合理预估的，这导致很难有一个简单有效的通用公式帮我们直接计算出结果。\n\n**3. 线程池参数动态化？**\n\n尽管经过谨慎的评估，仍然不能够保证一次计算出来合适的参数，那么我们是否可以将修改线程池参数的成本降下来，这样至少可以发生故障的时候可以快速调整从而缩短故障恢复的时间呢？基于这个思考，我们是否可以将线程池的参数从代码中迁移到分布式配置中心上，实现线程池参数可动态配置和即时生效，线程池参数动态化前后的参数修改流程对比如下：\n\n![图16 动态修改线程池参数新旧流程对比](/images/c6caa5be64f39758ada0593b995d65fd25982.png)\n\n图16 动态修改线程池参数新旧流程对比\n\n基于以上三个方向对比，我们可以看出参数动态化方向简单有效。\n\n### 3.3 动态化线程池\n\n**3.3.1 整体设计**\n\n动态化线程池的核心设计包括以下三个方面：\n\n1. 简化线程池配置：线程池构造参数有8个，但是最核心的是3个：corePoolSize、maximumPoolSize，workQueue，它们最大程度地决定了线程池的任务分配和线程分配策略。考虑到在实际应用中我们获取并发性的场景主要是两种：（1）并行执行子任务，提高响应速度。这种情况下，应该使用同步队列，没有什么任务应该被缓存下来，而是应该立即执行。（2）并行执行大批次任务，提升吞吐量。这种情况下，应该使用有界队列，使用队列去缓冲大批量的任务，队列容量必须声明，防止任务无限制堆积。所以线程池只需要提供这三个关键参数的配置，并且提供两种队列的选择，就可以满足绝大多数的业务需求，Less is More。\n2. 参数可动态修改：为了解决参数不好配，修改参数成本高等问题。在Java线程池留有高扩展性的基础上，封装线程池，允许线程池监听同步外部的消息，根据消息进行修改配置。将线程池的配置放置在平台侧，允许开发同学简单的查看、修改线程池配置。\n3. 增加线程池监控：对某事物缺乏状态的观测，就对其改进无从下手。在线程池执行任务的生命周期添加监控能力，帮助开发同学了解线程池状态。\n\n![图17 动态化线程池整体设计](/images/4d5c410ad23782350cc9f980787151fd54144.png)\n\n图17 动态化线程池整体设计\n\n**3.3.2 功能架构**\n\n动态化线程池提供如下功能：\n\n**动态调参**：支持线程池参数动态调整、界面化操作；包括修改线程池核心大小、最大核心大小、队列长度等；参数修改后及时生效。 **任务监控**：支持应用粒度、线程池粒度、任务粒度的Transaction监控；可以看到线程池的任务执行情况、最大任务执行时间、平均任务执行时间、95/99线等。 **负载告警**：线程池队列任务积压到一定值的时候会通过大象（美团内部通讯工具）告知应用开发负责人；当线程池负载数达到一定阈值的时候会通过大象告知应用开发负责人。 **操作监控**：创建/修改和删除线程池都会通知到应用的开发负责人。 **操作日志**：可以查看线程池参数的修改记录，谁在什么时候修改了线程池参数、修改前的参数值是什么。 **权限校验**：只有应用开发负责人才能够修改应用的线程池参数。\n\n![图18 动态化线程池功能架构](/images/6c0091e92e90f50f89fd83f3b9eb5472135718.png)\n\n图18 动态化线程池功能架构\n\n**参数动态化**\n\nJDK原生线程池ThreadPoolExecutor提供了如下几个public的setter方法，如下图所示：\n\n![图19 JDK 线程池参数设置接口](/images/efd32f1211e9cf0a3ca9d35b0dc5de8588353.png)\n\n图19 JDK 线程池参数设置接口\n\nJDK允许线程池使用方通过ThreadPoolExecutor的实例来动态设置线程池的核心策略，以setCorePoolSize为方法例，在运行期线程池使用方调用此方法设置corePoolSize之后，线程池会直接覆盖原来的corePoolSize值，并且基于当前值和原始值的比较结果采取不同的处理策略。对于当前值小于当前工作线程数的情况，说明有多余的worker线程，此时会向当前idle的worker线程发起中断请求以实现回收，多余的worker在下次idel的时候也会被回收；对于当前值大于原始值且当前队列中有待执行任务，则线程池会创建新的worker线程来执行队列任务，setCorePoolSize具体流程如下：\n\n![图20 setCorePoolSize方法执行流程](/images/9379fe1666818237f842138812bf63bd85645.png)\n\n图20 setCorePoolSize方法执行流程\n\n线程池内部会处理好当前状态做到平滑修改，其他几个方法限于篇幅，这里不一一介绍。重点是基于这几个public方法，我们只需要维护ThreadPoolExecutor的实例，并且在需要修改的时候拿到实例修改其参数即可。基于以上的思路，我们实现了线程池参数的动态化、线程池参数在管理平台可配置可修改，其效果图如下图所示：\n\n![图21 可动态修改线程池参数](/images/414ba7f3abd11e5f805c58635ae10988166121.png)\n\n图21 可动态修改线程池参数\n\n用户可以在管理平台上通过线程池的名字找到指定的线程池，然后对其参数进行修改，保存后会实时生效。目前支持的动态参数包括核心数、最大值、队列长度等。除此之外，在界面中，我们还能看到用户可以配置是否开启告警、队列等待任务告警阈值、活跃度告警等等。关于监控和告警，我们下面一节会对齐进行介绍。\n\n**线程池监控**\n\n除了参数动态化之外，为了更好地使用线程池，我们需要对线程池的运行状况有感知，比如当前线程池的负载是怎么样的？分配的资源够不够用？任务的执行情况是怎么样的？是长任务还是短任务？基于对这些问题的思考，动态化线程池提供了多个维度的监控和告警能力，包括：线程池活跃度、任务的执行Transaction（频率、耗时）、Reject异常、线程池内部统计信息等等，既能帮助用户从多个维度分析线程池的使用情况，又能在出现问题第一时间通知到用户，从而避免故障或加速故障恢复。\n\n#### 1. 负载监控和告警\n\n线程池负载关注的核心问题是：基于当前线程池参数分配的资源够不够。对于这个问题，我们可以从事前和事中两个角度来看。事前，线程池定义了“活跃度”这个概念，来让用户在发生Reject异常之前能够感知线程池负载问题，线程池活跃度计算公式为：线程池活跃度 = activeCount/maximumPoolSize。这个公式代表当活跃线程数趋向于maximumPoolSize的时候，代表线程负载趋高。事中，也可以从两方面来看线程池的过载判定条件，一个是发生了Reject异常，一个是队列中有等待任务（支持定制阈值）。以上两种情况发生了都会触发告警，告警信息会通过大象推送给服务所关联的负责人。\n\n![图22 大象告警通知](/images/04e73f7186a91d99181e1b5615ce9e4a318600.png)\n\n图22 大象告警通知\n\n#### 2. 任务级精细化监控\n\n在传统的线程池应用场景中，线程池中的任务执行情况对于用户来说是透明的。比如在一个具体的业务场景中，业务开发申请了一个线程池同时用于执行两种任务，一个是发消息任务、一个是发短信任务，这两类任务实际执行的频率和时长对于用户来说没有一个直观的感受，很可能这两类任务不适合共享一个线程池，但是由于用户无法感知，因此也无从优化。动态化线程池内部实现了任务级别的埋点，且允许为不同的业务任务指定具有业务含义的名称，线程池内部基于这个名称做Transaction打点，基于这个功能，用户可以看到线程池内部任务级别的执行情况，且区分业务，任务监控示意图如下图所示：\n\n![图23 线程池任务执行监控](/images/cd0b9445c3c93a866201b7cfb24d2ce7214776.png)\n\n图23 线程池任务执行监控\n\n#### 3. 运行时状态实时查看\n\n用户基于JDK原生线程池ThreadPoolExecutor提供的几个public的getter方法，可以读取到当前线程池的运行状态以及参数，如下图所示：\n\n![图24 线程池实时运行情况](/images/aba8d9c09e6f054c7061ddd720a04a26147951.png)\n\n图24 线程池实时运行情况\n\n动态化线程池基于这几个接口封装了运行时状态实时查看的功能，用户基于这个功能可以了解线程池的实时状态，比如当前有多少个工作线程，执行了多少个任务，队列中等待的任务数等等。效果如下图所示：\n\n![图25 线程池实时运行情况](/images/38d5fbeaebd4998f3a30d44bd20b996f113233.png)\n\n图25 线程池实时运行情况\n\n### 3.4 实践总结\n\n面对业务中使用线程池遇到的实际问题，我们曾回到支持并发性问题本身来思考有没有取代线程池的方案，也曾尝试着去追求线程池参数设置的合理性，但面对业界方案具体落地的复杂性、可维护性以及真实运行环境的不确定性，我们在前两个方向上可谓“举步维艰”。最终，我们回到线程池参数动态化方向上探索，得出一个且可以解决业务问题的方案，虽然本质上还是没有逃离使用线程池的范畴，但是在成本和收益之间，算是取得了一个很好的平衡。成本在于实现动态化以及监控成本不高，收益在于：在不颠覆原有线程池使用方式的基础之上，从降低线程池参数修改的成本以及多维度监控这两个方面降低了故障发生的概率。希望本文提供的动态化线程池思路能对大家有帮助。\n\n## 四、参考资料\n\n- [1] JDK 1.8源码\n- [2][维基百科-线程池](https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B%E6%B1%A0)\n- [3] [更好的使用Java线程池](https://my.oschina.net/andylucc/blog/648127)\n- [4] [维基百科Pooling(Resource Management)](https://en.wikipedia.org/wiki/Pooling_(resource_management))\n- [5] [深入理解Java线程池：ThreadPoolExecutor](http://www.ideabuffer.cn/2017/04/04/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%9AThreadPoolExecutor/)\n- [6]《Java并发编程实践》","source":"_posts/java/Java-thread-pool.md","raw":"---\ntitle: Java线程池实现原理及实践\ndate: 2020-05-22 16:55:27\ntags:\n    - java\n    - thread-pool\ncategories:\n    - java\n    - thread-pool\n---\n# Java线程池实现原理及实践\n\n随着计算机行业的飞速发展，摩尔定律逐渐失效，多核CPU成为主流。使用多线程并行计算逐渐成为开发人员提升服务器性能的基本武器。J.U.C提供的线程池：ThreadPoolExecutor类，帮助开发人员管理线程并方便地执行并行任务。了解并合理使用线程池，是一个开发人员必修的基本功。\n\n本文开篇简述线程池概念和用途，接着结合线程池的源码，帮助读者领略线程池的设计思路，最后回归实践，通过案例讲述使用线程池遇到的问题，并给出了一种动态化线程池解决方案。\n\n## 一、写在前面\n\n### 1.1 线程池是什么\n\n线程池（Thread Pool）是一种基于池化思想管理线程的工具，经常出现在多线程服务器中，如MySQL。\n\n线程过多会带来额外的开销，其中包括创建销毁线程的开销、调度线程的开销等等，同时也降低了计算机的整体性能。线程池维护多个线程，等待监督管理者分配可并发执行的任务。这种做法，一方面避免了处理任务时创建销毁线程开销的代价，另一方面避免了线程数量膨胀导致的过分调度问题，保证了对内核的充分利用。\n\n而本文描述线程池是JDK中提供的ThreadPoolExecutor类。\n\n当然，使用线程池可以带来一系列好处：\n\n- **降低资源消耗**：通过池化技术重复利用已创建的线程，降低线程创建和销毁造成的损耗。\n- **提高响应速度**：任务到达时，无需等待线程创建即可立即执行。\n- **提高线程的可管理性**：线程是稀缺资源，如果无限制创建，不仅会消耗系统资源，还会因为线程的不合理分布导致资源调度失衡，降低系统的稳定性。使用线程池可以进行统一的分配、调优和监控。\n- **提供更多更强大的功能**：线程池具备可拓展性，允许开发人员向其中增加更多的功能。比如延时定时线程池ScheduledThreadPoolExecutor，就允许任务延期执行或定期执行。\n\n### 1.2 线程池解决的问题是什么\n\n线程池解决的核心问题就是资源管理问题。在并发环境下，系统不能够确定在任意时刻中，有多少任务需要执行，有多少资源需要投入。这种不确定性将带来以下若干问题：\n\n1. 频繁申请/销毁资源和调度资源，将带来额外的消耗，可能会非常巨大。\n2. 对资源无限申请缺少抑制手段，易引发系统资源耗尽的风险。\n3. 系统无法合理管理内部的资源分布，会降低系统的稳定性。\n\n为解决资源分配这个问题，线程池采用了“池化”（Pooling）思想。池化，顾名思义，是为了最大化收益并最小化风险，而将资源统一在一起管理的一种思想。\n\nPooling is the grouping together of resources (assets, equipment, personnel, effort, etc.) for the purposes of maximizing advantage or minimizing risk to the users. The term is used in finance, computing and equipment management.——wikipedia\n\n“池化”思想不仅仅能应用在计算机领域，在金融、设备、人员管理、工作管理等领域也有相关的应用。\n\n在计算机领域中的表现为：统一管理IT资源，包括服务器、存储、和网络资源等等。通过共享资源，使用户在低投入中获益。除去线程池，还有其他比较典型的几种使用策略包括：\n\n1. 内存池(Memory Pooling)：预先申请内存，提升申请内存速度，减少内存碎片。\n2. 连接池(Connection Pooling)：预先申请数据库连接，提升申请连接的速度，降低系统的开销。\n3. 实例池(Object Pooling)：循环使用对象，减少资源在初始化和释放时的昂贵损耗。\n\n在了解完“是什么”和“为什么”之后，下面我们来一起深入一下线程池的内部实现原理。\n\n## 二、线程池核心设计与实现\n\n在前文中，我们了解到：线程池是一种通过“池化”思想，帮助我们管理线程而获取并发性的工具，在Java中的体现是ThreadPoolExecutor类。那么它的的详细设计与实现是什么样的呢？我们会在本章进行详细介绍。\n\n### 2.1 总体设计\n\nJava中的线程池核心实现类是ThreadPoolExecutor，本章基于JDK 1.8的源码来分析Java线程池的核心设计与实现。我们首先来看一下ThreadPoolExecutor的UML类图，了解下ThreadPoolExecutor的继承关系。\n\n![图1 ThreadPoolExecutor UML类图](/images/912883e51327e0c7a9d753d11896326511272.png)\n\n图1 ThreadPoolExecutor UML类图\n\nThreadPoolExecutor实现的顶层接口是Executor，顶层接口Executor提供了一种思想：将任务提交和任务执行进行解耦。用户无需关注如何创建线程，如何调度线程来执行任务，用户只需提供Runnable对象，将任务的运行逻辑提交到执行器(Executor)中，由Executor框架完成线程的调配和任务的执行部分。ExecutorService接口增加了一些能力：（1）扩充执行任务的能力，补充可以为一个或一批异步任务生成Future的方法；（2）提供了管控线程池的方法，比如停止线程池的运行。AbstractExecutorService则是上层的抽象类，将执行任务的流程串联了起来，保证下层的实现只需关注一个执行任务的方法即可。最下层的实现类ThreadPoolExecutor实现最复杂的运行部分，ThreadPoolExecutor将会一方面维护自身的生命周期，另一方面同时管理线程和任务，使两者良好的结合从而执行并行任务。\n\nThreadPoolExecutor是如何运行，如何同时维护线程和执行任务的呢？其运行机制如下图所示：\n\n![图2 ThreadPoolExecutor运行流程](/images/thread-pool.png)\n\n图2 ThreadPoolExecutor运行流程\n\n线程池在内部实际上构建了一个生产者消费者模型，将线程和任务两者解耦，并不直接关联，从而良好的缓冲任务，复用线程。线程池的运行主要分成两部分：任务管理、线程管理。任务管理部分充当生产者的角色，当任务提交后，线程池会判断该任务后续的流转：（1）直接申请线程执行该任务；（2）缓冲到队列中等待线程执行；（3）拒绝该任务。线程管理部分是消费者，它们被统一维护在线程池内，根据任务请求进行线程的分配，当线程执行完任务后则会继续获取新的任务去执行，最终当线程获取不到任务的时候，线程就会被回收。\n\n接下来，我们会按照以下三个部分去详细讲解线程池运行机制：\n\n1. 线程池如何维护自身状态。\n2. 线程池如何管理任务。\n3. 线程池如何管理线程。\n\n### 2.2 生命周期管理\n\n线程池运行的状态，并不是用户显式设置的，而是伴随着线程池的运行，由内部来维护。线程池内部使用一个变量维护两个值：运行状态(runState)和线程数量 (workerCount)。在具体实现中，线程池将运行状态(runState)、线程数量 (workerCount)两个关键参数的维护放在了一起，如下代码所示：\n\n```\nprivate final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));\n```\n\n`ctl`这个AtomicInteger类型，是对线程池的运行状态和线程池中有效线程的数量进行控制的一个字段， 它同时包含两部分的信息：线程池的运行状态 (runState) 和线程池内有效线程的数量 (workerCount)，高3位保存runState，低29位保存workerCount，两个变量之间互不干扰。用一个变量去存储两个值，可避免在做相关决策时，出现不一致的情况，不必为了维护两者的一致，而占用锁资源。通过阅读线程池源代码也可以发现，经常出现要同时判断线程池运行状态和线程数量的情况。线程池也提供了若干方法去供用户获得线程池当前的运行状态、线程个数。这里都使用的是位运算的方式，相比于基本运算，速度也会快很多。\n\n关于内部封装的获取生命周期状态、获取线程池线程数量的计算方法如以下代码所示：\n\n```\nprivate static int runStateOf(int c)     { return c & ~CAPACITY; } //计算当前运行状态\nprivate static int workerCountOf(int c)  { return c & CAPACITY; }  //计算当前线程数量\nprivate static int ctlOf(int rs, int wc) { return rs | wc; }   //通过状态和线程数生成ctl\n```\n\nThreadPoolExecutor的运行状态有5种，分别为：\n\n![img](https://p0.meituan.net/travelcube/62853fa44bfa47d63143babe3b5a4c6e82532.png)\n\n其生命周期转换如下入所示：\n\n![图3 线程池生命周期](/images/582d1606d57ff99aa0e5f8fc59c7819329028.png)\n\n图3 线程池生命周期\n\n### 2.3 任务执行机制\n\n**2.3.1 任务调度**\n\n任务调度是线程池的主要入口，当用户提交了一个任务，接下来这个任务将如何执行都是由这个阶段决定的。了解这部分就相当于了解了线程池的核心运行机制。\n\n首先，所有任务的调度都是由execute方法完成的，这部分完成的工作是：检查现在线程池的运行状态、运行线程数、运行策略，决定接下来执行的流程，是直接申请线程执行，或是缓冲到队列中执行，亦或是直接拒绝该任务。其执行过程如下：\n\n1. 首先检测线程池运行状态，如果不是RUNNING，则直接拒绝，线程池要保证在RUNNING的状态下执行任务。\n2. 如果workerCount < corePoolSize，则创建并启动一个线程来执行新提交的任务。\n3. 如果workerCount >= corePoolSize，且线程池内的阻塞队列未满，则将任务添加到该阻塞队列中。\n4. 如果workerCount >= corePoolSize && workerCount < maximumPoolSize，且线程池内的阻塞队列已满，则创建并启动一个线程来执行新提交的任务。\n5. 如果workerCount >= maximumPoolSize，并且线程池内的阻塞队列已满, 则根据拒绝策略来处理该任务, 默认的处理方式是直接抛异常。\n\n其执行流程如下图所示：\n\n![图4 任务调度流程](/images/31bad766983e212431077ca8da92762050214.png)\n\n图4 任务调度流程\n\n**2.3.2 任务缓冲**\n\n任务缓冲模块是线程池能够管理任务的核心部分。线程池的本质是对任务和线程的管理，而做到这一点最关键的思想就是将任务和线程两者解耦，不让两者直接关联，才可以做后续的分配工作。线程池中是以生产者消费者模式，通过一个阻塞队列来实现的。阻塞队列缓存任务，工作线程从阻塞队列中获取任务。\n\n阻塞队列(BlockingQueue)是一个支持两个附加操作的队列。这两个附加的操作是：在队列为空时，获取元素的线程会等待队列变为非空。当队列满时，存储元素的线程会等待队列可用。阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。\n\n下图中展示了线程1往阻塞队列中添加元素，而线程2从阻塞队列中移除元素：\n\n![图5 阻塞队列](/images/f4d89c87acf102b45be8ccf3ed83352a9497.png)\n\n图5 阻塞队列\n\n使用不同的队列可以实现不一样的任务存取策略。在这里，我们可以再介绍下阻塞队列的成员：\n\n![img](/images/725a3db5114d95675f2098c12dc331c3316963.png)\n\n**2.3.3 任务申请**\n\n由上文的任务分配部分可知，任务的执行有两种可能：一种是任务直接由新创建的线程执行。另一种是线程从任务队列中获取任务然后执行，执行完任务的空闲线程会再次去从队列中申请任务再去执行。第一种情况仅出现在线程初始创建的时候，第二种是线程获取任务绝大多数的情况。\n\n线程需要从任务缓存模块中不断地取任务执行，帮助线程从阻塞队列中获取任务，实现线程管理模块和任务管理模块之间的通信。这部分策略由getTask方法实现，其执行流程如下图所示：\n\n![图6 获取任务流程图](/images/49d8041f8480aba5ef59079fcc7143b996706.png)\n\n图6 获取任务流程图\n\ngetTask这部分进行了多次判断，为的是控制线程的数量，使其符合线程池的状态。如果线程池现在不应该持有那么多线程，则会返回null值。工作线程Worker会不断接收新任务去执行，而当工作线程Worker接收不到任务的时候，就会开始被回收。\n\n**2.3.4 任务拒绝**\n\n任务拒绝模块是线程池的保护部分，线程池有一个最大的容量，当线程池的任务缓存队列已满，并且线程池中的线程数目达到maximumPoolSize时，就需要拒绝掉该任务，采取任务拒绝策略，保护线程池。\n\n拒绝策略是一个接口，其设计如下：\n\n```\npublic interface RejectedExecutionHandler {\n    void rejectedExecution(Runnable r, ThreadPoolExecutor executor);\n}\n```\n\n用户可以通过实现这个接口去定制拒绝策略，也可以选择JDK提供的四种已有拒绝策略，其特点如下：\n\n![img](/images/9ffb64cc4c64c0cb8d38dac01c89c905178456.png)\n\n2.4 Worker线程管理\n\n2.4.1 Worker线程\n\n线程池为了掌握线程的状态并维护线程的生命周期，设计了线程池内的工作线程Worker。我们来看一下它的部分代码：\n\n```\nprivate final class Worker extends AbstractQueuedSynchronizer implements Runnable{\n    final Thread thread;//Worker持有的线程\n    Runnable firstTask;//初始化的任务，可以为null\n}\n```\n\nWorker这个工作线程，实现了Runnable接口，并持有一个线程thread，一个初始化的任务firstTask。thread是在调用构造方法时通过ThreadFactory来创建的线程，可以用来执行任务；firstTask用它来保存传入的第一个任务，这个任务可以有也可以为null。如果这个值是非空的，那么线程就会在启动初期立即执行这个任务，也就对应核心线程创建时的情况；如果这个值是null，那么就需要创建一个线程去执行任务列表（workQueue）中的任务，也就是非核心线程的创建。\n\nWorker执行任务的模型如下图所示：\n\n![图7 Worker执行任务](/images/03268b9dc49bd30bb63064421bb036bf90315.png)\n\n图7 Worker执行任务\n\n线程池需要管理线程的生命周期，需要在线程长时间不运行的时候进行回收。线程池使用一张Hash表去持有线程的引用，这样可以通过添加引用、移除引用这样的操作来控制线程的生命周期。这个时候重要的就是如何判断线程是否在运行。\n\nWorker是通过继承AQS，使用AQS来实现独占锁这个功能。没有使用可重入锁ReentrantLock，而是使用AQS，为的就是实现不可重入的特性去反应线程现在的执行状态。\n\n1.lock方法一旦获取了独占锁，表示当前线程正在执行任务中。 2.如果正在执行任务，则不应该中断线程。 3.如果该线程现在不是独占锁的状态，也就是空闲的状态，说明它没有在处理任务，这时可以对该线程进行中断。 4.线程池在执行shutdown方法或tryTerminate方法时会调用interruptIdleWorkers方法来中断空闲的线程，interruptIdleWorkers方法会使用tryLock方法来判断线程池中的线程是否是空闲状态；如果线程是空闲状态则可以安全回收。\n\n在线程回收过程中就使用到了这种特性，回收过程如下图所示：\n\n![图8 线程池回收过程](/images/9d8dc9cebe59122127460f81a98894bb34085.png)\n\n图8 线程池回收过程\n\n**2.4.2 Worker线程增加**\n\n增加线程是通过线程池中的addWorker方法，该方法的功能就是增加一个线程，该方法不考虑线程池是在哪个阶段增加的该线程，这个分配线程的策略是在上个步骤完成的，该步骤仅仅完成增加线程，并使它运行，最后返回是否成功这个结果。addWorker方法有两个参数：firstTask、core。firstTask参数用于指定新增的线程执行的第一个任务，该参数可以为空；core参数为true表示在新增线程时会判断当前活动线程数是否少于corePoolSize，false表示新增线程前需要判断当前活动线程数是否少于maximumPoolSize，其执行流程如下图所示：\n\n![图9 申请线程执行流程图](/images/49527b1bb385f0f43529e57b614f59ae145454.png)\n\n图9 申请线程执行流程图\n\n**2.4.3 Worker线程回收**\n\n线程池中线程的销毁依赖JVM自动的回收，线程池做的工作是根据当前线程池的状态维护一定数量的线程引用，防止这部分线程被JVM回收，当线程池决定哪些线程需要回收时，只需要将其引用消除即可。Worker被创建出来后，就会不断地进行轮询，然后获取任务去执行，核心线程可以无限等待获取任务，非核心线程要限时获取任务。当Worker无法获取到任务，也就是获取的任务为空时，循环会结束，Worker会主动消除自身在线程池内的引用。\n\n```\ntry {\n  while (task != null || (task = getTask()) != null) {\n    //执行任务\n  }\n} finally {\n  processWorkerExit(w, completedAbruptly);//获取不到任务时，主动回收自己\n}\n```\n\n线程回收的工作是在processWorkerExit方法完成的。\n\n![图10 线程销毁流程](/images/90ea093549782945f2c968403fdc39d415386.png)\n\n图10 线程销毁流程\n\n事实上，在这个方法中，将线程引用移出线程池就已经结束了线程销毁的部分。但由于引起线程销毁的可能性有很多，线程池还要判断是什么引发了这次销毁，是否要改变线程池的现阶段状态，是否要根据新状态，重新分配线程。\n\n**2.4.4 Worker线程执行任务**\n\n在Worker类中的run方法调用了runWorker方法来执行任务，runWorker方法的执行过程如下：\n\n1.while循环不断地通过getTask()方法获取任务。 2.getTask()方法从阻塞队列中取任务。 3.如果线程池正在停止，那么要保证当前线程是中断状态，否则要保证当前线程不是中断状态。 4.执行任务。 5.如果getTask结果为null则跳出循环，执行processWorkerExit()方法，销毁线程。\n\n执行流程如下图所示：\n\n![图11 执行任务流程](/images/879edb4f06043d76cea27a3ff358cb1d45243.png)\n\n图11 执行任务流程\n\n## 三、线程池在业务中的实践\n\n### 3.1 业务背景\n\n在当今的互联网业界，为了最大程度利用CPU的多核性能，并行运算的能力是不可或缺的。通过线程池管理线程获取并发性是一个非常基础的操作，让我们来看两个典型的使用线程池获取并发性的场景。\n\n**场景1：快速响应用户请求**\n\n**描述**：用户发起的实时请求，服务追求响应时间。比如说用户要查看一个商品的信息，那么我们需要将商品维度的一系列信息如商品的价格、优惠、库存、图片等等聚合起来，展示给用户。\n\n**分析**：从用户体验角度看，这个结果响应的越快越好，如果一个页面半天都刷不出，用户可能就放弃查看这个商品了。而面向用户的功能聚合通常非常复杂，伴随着调用与调用之间的级联、多级级联等情况，业务开发同学往往会选择使用线程池这种简单的方式，将调用封装成任务并行的执行，缩短总体响应时间。另外，使用线程池也是有考量的，这种场景最重要的就是获取最大的响应速度去满足用户，所以应该不设置队列去缓冲并发任务，调高corePoolSize和maxPoolSize去尽可能创造多的线程快速执行任务。\n\n![图12 并行执行任务提升任务响应速度](/images/e9a363c8577f211577e4962e9110cb0226733.png)\n\n图12 并行执行任务提升任务响应速度\n\n**场景2：快速处理批量任务**\n\n**描述**：离线的大量计算任务，需要快速执行。比如说，统计某个报表，需要计算出全国各个门店中有哪些商品有某种属性，用于后续营销策略的分析，那么我们需要查询全国所有门店中的所有商品，并且记录具有某属性的商品，然后快速生成报表。\n\n**分析**：这种场景需要执行大量的任务，我们也会希望任务执行的越快越好。这种情况下，也应该使用多线程策略，并行计算。但与响应速度优先的场景区别在于，这类场景任务量巨大，并不需要瞬时的完成，而是关注如何使用有限的资源，尽可能在单位时间内处理更多的任务，也就是吞吐量优先的问题。所以应该设置队列去缓冲并发任务，调整合适的corePoolSize去设置处理任务的线程数。在这里，设置的线程数过多可能还会引发线程上下文切换频繁的问题，也会降低处理任务的速度，降低吞吐量。\n\n![图13 并行执行任务提升批量任务执行速度](/images/1a1746f33bfdcb03da074d8539ebb2f367563.png)\n\n图13 并行执行任务提升批量任务执行速度\n\n### 3.2 实际问题及方案思考\n\n线程池使用面临的核心的问题在于：**线程池的参数并不好配置**。一方面线程池的运行机制不是很好理解，配置合理需要强依赖开发人员的个人经验和知识；另一方面，线程池执行的情况和任务类型相关性较大，IO密集型和CPU密集型的任务运行起来的情况差异非常大，这导致业界并没有一些成熟的经验策略帮助开发人员参考。\n\n关于线程池配置不合理引发的故障，公司内部有较多记录，下面举一些例子：\n\n**Case1**：2018年XX页面展示接口大量调用降级：\n\n**事故描述**：XX页面展示接口产生大量调用降级，数量级在几十到上百。\n\n**事故原因**：该服务展示接口内部逻辑使用线程池做并行计算，由于没有预估好调用的流量，导致最大核心数设置偏小，大量抛出RejectedExecutionException，触发接口降级条件，示意图如下：\n\n![图14 线程数核心设置过小引发RejectExecutionException](/images/1df932840b31f41931bb69e16be2932844240.png)\n\n图14 线程数核心设置过小引发RejectExecutionException\n\n**Case2**：2018年XX业务服务不可用S2级故障\n\n**事故描述**：XX业务提供的服务执行时间过长，作为上游服务整体超时，大量下游服务调用失败。\n\n**事故原因**：该服务处理请求内部逻辑使用线程池做资源隔离，由于队列设置过长，最大线程数设置失效，导致请求数量增加时，大量任务堆积在队列中，任务执行时间过长，最终导致下游服务的大量调用超时失败。示意图如下：\n\n![图15 线程池队列长度设置过长、corePoolSize设置过小导致任务执行速度低](/images/668e3c90f4b918bfcead2f4280091e9757284.png)\n\n图15 线程池队列长度设置过长、corePoolSize设置过小导致任务执行速度低\n\n业务中要使用线程池，而使用不当又会导致故障，那么我们怎样才能更好地使用线程池呢？针对这个问题，我们下面延展几个方向：\n\n**1. 能否不用线程池?**\n\n回到最初的问题，业务使用线程池是为了获取并发性，对于获取并发性，是否可以有什么其他的方案呢替代？我们尝试进行了一些其他方案的调研：\n\n![img](/images/56ab763273b2c03b2f1c37db7b150338414771.png)\n\n综合考虑，这些新的方案都能在某种情况下提升并行任务的性能，然而本次重点解决的问题是如何更简易、更安全地获得的并发性。另外，Actor模型的应用实际上甚少，只在Scala中使用广泛，协程框架在Java中维护的也不成熟。这三者现阶段都不是足够的易用，也并不能解决业务上现阶段的问题。\n\n**2. 追求参数设置合理性？**\n\n有没有一种计算公式，能够让开发同学很简易地计算出某种场景中的线程池应该是什么参数呢？\n\n带着这样的疑问，我们调研了业界的一些线程池参数配置方案：\n\n![img](/images/23a44974ff68a08261fb675242b83648181953.png)\n\n调研了以上业界方案后，我们并没有得出通用的线程池计算方式。并发任务的执行情况和任务类型相关，IO密集型和CPU密集型的任务运行起来的情况差异非常大，但这种占比是较难合理预估的，这导致很难有一个简单有效的通用公式帮我们直接计算出结果。\n\n**3. 线程池参数动态化？**\n\n尽管经过谨慎的评估，仍然不能够保证一次计算出来合适的参数，那么我们是否可以将修改线程池参数的成本降下来，这样至少可以发生故障的时候可以快速调整从而缩短故障恢复的时间呢？基于这个思考，我们是否可以将线程池的参数从代码中迁移到分布式配置中心上，实现线程池参数可动态配置和即时生效，线程池参数动态化前后的参数修改流程对比如下：\n\n![图16 动态修改线程池参数新旧流程对比](/images/c6caa5be64f39758ada0593b995d65fd25982.png)\n\n图16 动态修改线程池参数新旧流程对比\n\n基于以上三个方向对比，我们可以看出参数动态化方向简单有效。\n\n### 3.3 动态化线程池\n\n**3.3.1 整体设计**\n\n动态化线程池的核心设计包括以下三个方面：\n\n1. 简化线程池配置：线程池构造参数有8个，但是最核心的是3个：corePoolSize、maximumPoolSize，workQueue，它们最大程度地决定了线程池的任务分配和线程分配策略。考虑到在实际应用中我们获取并发性的场景主要是两种：（1）并行执行子任务，提高响应速度。这种情况下，应该使用同步队列，没有什么任务应该被缓存下来，而是应该立即执行。（2）并行执行大批次任务，提升吞吐量。这种情况下，应该使用有界队列，使用队列去缓冲大批量的任务，队列容量必须声明，防止任务无限制堆积。所以线程池只需要提供这三个关键参数的配置，并且提供两种队列的选择，就可以满足绝大多数的业务需求，Less is More。\n2. 参数可动态修改：为了解决参数不好配，修改参数成本高等问题。在Java线程池留有高扩展性的基础上，封装线程池，允许线程池监听同步外部的消息，根据消息进行修改配置。将线程池的配置放置在平台侧，允许开发同学简单的查看、修改线程池配置。\n3. 增加线程池监控：对某事物缺乏状态的观测，就对其改进无从下手。在线程池执行任务的生命周期添加监控能力，帮助开发同学了解线程池状态。\n\n![图17 动态化线程池整体设计](/images/4d5c410ad23782350cc9f980787151fd54144.png)\n\n图17 动态化线程池整体设计\n\n**3.3.2 功能架构**\n\n动态化线程池提供如下功能：\n\n**动态调参**：支持线程池参数动态调整、界面化操作；包括修改线程池核心大小、最大核心大小、队列长度等；参数修改后及时生效。 **任务监控**：支持应用粒度、线程池粒度、任务粒度的Transaction监控；可以看到线程池的任务执行情况、最大任务执行时间、平均任务执行时间、95/99线等。 **负载告警**：线程池队列任务积压到一定值的时候会通过大象（美团内部通讯工具）告知应用开发负责人；当线程池负载数达到一定阈值的时候会通过大象告知应用开发负责人。 **操作监控**：创建/修改和删除线程池都会通知到应用的开发负责人。 **操作日志**：可以查看线程池参数的修改记录，谁在什么时候修改了线程池参数、修改前的参数值是什么。 **权限校验**：只有应用开发负责人才能够修改应用的线程池参数。\n\n![图18 动态化线程池功能架构](/images/6c0091e92e90f50f89fd83f3b9eb5472135718.png)\n\n图18 动态化线程池功能架构\n\n**参数动态化**\n\nJDK原生线程池ThreadPoolExecutor提供了如下几个public的setter方法，如下图所示：\n\n![图19 JDK 线程池参数设置接口](/images/efd32f1211e9cf0a3ca9d35b0dc5de8588353.png)\n\n图19 JDK 线程池参数设置接口\n\nJDK允许线程池使用方通过ThreadPoolExecutor的实例来动态设置线程池的核心策略，以setCorePoolSize为方法例，在运行期线程池使用方调用此方法设置corePoolSize之后，线程池会直接覆盖原来的corePoolSize值，并且基于当前值和原始值的比较结果采取不同的处理策略。对于当前值小于当前工作线程数的情况，说明有多余的worker线程，此时会向当前idle的worker线程发起中断请求以实现回收，多余的worker在下次idel的时候也会被回收；对于当前值大于原始值且当前队列中有待执行任务，则线程池会创建新的worker线程来执行队列任务，setCorePoolSize具体流程如下：\n\n![图20 setCorePoolSize方法执行流程](/images/9379fe1666818237f842138812bf63bd85645.png)\n\n图20 setCorePoolSize方法执行流程\n\n线程池内部会处理好当前状态做到平滑修改，其他几个方法限于篇幅，这里不一一介绍。重点是基于这几个public方法，我们只需要维护ThreadPoolExecutor的实例，并且在需要修改的时候拿到实例修改其参数即可。基于以上的思路，我们实现了线程池参数的动态化、线程池参数在管理平台可配置可修改，其效果图如下图所示：\n\n![图21 可动态修改线程池参数](/images/414ba7f3abd11e5f805c58635ae10988166121.png)\n\n图21 可动态修改线程池参数\n\n用户可以在管理平台上通过线程池的名字找到指定的线程池，然后对其参数进行修改，保存后会实时生效。目前支持的动态参数包括核心数、最大值、队列长度等。除此之外，在界面中，我们还能看到用户可以配置是否开启告警、队列等待任务告警阈值、活跃度告警等等。关于监控和告警，我们下面一节会对齐进行介绍。\n\n**线程池监控**\n\n除了参数动态化之外，为了更好地使用线程池，我们需要对线程池的运行状况有感知，比如当前线程池的负载是怎么样的？分配的资源够不够用？任务的执行情况是怎么样的？是长任务还是短任务？基于对这些问题的思考，动态化线程池提供了多个维度的监控和告警能力，包括：线程池活跃度、任务的执行Transaction（频率、耗时）、Reject异常、线程池内部统计信息等等，既能帮助用户从多个维度分析线程池的使用情况，又能在出现问题第一时间通知到用户，从而避免故障或加速故障恢复。\n\n#### 1. 负载监控和告警\n\n线程池负载关注的核心问题是：基于当前线程池参数分配的资源够不够。对于这个问题，我们可以从事前和事中两个角度来看。事前，线程池定义了“活跃度”这个概念，来让用户在发生Reject异常之前能够感知线程池负载问题，线程池活跃度计算公式为：线程池活跃度 = activeCount/maximumPoolSize。这个公式代表当活跃线程数趋向于maximumPoolSize的时候，代表线程负载趋高。事中，也可以从两方面来看线程池的过载判定条件，一个是发生了Reject异常，一个是队列中有等待任务（支持定制阈值）。以上两种情况发生了都会触发告警，告警信息会通过大象推送给服务所关联的负责人。\n\n![图22 大象告警通知](/images/04e73f7186a91d99181e1b5615ce9e4a318600.png)\n\n图22 大象告警通知\n\n#### 2. 任务级精细化监控\n\n在传统的线程池应用场景中，线程池中的任务执行情况对于用户来说是透明的。比如在一个具体的业务场景中，业务开发申请了一个线程池同时用于执行两种任务，一个是发消息任务、一个是发短信任务，这两类任务实际执行的频率和时长对于用户来说没有一个直观的感受，很可能这两类任务不适合共享一个线程池，但是由于用户无法感知，因此也无从优化。动态化线程池内部实现了任务级别的埋点，且允许为不同的业务任务指定具有业务含义的名称，线程池内部基于这个名称做Transaction打点，基于这个功能，用户可以看到线程池内部任务级别的执行情况，且区分业务，任务监控示意图如下图所示：\n\n![图23 线程池任务执行监控](/images/cd0b9445c3c93a866201b7cfb24d2ce7214776.png)\n\n图23 线程池任务执行监控\n\n#### 3. 运行时状态实时查看\n\n用户基于JDK原生线程池ThreadPoolExecutor提供的几个public的getter方法，可以读取到当前线程池的运行状态以及参数，如下图所示：\n\n![图24 线程池实时运行情况](/images/aba8d9c09e6f054c7061ddd720a04a26147951.png)\n\n图24 线程池实时运行情况\n\n动态化线程池基于这几个接口封装了运行时状态实时查看的功能，用户基于这个功能可以了解线程池的实时状态，比如当前有多少个工作线程，执行了多少个任务，队列中等待的任务数等等。效果如下图所示：\n\n![图25 线程池实时运行情况](/images/38d5fbeaebd4998f3a30d44bd20b996f113233.png)\n\n图25 线程池实时运行情况\n\n### 3.4 实践总结\n\n面对业务中使用线程池遇到的实际问题，我们曾回到支持并发性问题本身来思考有没有取代线程池的方案，也曾尝试着去追求线程池参数设置的合理性，但面对业界方案具体落地的复杂性、可维护性以及真实运行环境的不确定性，我们在前两个方向上可谓“举步维艰”。最终，我们回到线程池参数动态化方向上探索，得出一个且可以解决业务问题的方案，虽然本质上还是没有逃离使用线程池的范畴，但是在成本和收益之间，算是取得了一个很好的平衡。成本在于实现动态化以及监控成本不高，收益在于：在不颠覆原有线程池使用方式的基础之上，从降低线程池参数修改的成本以及多维度监控这两个方面降低了故障发生的概率。希望本文提供的动态化线程池思路能对大家有帮助。\n\n## 四、参考资料\n\n- [1] JDK 1.8源码\n- [2][维基百科-线程池](https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B%E6%B1%A0)\n- [3] [更好的使用Java线程池](https://my.oschina.net/andylucc/blog/648127)\n- [4] [维基百科Pooling(Resource Management)](https://en.wikipedia.org/wiki/Pooling_(resource_management))\n- [5] [深入理解Java线程池：ThreadPoolExecutor](http://www.ideabuffer.cn/2017/04/04/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%9AThreadPoolExecutor/)\n- [6]《Java并发编程实践》","slug":"java/Java-thread-pool","published":1,"updated":"2020-05-22T08:59:38.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmxt005fa4ja8emga0in","content":"<h1 id=\"Java线程池实现原理及实践\"><a href=\"#Java线程池实现原理及实践\" class=\"headerlink\" title=\"Java线程池实现原理及实践\"></a>Java线程池实现原理及实践</h1><p>随着计算机行业的飞速发展，摩尔定律逐渐失效，多核CPU成为主流。使用多线程并行计算逐渐成为开发人员提升服务器性能的基本武器。J.U.C提供的线程池：ThreadPoolExecutor类，帮助开发人员管理线程并方便地执行并行任务。了解并合理使用线程池，是一个开发人员必修的基本功。</p>\n<p>本文开篇简述线程池概念和用途，接着结合线程池的源码，帮助读者领略线程池的设计思路，最后回归实践，通过案例讲述使用线程池遇到的问题，并给出了一种动态化线程池解决方案。</p>\n<h2 id=\"一、写在前面\"><a href=\"#一、写在前面\" class=\"headerlink\" title=\"一、写在前面\"></a>一、写在前面</h2><h3 id=\"1-1-线程池是什么\"><a href=\"#1-1-线程池是什么\" class=\"headerlink\" title=\"1.1 线程池是什么\"></a>1.1 线程池是什么</h3><p>线程池（Thread Pool）是一种基于池化思想管理线程的工具，经常出现在多线程服务器中，如MySQL。</p>\n<p>线程过多会带来额外的开销，其中包括创建销毁线程的开销、调度线程的开销等等，同时也降低了计算机的整体性能。线程池维护多个线程，等待监督管理者分配可并发执行的任务。这种做法，一方面避免了处理任务时创建销毁线程开销的代价，另一方面避免了线程数量膨胀导致的过分调度问题，保证了对内核的充分利用。</p>\n<p>而本文描述线程池是JDK中提供的ThreadPoolExecutor类。</p>\n<p>当然，使用线程池可以带来一系列好处：</p>\n<ul>\n<li><strong>降低资源消耗</strong>：通过池化技术重复利用已创建的线程，降低线程创建和销毁造成的损耗。</li>\n<li><strong>提高响应速度</strong>：任务到达时，无需等待线程创建即可立即执行。</li>\n<li><strong>提高线程的可管理性</strong>：线程是稀缺资源，如果无限制创建，不仅会消耗系统资源，还会因为线程的不合理分布导致资源调度失衡，降低系统的稳定性。使用线程池可以进行统一的分配、调优和监控。</li>\n<li><strong>提供更多更强大的功能</strong>：线程池具备可拓展性，允许开发人员向其中增加更多的功能。比如延时定时线程池ScheduledThreadPoolExecutor，就允许任务延期执行或定期执行。</li>\n</ul>\n<h3 id=\"1-2-线程池解决的问题是什么\"><a href=\"#1-2-线程池解决的问题是什么\" class=\"headerlink\" title=\"1.2 线程池解决的问题是什么\"></a>1.2 线程池解决的问题是什么</h3><p>线程池解决的核心问题就是资源管理问题。在并发环境下，系统不能够确定在任意时刻中，有多少任务需要执行，有多少资源需要投入。这种不确定性将带来以下若干问题：</p>\n<ol>\n<li>频繁申请/销毁资源和调度资源，将带来额外的消耗，可能会非常巨大。</li>\n<li>对资源无限申请缺少抑制手段，易引发系统资源耗尽的风险。</li>\n<li>系统无法合理管理内部的资源分布，会降低系统的稳定性。</li>\n</ol>\n<p>为解决资源分配这个问题，线程池采用了“池化”（Pooling）思想。池化，顾名思义，是为了最大化收益并最小化风险，而将资源统一在一起管理的一种思想。</p>\n<p>Pooling is the grouping together of resources (assets, equipment, personnel, effort, etc.) for the purposes of maximizing advantage or minimizing risk to the users. The term is used in finance, computing and equipment management.——wikipedia</p>\n<p>“池化”思想不仅仅能应用在计算机领域，在金融、设备、人员管理、工作管理等领域也有相关的应用。</p>\n<p>在计算机领域中的表现为：统一管理IT资源，包括服务器、存储、和网络资源等等。通过共享资源，使用户在低投入中获益。除去线程池，还有其他比较典型的几种使用策略包括：</p>\n<ol>\n<li>内存池(Memory Pooling)：预先申请内存，提升申请内存速度，减少内存碎片。</li>\n<li>连接池(Connection Pooling)：预先申请数据库连接，提升申请连接的速度，降低系统的开销。</li>\n<li>实例池(Object Pooling)：循环使用对象，减少资源在初始化和释放时的昂贵损耗。</li>\n</ol>\n<p>在了解完“是什么”和“为什么”之后，下面我们来一起深入一下线程池的内部实现原理。</p>\n<h2 id=\"二、线程池核心设计与实现\"><a href=\"#二、线程池核心设计与实现\" class=\"headerlink\" title=\"二、线程池核心设计与实现\"></a>二、线程池核心设计与实现</h2><p>在前文中，我们了解到：线程池是一种通过“池化”思想，帮助我们管理线程而获取并发性的工具，在Java中的体现是ThreadPoolExecutor类。那么它的的详细设计与实现是什么样的呢？我们会在本章进行详细介绍。</p>\n<h3 id=\"2-1-总体设计\"><a href=\"#2-1-总体设计\" class=\"headerlink\" title=\"2.1 总体设计\"></a>2.1 总体设计</h3><p>Java中的线程池核心实现类是ThreadPoolExecutor，本章基于JDK 1.8的源码来分析Java线程池的核心设计与实现。我们首先来看一下ThreadPoolExecutor的UML类图，了解下ThreadPoolExecutor的继承关系。</p>\n<p><img src=\"/images/912883e51327e0c7a9d753d11896326511272.png\" alt=\"图1 ThreadPoolExecutor UML类图\"></p>\n<p>图1 ThreadPoolExecutor UML类图</p>\n<p>ThreadPoolExecutor实现的顶层接口是Executor，顶层接口Executor提供了一种思想：将任务提交和任务执行进行解耦。用户无需关注如何创建线程，如何调度线程来执行任务，用户只需提供Runnable对象，将任务的运行逻辑提交到执行器(Executor)中，由Executor框架完成线程的调配和任务的执行部分。ExecutorService接口增加了一些能力：（1）扩充执行任务的能力，补充可以为一个或一批异步任务生成Future的方法；（2）提供了管控线程池的方法，比如停止线程池的运行。AbstractExecutorService则是上层的抽象类，将执行任务的流程串联了起来，保证下层的实现只需关注一个执行任务的方法即可。最下层的实现类ThreadPoolExecutor实现最复杂的运行部分，ThreadPoolExecutor将会一方面维护自身的生命周期，另一方面同时管理线程和任务，使两者良好的结合从而执行并行任务。</p>\n<p>ThreadPoolExecutor是如何运行，如何同时维护线程和执行任务的呢？其运行机制如下图所示：</p>\n<p><img src=\"/images/thread-pool.png\" alt=\"图2 ThreadPoolExecutor运行流程\"></p>\n<p>图2 ThreadPoolExecutor运行流程</p>\n<p>线程池在内部实际上构建了一个生产者消费者模型，将线程和任务两者解耦，并不直接关联，从而良好的缓冲任务，复用线程。线程池的运行主要分成两部分：任务管理、线程管理。任务管理部分充当生产者的角色，当任务提交后，线程池会判断该任务后续的流转：（1）直接申请线程执行该任务；（2）缓冲到队列中等待线程执行；（3）拒绝该任务。线程管理部分是消费者，它们被统一维护在线程池内，根据任务请求进行线程的分配，当线程执行完任务后则会继续获取新的任务去执行，最终当线程获取不到任务的时候，线程就会被回收。</p>\n<p>接下来，我们会按照以下三个部分去详细讲解线程池运行机制：</p>\n<ol>\n<li>线程池如何维护自身状态。</li>\n<li>线程池如何管理任务。</li>\n<li>线程池如何管理线程。</li>\n</ol>\n<h3 id=\"2-2-生命周期管理\"><a href=\"#2-2-生命周期管理\" class=\"headerlink\" title=\"2.2 生命周期管理\"></a>2.2 生命周期管理</h3><p>线程池运行的状态，并不是用户显式设置的，而是伴随着线程池的运行，由内部来维护。线程池内部使用一个变量维护两个值：运行状态(runState)和线程数量 (workerCount)。在具体实现中，线程池将运行状态(runState)、线程数量 (workerCount)两个关键参数的维护放在了一起，如下代码所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final AtomicInteger ctl &#x3D; new AtomicInteger(ctlOf(RUNNING, 0));</span><br></pre></td></tr></table></figure>\n\n<p><code>ctl</code>这个AtomicInteger类型，是对线程池的运行状态和线程池中有效线程的数量进行控制的一个字段， 它同时包含两部分的信息：线程池的运行状态 (runState) 和线程池内有效线程的数量 (workerCount)，高3位保存runState，低29位保存workerCount，两个变量之间互不干扰。用一个变量去存储两个值，可避免在做相关决策时，出现不一致的情况，不必为了维护两者的一致，而占用锁资源。通过阅读线程池源代码也可以发现，经常出现要同时判断线程池运行状态和线程数量的情况。线程池也提供了若干方法去供用户获得线程池当前的运行状态、线程个数。这里都使用的是位运算的方式，相比于基本运算，速度也会快很多。</p>\n<p>关于内部封装的获取生命周期状态、获取线程池线程数量的计算方法如以下代码所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static int runStateOf(int c)     &#123; return c &amp; ~CAPACITY; &#125; &#x2F;&#x2F;计算当前运行状态</span><br><span class=\"line\">private static int workerCountOf(int c)  &#123; return c &amp; CAPACITY; &#125;  &#x2F;&#x2F;计算当前线程数量</span><br><span class=\"line\">private static int ctlOf(int rs, int wc) &#123; return rs | wc; &#125;   &#x2F;&#x2F;通过状态和线程数生成ctl</span><br></pre></td></tr></table></figure>\n\n<p>ThreadPoolExecutor的运行状态有5种，分别为：</p>\n<p><img src=\"https://p0.meituan.net/travelcube/62853fa44bfa47d63143babe3b5a4c6e82532.png\" alt=\"img\"></p>\n<p>其生命周期转换如下入所示：</p>\n<p><img src=\"/images/582d1606d57ff99aa0e5f8fc59c7819329028.png\" alt=\"图3 线程池生命周期\"></p>\n<p>图3 线程池生命周期</p>\n<h3 id=\"2-3-任务执行机制\"><a href=\"#2-3-任务执行机制\" class=\"headerlink\" title=\"2.3 任务执行机制\"></a>2.3 任务执行机制</h3><p><strong>2.3.1 任务调度</strong></p>\n<p>任务调度是线程池的主要入口，当用户提交了一个任务，接下来这个任务将如何执行都是由这个阶段决定的。了解这部分就相当于了解了线程池的核心运行机制。</p>\n<p>首先，所有任务的调度都是由execute方法完成的，这部分完成的工作是：检查现在线程池的运行状态、运行线程数、运行策略，决定接下来执行的流程，是直接申请线程执行，或是缓冲到队列中执行，亦或是直接拒绝该任务。其执行过程如下：</p>\n<ol>\n<li>首先检测线程池运行状态，如果不是RUNNING，则直接拒绝，线程池要保证在RUNNING的状态下执行任务。</li>\n<li>如果workerCount &lt; corePoolSize，则创建并启动一个线程来执行新提交的任务。</li>\n<li>如果workerCount &gt;= corePoolSize，且线程池内的阻塞队列未满，则将任务添加到该阻塞队列中。</li>\n<li>如果workerCount &gt;= corePoolSize &amp;&amp; workerCount &lt; maximumPoolSize，且线程池内的阻塞队列已满，则创建并启动一个线程来执行新提交的任务。</li>\n<li>如果workerCount &gt;= maximumPoolSize，并且线程池内的阻塞队列已满, 则根据拒绝策略来处理该任务, 默认的处理方式是直接抛异常。</li>\n</ol>\n<p>其执行流程如下图所示：</p>\n<p><img src=\"/images/31bad766983e212431077ca8da92762050214.png\" alt=\"图4 任务调度流程\"></p>\n<p>图4 任务调度流程</p>\n<p><strong>2.3.2 任务缓冲</strong></p>\n<p>任务缓冲模块是线程池能够管理任务的核心部分。线程池的本质是对任务和线程的管理，而做到这一点最关键的思想就是将任务和线程两者解耦，不让两者直接关联，才可以做后续的分配工作。线程池中是以生产者消费者模式，通过一个阻塞队列来实现的。阻塞队列缓存任务，工作线程从阻塞队列中获取任务。</p>\n<p>阻塞队列(BlockingQueue)是一个支持两个附加操作的队列。这两个附加的操作是：在队列为空时，获取元素的线程会等待队列变为非空。当队列满时，存储元素的线程会等待队列可用。阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。</p>\n<p>下图中展示了线程1往阻塞队列中添加元素，而线程2从阻塞队列中移除元素：</p>\n<p><img src=\"/images/f4d89c87acf102b45be8ccf3ed83352a9497.png\" alt=\"图5 阻塞队列\"></p>\n<p>图5 阻塞队列</p>\n<p>使用不同的队列可以实现不一样的任务存取策略。在这里，我们可以再介绍下阻塞队列的成员：</p>\n<p><img src=\"/images/725a3db5114d95675f2098c12dc331c3316963.png\" alt=\"img\"></p>\n<p><strong>2.3.3 任务申请</strong></p>\n<p>由上文的任务分配部分可知，任务的执行有两种可能：一种是任务直接由新创建的线程执行。另一种是线程从任务队列中获取任务然后执行，执行完任务的空闲线程会再次去从队列中申请任务再去执行。第一种情况仅出现在线程初始创建的时候，第二种是线程获取任务绝大多数的情况。</p>\n<p>线程需要从任务缓存模块中不断地取任务执行，帮助线程从阻塞队列中获取任务，实现线程管理模块和任务管理模块之间的通信。这部分策略由getTask方法实现，其执行流程如下图所示：</p>\n<p><img src=\"/images/49d8041f8480aba5ef59079fcc7143b996706.png\" alt=\"图6 获取任务流程图\"></p>\n<p>图6 获取任务流程图</p>\n<p>getTask这部分进行了多次判断，为的是控制线程的数量，使其符合线程池的状态。如果线程池现在不应该持有那么多线程，则会返回null值。工作线程Worker会不断接收新任务去执行，而当工作线程Worker接收不到任务的时候，就会开始被回收。</p>\n<p><strong>2.3.4 任务拒绝</strong></p>\n<p>任务拒绝模块是线程池的保护部分，线程池有一个最大的容量，当线程池的任务缓存队列已满，并且线程池中的线程数目达到maximumPoolSize时，就需要拒绝掉该任务，采取任务拒绝策略，保护线程池。</p>\n<p>拒绝策略是一个接口，其设计如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface RejectedExecutionHandler &#123;</span><br><span class=\"line\">    void rejectedExecution(Runnable r, ThreadPoolExecutor executor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用户可以通过实现这个接口去定制拒绝策略，也可以选择JDK提供的四种已有拒绝策略，其特点如下：</p>\n<p><img src=\"/images/9ffb64cc4c64c0cb8d38dac01c89c905178456.png\" alt=\"img\"></p>\n<p>2.4 Worker线程管理</p>\n<p>2.4.1 Worker线程</p>\n<p>线程池为了掌握线程的状态并维护线程的生命周期，设计了线程池内的工作线程Worker。我们来看一下它的部分代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final class Worker extends AbstractQueuedSynchronizer implements Runnable&#123;</span><br><span class=\"line\">    final Thread thread;&#x2F;&#x2F;Worker持有的线程</span><br><span class=\"line\">    Runnable firstTask;&#x2F;&#x2F;初始化的任务，可以为null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Worker这个工作线程，实现了Runnable接口，并持有一个线程thread，一个初始化的任务firstTask。thread是在调用构造方法时通过ThreadFactory来创建的线程，可以用来执行任务；firstTask用它来保存传入的第一个任务，这个任务可以有也可以为null。如果这个值是非空的，那么线程就会在启动初期立即执行这个任务，也就对应核心线程创建时的情况；如果这个值是null，那么就需要创建一个线程去执行任务列表（workQueue）中的任务，也就是非核心线程的创建。</p>\n<p>Worker执行任务的模型如下图所示：</p>\n<p><img src=\"/images/03268b9dc49bd30bb63064421bb036bf90315.png\" alt=\"图7 Worker执行任务\"></p>\n<p>图7 Worker执行任务</p>\n<p>线程池需要管理线程的生命周期，需要在线程长时间不运行的时候进行回收。线程池使用一张Hash表去持有线程的引用，这样可以通过添加引用、移除引用这样的操作来控制线程的生命周期。这个时候重要的就是如何判断线程是否在运行。</p>\n<p>Worker是通过继承AQS，使用AQS来实现独占锁这个功能。没有使用可重入锁ReentrantLock，而是使用AQS，为的就是实现不可重入的特性去反应线程现在的执行状态。</p>\n<p>1.lock方法一旦获取了独占锁，表示当前线程正在执行任务中。 2.如果正在执行任务，则不应该中断线程。 3.如果该线程现在不是独占锁的状态，也就是空闲的状态，说明它没有在处理任务，这时可以对该线程进行中断。 4.线程池在执行shutdown方法或tryTerminate方法时会调用interruptIdleWorkers方法来中断空闲的线程，interruptIdleWorkers方法会使用tryLock方法来判断线程池中的线程是否是空闲状态；如果线程是空闲状态则可以安全回收。</p>\n<p>在线程回收过程中就使用到了这种特性，回收过程如下图所示：</p>\n<p><img src=\"/images/9d8dc9cebe59122127460f81a98894bb34085.png\" alt=\"图8 线程池回收过程\"></p>\n<p>图8 线程池回收过程</p>\n<p><strong>2.4.2 Worker线程增加</strong></p>\n<p>增加线程是通过线程池中的addWorker方法，该方法的功能就是增加一个线程，该方法不考虑线程池是在哪个阶段增加的该线程，这个分配线程的策略是在上个步骤完成的，该步骤仅仅完成增加线程，并使它运行，最后返回是否成功这个结果。addWorker方法有两个参数：firstTask、core。firstTask参数用于指定新增的线程执行的第一个任务，该参数可以为空；core参数为true表示在新增线程时会判断当前活动线程数是否少于corePoolSize，false表示新增线程前需要判断当前活动线程数是否少于maximumPoolSize，其执行流程如下图所示：</p>\n<p><img src=\"/images/49527b1bb385f0f43529e57b614f59ae145454.png\" alt=\"图9 申请线程执行流程图\"></p>\n<p>图9 申请线程执行流程图</p>\n<p><strong>2.4.3 Worker线程回收</strong></p>\n<p>线程池中线程的销毁依赖JVM自动的回收，线程池做的工作是根据当前线程池的状态维护一定数量的线程引用，防止这部分线程被JVM回收，当线程池决定哪些线程需要回收时，只需要将其引用消除即可。Worker被创建出来后，就会不断地进行轮询，然后获取任务去执行，核心线程可以无限等待获取任务，非核心线程要限时获取任务。当Worker无法获取到任务，也就是获取的任务为空时，循环会结束，Worker会主动消除自身在线程池内的引用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">  while (task !&#x3D; null || (task &#x3D; getTask()) !&#x3D; null) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;执行任务</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; finally &#123;</span><br><span class=\"line\">  processWorkerExit(w, completedAbruptly);&#x2F;&#x2F;获取不到任务时，主动回收自己</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>线程回收的工作是在processWorkerExit方法完成的。</p>\n<p><img src=\"/images/90ea093549782945f2c968403fdc39d415386.png\" alt=\"图10 线程销毁流程\"></p>\n<p>图10 线程销毁流程</p>\n<p>事实上，在这个方法中，将线程引用移出线程池就已经结束了线程销毁的部分。但由于引起线程销毁的可能性有很多，线程池还要判断是什么引发了这次销毁，是否要改变线程池的现阶段状态，是否要根据新状态，重新分配线程。</p>\n<p><strong>2.4.4 Worker线程执行任务</strong></p>\n<p>在Worker类中的run方法调用了runWorker方法来执行任务，runWorker方法的执行过程如下：</p>\n<p>1.while循环不断地通过getTask()方法获取任务。 2.getTask()方法从阻塞队列中取任务。 3.如果线程池正在停止，那么要保证当前线程是中断状态，否则要保证当前线程不是中断状态。 4.执行任务。 5.如果getTask结果为null则跳出循环，执行processWorkerExit()方法，销毁线程。</p>\n<p>执行流程如下图所示：</p>\n<p><img src=\"/images/879edb4f06043d76cea27a3ff358cb1d45243.png\" alt=\"图11 执行任务流程\"></p>\n<p>图11 执行任务流程</p>\n<h2 id=\"三、线程池在业务中的实践\"><a href=\"#三、线程池在业务中的实践\" class=\"headerlink\" title=\"三、线程池在业务中的实践\"></a>三、线程池在业务中的实践</h2><h3 id=\"3-1-业务背景\"><a href=\"#3-1-业务背景\" class=\"headerlink\" title=\"3.1 业务背景\"></a>3.1 业务背景</h3><p>在当今的互联网业界，为了最大程度利用CPU的多核性能，并行运算的能力是不可或缺的。通过线程池管理线程获取并发性是一个非常基础的操作，让我们来看两个典型的使用线程池获取并发性的场景。</p>\n<p><strong>场景1：快速响应用户请求</strong></p>\n<p><strong>描述</strong>：用户发起的实时请求，服务追求响应时间。比如说用户要查看一个商品的信息，那么我们需要将商品维度的一系列信息如商品的价格、优惠、库存、图片等等聚合起来，展示给用户。</p>\n<p><strong>分析</strong>：从用户体验角度看，这个结果响应的越快越好，如果一个页面半天都刷不出，用户可能就放弃查看这个商品了。而面向用户的功能聚合通常非常复杂，伴随着调用与调用之间的级联、多级级联等情况，业务开发同学往往会选择使用线程池这种简单的方式，将调用封装成任务并行的执行，缩短总体响应时间。另外，使用线程池也是有考量的，这种场景最重要的就是获取最大的响应速度去满足用户，所以应该不设置队列去缓冲并发任务，调高corePoolSize和maxPoolSize去尽可能创造多的线程快速执行任务。</p>\n<p><img src=\"/images/e9a363c8577f211577e4962e9110cb0226733.png\" alt=\"图12 并行执行任务提升任务响应速度\"></p>\n<p>图12 并行执行任务提升任务响应速度</p>\n<p><strong>场景2：快速处理批量任务</strong></p>\n<p><strong>描述</strong>：离线的大量计算任务，需要快速执行。比如说，统计某个报表，需要计算出全国各个门店中有哪些商品有某种属性，用于后续营销策略的分析，那么我们需要查询全国所有门店中的所有商品，并且记录具有某属性的商品，然后快速生成报表。</p>\n<p><strong>分析</strong>：这种场景需要执行大量的任务，我们也会希望任务执行的越快越好。这种情况下，也应该使用多线程策略，并行计算。但与响应速度优先的场景区别在于，这类场景任务量巨大，并不需要瞬时的完成，而是关注如何使用有限的资源，尽可能在单位时间内处理更多的任务，也就是吞吐量优先的问题。所以应该设置队列去缓冲并发任务，调整合适的corePoolSize去设置处理任务的线程数。在这里，设置的线程数过多可能还会引发线程上下文切换频繁的问题，也会降低处理任务的速度，降低吞吐量。</p>\n<p><img src=\"/images/1a1746f33bfdcb03da074d8539ebb2f367563.png\" alt=\"图13 并行执行任务提升批量任务执行速度\"></p>\n<p>图13 并行执行任务提升批量任务执行速度</p>\n<h3 id=\"3-2-实际问题及方案思考\"><a href=\"#3-2-实际问题及方案思考\" class=\"headerlink\" title=\"3.2 实际问题及方案思考\"></a>3.2 实际问题及方案思考</h3><p>线程池使用面临的核心的问题在于：<strong>线程池的参数并不好配置</strong>。一方面线程池的运行机制不是很好理解，配置合理需要强依赖开发人员的个人经验和知识；另一方面，线程池执行的情况和任务类型相关性较大，IO密集型和CPU密集型的任务运行起来的情况差异非常大，这导致业界并没有一些成熟的经验策略帮助开发人员参考。</p>\n<p>关于线程池配置不合理引发的故障，公司内部有较多记录，下面举一些例子：</p>\n<p><strong>Case1</strong>：2018年XX页面展示接口大量调用降级：</p>\n<p><strong>事故描述</strong>：XX页面展示接口产生大量调用降级，数量级在几十到上百。</p>\n<p><strong>事故原因</strong>：该服务展示接口内部逻辑使用线程池做并行计算，由于没有预估好调用的流量，导致最大核心数设置偏小，大量抛出RejectedExecutionException，触发接口降级条件，示意图如下：</p>\n<p><img src=\"/images/1df932840b31f41931bb69e16be2932844240.png\" alt=\"图14 线程数核心设置过小引发RejectExecutionException\"></p>\n<p>图14 线程数核心设置过小引发RejectExecutionException</p>\n<p><strong>Case2</strong>：2018年XX业务服务不可用S2级故障</p>\n<p><strong>事故描述</strong>：XX业务提供的服务执行时间过长，作为上游服务整体超时，大量下游服务调用失败。</p>\n<p><strong>事故原因</strong>：该服务处理请求内部逻辑使用线程池做资源隔离，由于队列设置过长，最大线程数设置失效，导致请求数量增加时，大量任务堆积在队列中，任务执行时间过长，最终导致下游服务的大量调用超时失败。示意图如下：</p>\n<p><img src=\"/images/668e3c90f4b918bfcead2f4280091e9757284.png\" alt=\"图15 线程池队列长度设置过长、corePoolSize设置过小导致任务执行速度低\"></p>\n<p>图15 线程池队列长度设置过长、corePoolSize设置过小导致任务执行速度低</p>\n<p>业务中要使用线程池，而使用不当又会导致故障，那么我们怎样才能更好地使用线程池呢？针对这个问题，我们下面延展几个方向：</p>\n<p><strong>1. 能否不用线程池?</strong></p>\n<p>回到最初的问题，业务使用线程池是为了获取并发性，对于获取并发性，是否可以有什么其他的方案呢替代？我们尝试进行了一些其他方案的调研：</p>\n<p><img src=\"/images/56ab763273b2c03b2f1c37db7b150338414771.png\" alt=\"img\"></p>\n<p>综合考虑，这些新的方案都能在某种情况下提升并行任务的性能，然而本次重点解决的问题是如何更简易、更安全地获得的并发性。另外，Actor模型的应用实际上甚少，只在Scala中使用广泛，协程框架在Java中维护的也不成熟。这三者现阶段都不是足够的易用，也并不能解决业务上现阶段的问题。</p>\n<p><strong>2. 追求参数设置合理性？</strong></p>\n<p>有没有一种计算公式，能够让开发同学很简易地计算出某种场景中的线程池应该是什么参数呢？</p>\n<p>带着这样的疑问，我们调研了业界的一些线程池参数配置方案：</p>\n<p><img src=\"/images/23a44974ff68a08261fb675242b83648181953.png\" alt=\"img\"></p>\n<p>调研了以上业界方案后，我们并没有得出通用的线程池计算方式。并发任务的执行情况和任务类型相关，IO密集型和CPU密集型的任务运行起来的情况差异非常大，但这种占比是较难合理预估的，这导致很难有一个简单有效的通用公式帮我们直接计算出结果。</p>\n<p><strong>3. 线程池参数动态化？</strong></p>\n<p>尽管经过谨慎的评估，仍然不能够保证一次计算出来合适的参数，那么我们是否可以将修改线程池参数的成本降下来，这样至少可以发生故障的时候可以快速调整从而缩短故障恢复的时间呢？基于这个思考，我们是否可以将线程池的参数从代码中迁移到分布式配置中心上，实现线程池参数可动态配置和即时生效，线程池参数动态化前后的参数修改流程对比如下：</p>\n<p><img src=\"/images/c6caa5be64f39758ada0593b995d65fd25982.png\" alt=\"图16 动态修改线程池参数新旧流程对比\"></p>\n<p>图16 动态修改线程池参数新旧流程对比</p>\n<p>基于以上三个方向对比，我们可以看出参数动态化方向简单有效。</p>\n<h3 id=\"3-3-动态化线程池\"><a href=\"#3-3-动态化线程池\" class=\"headerlink\" title=\"3.3 动态化线程池\"></a>3.3 动态化线程池</h3><p><strong>3.3.1 整体设计</strong></p>\n<p>动态化线程池的核心设计包括以下三个方面：</p>\n<ol>\n<li>简化线程池配置：线程池构造参数有8个，但是最核心的是3个：corePoolSize、maximumPoolSize，workQueue，它们最大程度地决定了线程池的任务分配和线程分配策略。考虑到在实际应用中我们获取并发性的场景主要是两种：（1）并行执行子任务，提高响应速度。这种情况下，应该使用同步队列，没有什么任务应该被缓存下来，而是应该立即执行。（2）并行执行大批次任务，提升吞吐量。这种情况下，应该使用有界队列，使用队列去缓冲大批量的任务，队列容量必须声明，防止任务无限制堆积。所以线程池只需要提供这三个关键参数的配置，并且提供两种队列的选择，就可以满足绝大多数的业务需求，Less is More。</li>\n<li>参数可动态修改：为了解决参数不好配，修改参数成本高等问题。在Java线程池留有高扩展性的基础上，封装线程池，允许线程池监听同步外部的消息，根据消息进行修改配置。将线程池的配置放置在平台侧，允许开发同学简单的查看、修改线程池配置。</li>\n<li>增加线程池监控：对某事物缺乏状态的观测，就对其改进无从下手。在线程池执行任务的生命周期添加监控能力，帮助开发同学了解线程池状态。</li>\n</ol>\n<p><img src=\"/images/4d5c410ad23782350cc9f980787151fd54144.png\" alt=\"图17 动态化线程池整体设计\"></p>\n<p>图17 动态化线程池整体设计</p>\n<p><strong>3.3.2 功能架构</strong></p>\n<p>动态化线程池提供如下功能：</p>\n<p><strong>动态调参</strong>：支持线程池参数动态调整、界面化操作；包括修改线程池核心大小、最大核心大小、队列长度等；参数修改后及时生效。 <strong>任务监控</strong>：支持应用粒度、线程池粒度、任务粒度的Transaction监控；可以看到线程池的任务执行情况、最大任务执行时间、平均任务执行时间、95/99线等。 <strong>负载告警</strong>：线程池队列任务积压到一定值的时候会通过大象（美团内部通讯工具）告知应用开发负责人；当线程池负载数达到一定阈值的时候会通过大象告知应用开发负责人。 <strong>操作监控</strong>：创建/修改和删除线程池都会通知到应用的开发负责人。 <strong>操作日志</strong>：可以查看线程池参数的修改记录，谁在什么时候修改了线程池参数、修改前的参数值是什么。 <strong>权限校验</strong>：只有应用开发负责人才能够修改应用的线程池参数。</p>\n<p><img src=\"/images/6c0091e92e90f50f89fd83f3b9eb5472135718.png\" alt=\"图18 动态化线程池功能架构\"></p>\n<p>图18 动态化线程池功能架构</p>\n<p><strong>参数动态化</strong></p>\n<p>JDK原生线程池ThreadPoolExecutor提供了如下几个public的setter方法，如下图所示：</p>\n<p><img src=\"/images/efd32f1211e9cf0a3ca9d35b0dc5de8588353.png\" alt=\"图19 JDK 线程池参数设置接口\"></p>\n<p>图19 JDK 线程池参数设置接口</p>\n<p>JDK允许线程池使用方通过ThreadPoolExecutor的实例来动态设置线程池的核心策略，以setCorePoolSize为方法例，在运行期线程池使用方调用此方法设置corePoolSize之后，线程池会直接覆盖原来的corePoolSize值，并且基于当前值和原始值的比较结果采取不同的处理策略。对于当前值小于当前工作线程数的情况，说明有多余的worker线程，此时会向当前idle的worker线程发起中断请求以实现回收，多余的worker在下次idel的时候也会被回收；对于当前值大于原始值且当前队列中有待执行任务，则线程池会创建新的worker线程来执行队列任务，setCorePoolSize具体流程如下：</p>\n<p><img src=\"/images/9379fe1666818237f842138812bf63bd85645.png\" alt=\"图20 setCorePoolSize方法执行流程\"></p>\n<p>图20 setCorePoolSize方法执行流程</p>\n<p>线程池内部会处理好当前状态做到平滑修改，其他几个方法限于篇幅，这里不一一介绍。重点是基于这几个public方法，我们只需要维护ThreadPoolExecutor的实例，并且在需要修改的时候拿到实例修改其参数即可。基于以上的思路，我们实现了线程池参数的动态化、线程池参数在管理平台可配置可修改，其效果图如下图所示：</p>\n<p><img src=\"/images/414ba7f3abd11e5f805c58635ae10988166121.png\" alt=\"图21 可动态修改线程池参数\"></p>\n<p>图21 可动态修改线程池参数</p>\n<p>用户可以在管理平台上通过线程池的名字找到指定的线程池，然后对其参数进行修改，保存后会实时生效。目前支持的动态参数包括核心数、最大值、队列长度等。除此之外，在界面中，我们还能看到用户可以配置是否开启告警、队列等待任务告警阈值、活跃度告警等等。关于监控和告警，我们下面一节会对齐进行介绍。</p>\n<p><strong>线程池监控</strong></p>\n<p>除了参数动态化之外，为了更好地使用线程池，我们需要对线程池的运行状况有感知，比如当前线程池的负载是怎么样的？分配的资源够不够用？任务的执行情况是怎么样的？是长任务还是短任务？基于对这些问题的思考，动态化线程池提供了多个维度的监控和告警能力，包括：线程池活跃度、任务的执行Transaction（频率、耗时）、Reject异常、线程池内部统计信息等等，既能帮助用户从多个维度分析线程池的使用情况，又能在出现问题第一时间通知到用户，从而避免故障或加速故障恢复。</p>\n<h4 id=\"1-负载监控和告警\"><a href=\"#1-负载监控和告警\" class=\"headerlink\" title=\"1. 负载监控和告警\"></a>1. 负载监控和告警</h4><p>线程池负载关注的核心问题是：基于当前线程池参数分配的资源够不够。对于这个问题，我们可以从事前和事中两个角度来看。事前，线程池定义了“活跃度”这个概念，来让用户在发生Reject异常之前能够感知线程池负载问题，线程池活跃度计算公式为：线程池活跃度 = activeCount/maximumPoolSize。这个公式代表当活跃线程数趋向于maximumPoolSize的时候，代表线程负载趋高。事中，也可以从两方面来看线程池的过载判定条件，一个是发生了Reject异常，一个是队列中有等待任务（支持定制阈值）。以上两种情况发生了都会触发告警，告警信息会通过大象推送给服务所关联的负责人。</p>\n<p><img src=\"/images/04e73f7186a91d99181e1b5615ce9e4a318600.png\" alt=\"图22 大象告警通知\"></p>\n<p>图22 大象告警通知</p>\n<h4 id=\"2-任务级精细化监控\"><a href=\"#2-任务级精细化监控\" class=\"headerlink\" title=\"2. 任务级精细化监控\"></a>2. 任务级精细化监控</h4><p>在传统的线程池应用场景中，线程池中的任务执行情况对于用户来说是透明的。比如在一个具体的业务场景中，业务开发申请了一个线程池同时用于执行两种任务，一个是发消息任务、一个是发短信任务，这两类任务实际执行的频率和时长对于用户来说没有一个直观的感受，很可能这两类任务不适合共享一个线程池，但是由于用户无法感知，因此也无从优化。动态化线程池内部实现了任务级别的埋点，且允许为不同的业务任务指定具有业务含义的名称，线程池内部基于这个名称做Transaction打点，基于这个功能，用户可以看到线程池内部任务级别的执行情况，且区分业务，任务监控示意图如下图所示：</p>\n<p><img src=\"/images/cd0b9445c3c93a866201b7cfb24d2ce7214776.png\" alt=\"图23 线程池任务执行监控\"></p>\n<p>图23 线程池任务执行监控</p>\n<h4 id=\"3-运行时状态实时查看\"><a href=\"#3-运行时状态实时查看\" class=\"headerlink\" title=\"3. 运行时状态实时查看\"></a>3. 运行时状态实时查看</h4><p>用户基于JDK原生线程池ThreadPoolExecutor提供的几个public的getter方法，可以读取到当前线程池的运行状态以及参数，如下图所示：</p>\n<p><img src=\"/images/aba8d9c09e6f054c7061ddd720a04a26147951.png\" alt=\"图24 线程池实时运行情况\"></p>\n<p>图24 线程池实时运行情况</p>\n<p>动态化线程池基于这几个接口封装了运行时状态实时查看的功能，用户基于这个功能可以了解线程池的实时状态，比如当前有多少个工作线程，执行了多少个任务，队列中等待的任务数等等。效果如下图所示：</p>\n<p><img src=\"/images/38d5fbeaebd4998f3a30d44bd20b996f113233.png\" alt=\"图25 线程池实时运行情况\"></p>\n<p>图25 线程池实时运行情况</p>\n<h3 id=\"3-4-实践总结\"><a href=\"#3-4-实践总结\" class=\"headerlink\" title=\"3.4 实践总结\"></a>3.4 实践总结</h3><p>面对业务中使用线程池遇到的实际问题，我们曾回到支持并发性问题本身来思考有没有取代线程池的方案，也曾尝试着去追求线程池参数设置的合理性，但面对业界方案具体落地的复杂性、可维护性以及真实运行环境的不确定性，我们在前两个方向上可谓“举步维艰”。最终，我们回到线程池参数动态化方向上探索，得出一个且可以解决业务问题的方案，虽然本质上还是没有逃离使用线程池的范畴，但是在成本和收益之间，算是取得了一个很好的平衡。成本在于实现动态化以及监控成本不高，收益在于：在不颠覆原有线程池使用方式的基础之上，从降低线程池参数修改的成本以及多维度监控这两个方面降低了故障发生的概率。希望本文提供的动态化线程池思路能对大家有帮助。</p>\n<h2 id=\"四、参考资料\"><a href=\"#四、参考资料\" class=\"headerlink\" title=\"四、参考资料\"></a>四、参考资料</h2><ul>\n<li>[1] JDK 1.8源码</li>\n<li>[2]<a href=\"https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B%E6%B1%A0\" target=\"_blank\" rel=\"noopener\">维基百科-线程池</a></li>\n<li>[3] <a href=\"https://my.oschina.net/andylucc/blog/648127\" target=\"_blank\" rel=\"noopener\">更好的使用Java线程池</a></li>\n<li>[4] <a href=\"https://en.wikipedia.org/wiki/Pooling_(resource_management)\" target=\"_blank\" rel=\"noopener\">维基百科Pooling(Resource Management)</a></li>\n<li>[5] <a href=\"http://www.ideabuffer.cn/2017/04/04/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%9AThreadPoolExecutor/\" target=\"_blank\" rel=\"noopener\">深入理解Java线程池：ThreadPoolExecutor</a></li>\n<li>[6]《Java并发编程实践》</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java线程池实现原理及实践\"><a href=\"#Java线程池实现原理及实践\" class=\"headerlink\" title=\"Java线程池实现原理及实践\"></a>Java线程池实现原理及实践</h1><p>随着计算机行业的飞速发展，摩尔定律逐渐失效，多核CPU成为主流。使用多线程并行计算逐渐成为开发人员提升服务器性能的基本武器。J.U.C提供的线程池：ThreadPoolExecutor类，帮助开发人员管理线程并方便地执行并行任务。了解并合理使用线程池，是一个开发人员必修的基本功。</p>\n<p>本文开篇简述线程池概念和用途，接着结合线程池的源码，帮助读者领略线程池的设计思路，最后回归实践，通过案例讲述使用线程池遇到的问题，并给出了一种动态化线程池解决方案。</p>\n<h2 id=\"一、写在前面\"><a href=\"#一、写在前面\" class=\"headerlink\" title=\"一、写在前面\"></a>一、写在前面</h2><h3 id=\"1-1-线程池是什么\"><a href=\"#1-1-线程池是什么\" class=\"headerlink\" title=\"1.1 线程池是什么\"></a>1.1 线程池是什么</h3><p>线程池（Thread Pool）是一种基于池化思想管理线程的工具，经常出现在多线程服务器中，如MySQL。</p>\n<p>线程过多会带来额外的开销，其中包括创建销毁线程的开销、调度线程的开销等等，同时也降低了计算机的整体性能。线程池维护多个线程，等待监督管理者分配可并发执行的任务。这种做法，一方面避免了处理任务时创建销毁线程开销的代价，另一方面避免了线程数量膨胀导致的过分调度问题，保证了对内核的充分利用。</p>\n<p>而本文描述线程池是JDK中提供的ThreadPoolExecutor类。</p>\n<p>当然，使用线程池可以带来一系列好处：</p>\n<ul>\n<li><strong>降低资源消耗</strong>：通过池化技术重复利用已创建的线程，降低线程创建和销毁造成的损耗。</li>\n<li><strong>提高响应速度</strong>：任务到达时，无需等待线程创建即可立即执行。</li>\n<li><strong>提高线程的可管理性</strong>：线程是稀缺资源，如果无限制创建，不仅会消耗系统资源，还会因为线程的不合理分布导致资源调度失衡，降低系统的稳定性。使用线程池可以进行统一的分配、调优和监控。</li>\n<li><strong>提供更多更强大的功能</strong>：线程池具备可拓展性，允许开发人员向其中增加更多的功能。比如延时定时线程池ScheduledThreadPoolExecutor，就允许任务延期执行或定期执行。</li>\n</ul>\n<h3 id=\"1-2-线程池解决的问题是什么\"><a href=\"#1-2-线程池解决的问题是什么\" class=\"headerlink\" title=\"1.2 线程池解决的问题是什么\"></a>1.2 线程池解决的问题是什么</h3><p>线程池解决的核心问题就是资源管理问题。在并发环境下，系统不能够确定在任意时刻中，有多少任务需要执行，有多少资源需要投入。这种不确定性将带来以下若干问题：</p>\n<ol>\n<li>频繁申请/销毁资源和调度资源，将带来额外的消耗，可能会非常巨大。</li>\n<li>对资源无限申请缺少抑制手段，易引发系统资源耗尽的风险。</li>\n<li>系统无法合理管理内部的资源分布，会降低系统的稳定性。</li>\n</ol>\n<p>为解决资源分配这个问题，线程池采用了“池化”（Pooling）思想。池化，顾名思义，是为了最大化收益并最小化风险，而将资源统一在一起管理的一种思想。</p>\n<p>Pooling is the grouping together of resources (assets, equipment, personnel, effort, etc.) for the purposes of maximizing advantage or minimizing risk to the users. The term is used in finance, computing and equipment management.——wikipedia</p>\n<p>“池化”思想不仅仅能应用在计算机领域，在金融、设备、人员管理、工作管理等领域也有相关的应用。</p>\n<p>在计算机领域中的表现为：统一管理IT资源，包括服务器、存储、和网络资源等等。通过共享资源，使用户在低投入中获益。除去线程池，还有其他比较典型的几种使用策略包括：</p>\n<ol>\n<li>内存池(Memory Pooling)：预先申请内存，提升申请内存速度，减少内存碎片。</li>\n<li>连接池(Connection Pooling)：预先申请数据库连接，提升申请连接的速度，降低系统的开销。</li>\n<li>实例池(Object Pooling)：循环使用对象，减少资源在初始化和释放时的昂贵损耗。</li>\n</ol>\n<p>在了解完“是什么”和“为什么”之后，下面我们来一起深入一下线程池的内部实现原理。</p>\n<h2 id=\"二、线程池核心设计与实现\"><a href=\"#二、线程池核心设计与实现\" class=\"headerlink\" title=\"二、线程池核心设计与实现\"></a>二、线程池核心设计与实现</h2><p>在前文中，我们了解到：线程池是一种通过“池化”思想，帮助我们管理线程而获取并发性的工具，在Java中的体现是ThreadPoolExecutor类。那么它的的详细设计与实现是什么样的呢？我们会在本章进行详细介绍。</p>\n<h3 id=\"2-1-总体设计\"><a href=\"#2-1-总体设计\" class=\"headerlink\" title=\"2.1 总体设计\"></a>2.1 总体设计</h3><p>Java中的线程池核心实现类是ThreadPoolExecutor，本章基于JDK 1.8的源码来分析Java线程池的核心设计与实现。我们首先来看一下ThreadPoolExecutor的UML类图，了解下ThreadPoolExecutor的继承关系。</p>\n<p><img src=\"/images/912883e51327e0c7a9d753d11896326511272.png\" alt=\"图1 ThreadPoolExecutor UML类图\"></p>\n<p>图1 ThreadPoolExecutor UML类图</p>\n<p>ThreadPoolExecutor实现的顶层接口是Executor，顶层接口Executor提供了一种思想：将任务提交和任务执行进行解耦。用户无需关注如何创建线程，如何调度线程来执行任务，用户只需提供Runnable对象，将任务的运行逻辑提交到执行器(Executor)中，由Executor框架完成线程的调配和任务的执行部分。ExecutorService接口增加了一些能力：（1）扩充执行任务的能力，补充可以为一个或一批异步任务生成Future的方法；（2）提供了管控线程池的方法，比如停止线程池的运行。AbstractExecutorService则是上层的抽象类，将执行任务的流程串联了起来，保证下层的实现只需关注一个执行任务的方法即可。最下层的实现类ThreadPoolExecutor实现最复杂的运行部分，ThreadPoolExecutor将会一方面维护自身的生命周期，另一方面同时管理线程和任务，使两者良好的结合从而执行并行任务。</p>\n<p>ThreadPoolExecutor是如何运行，如何同时维护线程和执行任务的呢？其运行机制如下图所示：</p>\n<p><img src=\"/images/thread-pool.png\" alt=\"图2 ThreadPoolExecutor运行流程\"></p>\n<p>图2 ThreadPoolExecutor运行流程</p>\n<p>线程池在内部实际上构建了一个生产者消费者模型，将线程和任务两者解耦，并不直接关联，从而良好的缓冲任务，复用线程。线程池的运行主要分成两部分：任务管理、线程管理。任务管理部分充当生产者的角色，当任务提交后，线程池会判断该任务后续的流转：（1）直接申请线程执行该任务；（2）缓冲到队列中等待线程执行；（3）拒绝该任务。线程管理部分是消费者，它们被统一维护在线程池内，根据任务请求进行线程的分配，当线程执行完任务后则会继续获取新的任务去执行，最终当线程获取不到任务的时候，线程就会被回收。</p>\n<p>接下来，我们会按照以下三个部分去详细讲解线程池运行机制：</p>\n<ol>\n<li>线程池如何维护自身状态。</li>\n<li>线程池如何管理任务。</li>\n<li>线程池如何管理线程。</li>\n</ol>\n<h3 id=\"2-2-生命周期管理\"><a href=\"#2-2-生命周期管理\" class=\"headerlink\" title=\"2.2 生命周期管理\"></a>2.2 生命周期管理</h3><p>线程池运行的状态，并不是用户显式设置的，而是伴随着线程池的运行，由内部来维护。线程池内部使用一个变量维护两个值：运行状态(runState)和线程数量 (workerCount)。在具体实现中，线程池将运行状态(runState)、线程数量 (workerCount)两个关键参数的维护放在了一起，如下代码所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final AtomicInteger ctl &#x3D; new AtomicInteger(ctlOf(RUNNING, 0));</span><br></pre></td></tr></table></figure>\n\n<p><code>ctl</code>这个AtomicInteger类型，是对线程池的运行状态和线程池中有效线程的数量进行控制的一个字段， 它同时包含两部分的信息：线程池的运行状态 (runState) 和线程池内有效线程的数量 (workerCount)，高3位保存runState，低29位保存workerCount，两个变量之间互不干扰。用一个变量去存储两个值，可避免在做相关决策时，出现不一致的情况，不必为了维护两者的一致，而占用锁资源。通过阅读线程池源代码也可以发现，经常出现要同时判断线程池运行状态和线程数量的情况。线程池也提供了若干方法去供用户获得线程池当前的运行状态、线程个数。这里都使用的是位运算的方式，相比于基本运算，速度也会快很多。</p>\n<p>关于内部封装的获取生命周期状态、获取线程池线程数量的计算方法如以下代码所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static int runStateOf(int c)     &#123; return c &amp; ~CAPACITY; &#125; &#x2F;&#x2F;计算当前运行状态</span><br><span class=\"line\">private static int workerCountOf(int c)  &#123; return c &amp; CAPACITY; &#125;  &#x2F;&#x2F;计算当前线程数量</span><br><span class=\"line\">private static int ctlOf(int rs, int wc) &#123; return rs | wc; &#125;   &#x2F;&#x2F;通过状态和线程数生成ctl</span><br></pre></td></tr></table></figure>\n\n<p>ThreadPoolExecutor的运行状态有5种，分别为：</p>\n<p><img src=\"https://p0.meituan.net/travelcube/62853fa44bfa47d63143babe3b5a4c6e82532.png\" alt=\"img\"></p>\n<p>其生命周期转换如下入所示：</p>\n<p><img src=\"/images/582d1606d57ff99aa0e5f8fc59c7819329028.png\" alt=\"图3 线程池生命周期\"></p>\n<p>图3 线程池生命周期</p>\n<h3 id=\"2-3-任务执行机制\"><a href=\"#2-3-任务执行机制\" class=\"headerlink\" title=\"2.3 任务执行机制\"></a>2.3 任务执行机制</h3><p><strong>2.3.1 任务调度</strong></p>\n<p>任务调度是线程池的主要入口，当用户提交了一个任务，接下来这个任务将如何执行都是由这个阶段决定的。了解这部分就相当于了解了线程池的核心运行机制。</p>\n<p>首先，所有任务的调度都是由execute方法完成的，这部分完成的工作是：检查现在线程池的运行状态、运行线程数、运行策略，决定接下来执行的流程，是直接申请线程执行，或是缓冲到队列中执行，亦或是直接拒绝该任务。其执行过程如下：</p>\n<ol>\n<li>首先检测线程池运行状态，如果不是RUNNING，则直接拒绝，线程池要保证在RUNNING的状态下执行任务。</li>\n<li>如果workerCount &lt; corePoolSize，则创建并启动一个线程来执行新提交的任务。</li>\n<li>如果workerCount &gt;= corePoolSize，且线程池内的阻塞队列未满，则将任务添加到该阻塞队列中。</li>\n<li>如果workerCount &gt;= corePoolSize &amp;&amp; workerCount &lt; maximumPoolSize，且线程池内的阻塞队列已满，则创建并启动一个线程来执行新提交的任务。</li>\n<li>如果workerCount &gt;= maximumPoolSize，并且线程池内的阻塞队列已满, 则根据拒绝策略来处理该任务, 默认的处理方式是直接抛异常。</li>\n</ol>\n<p>其执行流程如下图所示：</p>\n<p><img src=\"/images/31bad766983e212431077ca8da92762050214.png\" alt=\"图4 任务调度流程\"></p>\n<p>图4 任务调度流程</p>\n<p><strong>2.3.2 任务缓冲</strong></p>\n<p>任务缓冲模块是线程池能够管理任务的核心部分。线程池的本质是对任务和线程的管理，而做到这一点最关键的思想就是将任务和线程两者解耦，不让两者直接关联，才可以做后续的分配工作。线程池中是以生产者消费者模式，通过一个阻塞队列来实现的。阻塞队列缓存任务，工作线程从阻塞队列中获取任务。</p>\n<p>阻塞队列(BlockingQueue)是一个支持两个附加操作的队列。这两个附加的操作是：在队列为空时，获取元素的线程会等待队列变为非空。当队列满时，存储元素的线程会等待队列可用。阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。</p>\n<p>下图中展示了线程1往阻塞队列中添加元素，而线程2从阻塞队列中移除元素：</p>\n<p><img src=\"/images/f4d89c87acf102b45be8ccf3ed83352a9497.png\" alt=\"图5 阻塞队列\"></p>\n<p>图5 阻塞队列</p>\n<p>使用不同的队列可以实现不一样的任务存取策略。在这里，我们可以再介绍下阻塞队列的成员：</p>\n<p><img src=\"/images/725a3db5114d95675f2098c12dc331c3316963.png\" alt=\"img\"></p>\n<p><strong>2.3.3 任务申请</strong></p>\n<p>由上文的任务分配部分可知，任务的执行有两种可能：一种是任务直接由新创建的线程执行。另一种是线程从任务队列中获取任务然后执行，执行完任务的空闲线程会再次去从队列中申请任务再去执行。第一种情况仅出现在线程初始创建的时候，第二种是线程获取任务绝大多数的情况。</p>\n<p>线程需要从任务缓存模块中不断地取任务执行，帮助线程从阻塞队列中获取任务，实现线程管理模块和任务管理模块之间的通信。这部分策略由getTask方法实现，其执行流程如下图所示：</p>\n<p><img src=\"/images/49d8041f8480aba5ef59079fcc7143b996706.png\" alt=\"图6 获取任务流程图\"></p>\n<p>图6 获取任务流程图</p>\n<p>getTask这部分进行了多次判断，为的是控制线程的数量，使其符合线程池的状态。如果线程池现在不应该持有那么多线程，则会返回null值。工作线程Worker会不断接收新任务去执行，而当工作线程Worker接收不到任务的时候，就会开始被回收。</p>\n<p><strong>2.3.4 任务拒绝</strong></p>\n<p>任务拒绝模块是线程池的保护部分，线程池有一个最大的容量，当线程池的任务缓存队列已满，并且线程池中的线程数目达到maximumPoolSize时，就需要拒绝掉该任务，采取任务拒绝策略，保护线程池。</p>\n<p>拒绝策略是一个接口，其设计如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface RejectedExecutionHandler &#123;</span><br><span class=\"line\">    void rejectedExecution(Runnable r, ThreadPoolExecutor executor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用户可以通过实现这个接口去定制拒绝策略，也可以选择JDK提供的四种已有拒绝策略，其特点如下：</p>\n<p><img src=\"/images/9ffb64cc4c64c0cb8d38dac01c89c905178456.png\" alt=\"img\"></p>\n<p>2.4 Worker线程管理</p>\n<p>2.4.1 Worker线程</p>\n<p>线程池为了掌握线程的状态并维护线程的生命周期，设计了线程池内的工作线程Worker。我们来看一下它的部分代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final class Worker extends AbstractQueuedSynchronizer implements Runnable&#123;</span><br><span class=\"line\">    final Thread thread;&#x2F;&#x2F;Worker持有的线程</span><br><span class=\"line\">    Runnable firstTask;&#x2F;&#x2F;初始化的任务，可以为null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Worker这个工作线程，实现了Runnable接口，并持有一个线程thread，一个初始化的任务firstTask。thread是在调用构造方法时通过ThreadFactory来创建的线程，可以用来执行任务；firstTask用它来保存传入的第一个任务，这个任务可以有也可以为null。如果这个值是非空的，那么线程就会在启动初期立即执行这个任务，也就对应核心线程创建时的情况；如果这个值是null，那么就需要创建一个线程去执行任务列表（workQueue）中的任务，也就是非核心线程的创建。</p>\n<p>Worker执行任务的模型如下图所示：</p>\n<p><img src=\"/images/03268b9dc49bd30bb63064421bb036bf90315.png\" alt=\"图7 Worker执行任务\"></p>\n<p>图7 Worker执行任务</p>\n<p>线程池需要管理线程的生命周期，需要在线程长时间不运行的时候进行回收。线程池使用一张Hash表去持有线程的引用，这样可以通过添加引用、移除引用这样的操作来控制线程的生命周期。这个时候重要的就是如何判断线程是否在运行。</p>\n<p>Worker是通过继承AQS，使用AQS来实现独占锁这个功能。没有使用可重入锁ReentrantLock，而是使用AQS，为的就是实现不可重入的特性去反应线程现在的执行状态。</p>\n<p>1.lock方法一旦获取了独占锁，表示当前线程正在执行任务中。 2.如果正在执行任务，则不应该中断线程。 3.如果该线程现在不是独占锁的状态，也就是空闲的状态，说明它没有在处理任务，这时可以对该线程进行中断。 4.线程池在执行shutdown方法或tryTerminate方法时会调用interruptIdleWorkers方法来中断空闲的线程，interruptIdleWorkers方法会使用tryLock方法来判断线程池中的线程是否是空闲状态；如果线程是空闲状态则可以安全回收。</p>\n<p>在线程回收过程中就使用到了这种特性，回收过程如下图所示：</p>\n<p><img src=\"/images/9d8dc9cebe59122127460f81a98894bb34085.png\" alt=\"图8 线程池回收过程\"></p>\n<p>图8 线程池回收过程</p>\n<p><strong>2.4.2 Worker线程增加</strong></p>\n<p>增加线程是通过线程池中的addWorker方法，该方法的功能就是增加一个线程，该方法不考虑线程池是在哪个阶段增加的该线程，这个分配线程的策略是在上个步骤完成的，该步骤仅仅完成增加线程，并使它运行，最后返回是否成功这个结果。addWorker方法有两个参数：firstTask、core。firstTask参数用于指定新增的线程执行的第一个任务，该参数可以为空；core参数为true表示在新增线程时会判断当前活动线程数是否少于corePoolSize，false表示新增线程前需要判断当前活动线程数是否少于maximumPoolSize，其执行流程如下图所示：</p>\n<p><img src=\"/images/49527b1bb385f0f43529e57b614f59ae145454.png\" alt=\"图9 申请线程执行流程图\"></p>\n<p>图9 申请线程执行流程图</p>\n<p><strong>2.4.3 Worker线程回收</strong></p>\n<p>线程池中线程的销毁依赖JVM自动的回收，线程池做的工作是根据当前线程池的状态维护一定数量的线程引用，防止这部分线程被JVM回收，当线程池决定哪些线程需要回收时，只需要将其引用消除即可。Worker被创建出来后，就会不断地进行轮询，然后获取任务去执行，核心线程可以无限等待获取任务，非核心线程要限时获取任务。当Worker无法获取到任务，也就是获取的任务为空时，循环会结束，Worker会主动消除自身在线程池内的引用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">  while (task !&#x3D; null || (task &#x3D; getTask()) !&#x3D; null) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;执行任务</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; finally &#123;</span><br><span class=\"line\">  processWorkerExit(w, completedAbruptly);&#x2F;&#x2F;获取不到任务时，主动回收自己</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>线程回收的工作是在processWorkerExit方法完成的。</p>\n<p><img src=\"/images/90ea093549782945f2c968403fdc39d415386.png\" alt=\"图10 线程销毁流程\"></p>\n<p>图10 线程销毁流程</p>\n<p>事实上，在这个方法中，将线程引用移出线程池就已经结束了线程销毁的部分。但由于引起线程销毁的可能性有很多，线程池还要判断是什么引发了这次销毁，是否要改变线程池的现阶段状态，是否要根据新状态，重新分配线程。</p>\n<p><strong>2.4.4 Worker线程执行任务</strong></p>\n<p>在Worker类中的run方法调用了runWorker方法来执行任务，runWorker方法的执行过程如下：</p>\n<p>1.while循环不断地通过getTask()方法获取任务。 2.getTask()方法从阻塞队列中取任务。 3.如果线程池正在停止，那么要保证当前线程是中断状态，否则要保证当前线程不是中断状态。 4.执行任务。 5.如果getTask结果为null则跳出循环，执行processWorkerExit()方法，销毁线程。</p>\n<p>执行流程如下图所示：</p>\n<p><img src=\"/images/879edb4f06043d76cea27a3ff358cb1d45243.png\" alt=\"图11 执行任务流程\"></p>\n<p>图11 执行任务流程</p>\n<h2 id=\"三、线程池在业务中的实践\"><a href=\"#三、线程池在业务中的实践\" class=\"headerlink\" title=\"三、线程池在业务中的实践\"></a>三、线程池在业务中的实践</h2><h3 id=\"3-1-业务背景\"><a href=\"#3-1-业务背景\" class=\"headerlink\" title=\"3.1 业务背景\"></a>3.1 业务背景</h3><p>在当今的互联网业界，为了最大程度利用CPU的多核性能，并行运算的能力是不可或缺的。通过线程池管理线程获取并发性是一个非常基础的操作，让我们来看两个典型的使用线程池获取并发性的场景。</p>\n<p><strong>场景1：快速响应用户请求</strong></p>\n<p><strong>描述</strong>：用户发起的实时请求，服务追求响应时间。比如说用户要查看一个商品的信息，那么我们需要将商品维度的一系列信息如商品的价格、优惠、库存、图片等等聚合起来，展示给用户。</p>\n<p><strong>分析</strong>：从用户体验角度看，这个结果响应的越快越好，如果一个页面半天都刷不出，用户可能就放弃查看这个商品了。而面向用户的功能聚合通常非常复杂，伴随着调用与调用之间的级联、多级级联等情况，业务开发同学往往会选择使用线程池这种简单的方式，将调用封装成任务并行的执行，缩短总体响应时间。另外，使用线程池也是有考量的，这种场景最重要的就是获取最大的响应速度去满足用户，所以应该不设置队列去缓冲并发任务，调高corePoolSize和maxPoolSize去尽可能创造多的线程快速执行任务。</p>\n<p><img src=\"/images/e9a363c8577f211577e4962e9110cb0226733.png\" alt=\"图12 并行执行任务提升任务响应速度\"></p>\n<p>图12 并行执行任务提升任务响应速度</p>\n<p><strong>场景2：快速处理批量任务</strong></p>\n<p><strong>描述</strong>：离线的大量计算任务，需要快速执行。比如说，统计某个报表，需要计算出全国各个门店中有哪些商品有某种属性，用于后续营销策略的分析，那么我们需要查询全国所有门店中的所有商品，并且记录具有某属性的商品，然后快速生成报表。</p>\n<p><strong>分析</strong>：这种场景需要执行大量的任务，我们也会希望任务执行的越快越好。这种情况下，也应该使用多线程策略，并行计算。但与响应速度优先的场景区别在于，这类场景任务量巨大，并不需要瞬时的完成，而是关注如何使用有限的资源，尽可能在单位时间内处理更多的任务，也就是吞吐量优先的问题。所以应该设置队列去缓冲并发任务，调整合适的corePoolSize去设置处理任务的线程数。在这里，设置的线程数过多可能还会引发线程上下文切换频繁的问题，也会降低处理任务的速度，降低吞吐量。</p>\n<p><img src=\"/images/1a1746f33bfdcb03da074d8539ebb2f367563.png\" alt=\"图13 并行执行任务提升批量任务执行速度\"></p>\n<p>图13 并行执行任务提升批量任务执行速度</p>\n<h3 id=\"3-2-实际问题及方案思考\"><a href=\"#3-2-实际问题及方案思考\" class=\"headerlink\" title=\"3.2 实际问题及方案思考\"></a>3.2 实际问题及方案思考</h3><p>线程池使用面临的核心的问题在于：<strong>线程池的参数并不好配置</strong>。一方面线程池的运行机制不是很好理解，配置合理需要强依赖开发人员的个人经验和知识；另一方面，线程池执行的情况和任务类型相关性较大，IO密集型和CPU密集型的任务运行起来的情况差异非常大，这导致业界并没有一些成熟的经验策略帮助开发人员参考。</p>\n<p>关于线程池配置不合理引发的故障，公司内部有较多记录，下面举一些例子：</p>\n<p><strong>Case1</strong>：2018年XX页面展示接口大量调用降级：</p>\n<p><strong>事故描述</strong>：XX页面展示接口产生大量调用降级，数量级在几十到上百。</p>\n<p><strong>事故原因</strong>：该服务展示接口内部逻辑使用线程池做并行计算，由于没有预估好调用的流量，导致最大核心数设置偏小，大量抛出RejectedExecutionException，触发接口降级条件，示意图如下：</p>\n<p><img src=\"/images/1df932840b31f41931bb69e16be2932844240.png\" alt=\"图14 线程数核心设置过小引发RejectExecutionException\"></p>\n<p>图14 线程数核心设置过小引发RejectExecutionException</p>\n<p><strong>Case2</strong>：2018年XX业务服务不可用S2级故障</p>\n<p><strong>事故描述</strong>：XX业务提供的服务执行时间过长，作为上游服务整体超时，大量下游服务调用失败。</p>\n<p><strong>事故原因</strong>：该服务处理请求内部逻辑使用线程池做资源隔离，由于队列设置过长，最大线程数设置失效，导致请求数量增加时，大量任务堆积在队列中，任务执行时间过长，最终导致下游服务的大量调用超时失败。示意图如下：</p>\n<p><img src=\"/images/668e3c90f4b918bfcead2f4280091e9757284.png\" alt=\"图15 线程池队列长度设置过长、corePoolSize设置过小导致任务执行速度低\"></p>\n<p>图15 线程池队列长度设置过长、corePoolSize设置过小导致任务执行速度低</p>\n<p>业务中要使用线程池，而使用不当又会导致故障，那么我们怎样才能更好地使用线程池呢？针对这个问题，我们下面延展几个方向：</p>\n<p><strong>1. 能否不用线程池?</strong></p>\n<p>回到最初的问题，业务使用线程池是为了获取并发性，对于获取并发性，是否可以有什么其他的方案呢替代？我们尝试进行了一些其他方案的调研：</p>\n<p><img src=\"/images/56ab763273b2c03b2f1c37db7b150338414771.png\" alt=\"img\"></p>\n<p>综合考虑，这些新的方案都能在某种情况下提升并行任务的性能，然而本次重点解决的问题是如何更简易、更安全地获得的并发性。另外，Actor模型的应用实际上甚少，只在Scala中使用广泛，协程框架在Java中维护的也不成熟。这三者现阶段都不是足够的易用，也并不能解决业务上现阶段的问题。</p>\n<p><strong>2. 追求参数设置合理性？</strong></p>\n<p>有没有一种计算公式，能够让开发同学很简易地计算出某种场景中的线程池应该是什么参数呢？</p>\n<p>带着这样的疑问，我们调研了业界的一些线程池参数配置方案：</p>\n<p><img src=\"/images/23a44974ff68a08261fb675242b83648181953.png\" alt=\"img\"></p>\n<p>调研了以上业界方案后，我们并没有得出通用的线程池计算方式。并发任务的执行情况和任务类型相关，IO密集型和CPU密集型的任务运行起来的情况差异非常大，但这种占比是较难合理预估的，这导致很难有一个简单有效的通用公式帮我们直接计算出结果。</p>\n<p><strong>3. 线程池参数动态化？</strong></p>\n<p>尽管经过谨慎的评估，仍然不能够保证一次计算出来合适的参数，那么我们是否可以将修改线程池参数的成本降下来，这样至少可以发生故障的时候可以快速调整从而缩短故障恢复的时间呢？基于这个思考，我们是否可以将线程池的参数从代码中迁移到分布式配置中心上，实现线程池参数可动态配置和即时生效，线程池参数动态化前后的参数修改流程对比如下：</p>\n<p><img src=\"/images/c6caa5be64f39758ada0593b995d65fd25982.png\" alt=\"图16 动态修改线程池参数新旧流程对比\"></p>\n<p>图16 动态修改线程池参数新旧流程对比</p>\n<p>基于以上三个方向对比，我们可以看出参数动态化方向简单有效。</p>\n<h3 id=\"3-3-动态化线程池\"><a href=\"#3-3-动态化线程池\" class=\"headerlink\" title=\"3.3 动态化线程池\"></a>3.3 动态化线程池</h3><p><strong>3.3.1 整体设计</strong></p>\n<p>动态化线程池的核心设计包括以下三个方面：</p>\n<ol>\n<li>简化线程池配置：线程池构造参数有8个，但是最核心的是3个：corePoolSize、maximumPoolSize，workQueue，它们最大程度地决定了线程池的任务分配和线程分配策略。考虑到在实际应用中我们获取并发性的场景主要是两种：（1）并行执行子任务，提高响应速度。这种情况下，应该使用同步队列，没有什么任务应该被缓存下来，而是应该立即执行。（2）并行执行大批次任务，提升吞吐量。这种情况下，应该使用有界队列，使用队列去缓冲大批量的任务，队列容量必须声明，防止任务无限制堆积。所以线程池只需要提供这三个关键参数的配置，并且提供两种队列的选择，就可以满足绝大多数的业务需求，Less is More。</li>\n<li>参数可动态修改：为了解决参数不好配，修改参数成本高等问题。在Java线程池留有高扩展性的基础上，封装线程池，允许线程池监听同步外部的消息，根据消息进行修改配置。将线程池的配置放置在平台侧，允许开发同学简单的查看、修改线程池配置。</li>\n<li>增加线程池监控：对某事物缺乏状态的观测，就对其改进无从下手。在线程池执行任务的生命周期添加监控能力，帮助开发同学了解线程池状态。</li>\n</ol>\n<p><img src=\"/images/4d5c410ad23782350cc9f980787151fd54144.png\" alt=\"图17 动态化线程池整体设计\"></p>\n<p>图17 动态化线程池整体设计</p>\n<p><strong>3.3.2 功能架构</strong></p>\n<p>动态化线程池提供如下功能：</p>\n<p><strong>动态调参</strong>：支持线程池参数动态调整、界面化操作；包括修改线程池核心大小、最大核心大小、队列长度等；参数修改后及时生效。 <strong>任务监控</strong>：支持应用粒度、线程池粒度、任务粒度的Transaction监控；可以看到线程池的任务执行情况、最大任务执行时间、平均任务执行时间、95/99线等。 <strong>负载告警</strong>：线程池队列任务积压到一定值的时候会通过大象（美团内部通讯工具）告知应用开发负责人；当线程池负载数达到一定阈值的时候会通过大象告知应用开发负责人。 <strong>操作监控</strong>：创建/修改和删除线程池都会通知到应用的开发负责人。 <strong>操作日志</strong>：可以查看线程池参数的修改记录，谁在什么时候修改了线程池参数、修改前的参数值是什么。 <strong>权限校验</strong>：只有应用开发负责人才能够修改应用的线程池参数。</p>\n<p><img src=\"/images/6c0091e92e90f50f89fd83f3b9eb5472135718.png\" alt=\"图18 动态化线程池功能架构\"></p>\n<p>图18 动态化线程池功能架构</p>\n<p><strong>参数动态化</strong></p>\n<p>JDK原生线程池ThreadPoolExecutor提供了如下几个public的setter方法，如下图所示：</p>\n<p><img src=\"/images/efd32f1211e9cf0a3ca9d35b0dc5de8588353.png\" alt=\"图19 JDK 线程池参数设置接口\"></p>\n<p>图19 JDK 线程池参数设置接口</p>\n<p>JDK允许线程池使用方通过ThreadPoolExecutor的实例来动态设置线程池的核心策略，以setCorePoolSize为方法例，在运行期线程池使用方调用此方法设置corePoolSize之后，线程池会直接覆盖原来的corePoolSize值，并且基于当前值和原始值的比较结果采取不同的处理策略。对于当前值小于当前工作线程数的情况，说明有多余的worker线程，此时会向当前idle的worker线程发起中断请求以实现回收，多余的worker在下次idel的时候也会被回收；对于当前值大于原始值且当前队列中有待执行任务，则线程池会创建新的worker线程来执行队列任务，setCorePoolSize具体流程如下：</p>\n<p><img src=\"/images/9379fe1666818237f842138812bf63bd85645.png\" alt=\"图20 setCorePoolSize方法执行流程\"></p>\n<p>图20 setCorePoolSize方法执行流程</p>\n<p>线程池内部会处理好当前状态做到平滑修改，其他几个方法限于篇幅，这里不一一介绍。重点是基于这几个public方法，我们只需要维护ThreadPoolExecutor的实例，并且在需要修改的时候拿到实例修改其参数即可。基于以上的思路，我们实现了线程池参数的动态化、线程池参数在管理平台可配置可修改，其效果图如下图所示：</p>\n<p><img src=\"/images/414ba7f3abd11e5f805c58635ae10988166121.png\" alt=\"图21 可动态修改线程池参数\"></p>\n<p>图21 可动态修改线程池参数</p>\n<p>用户可以在管理平台上通过线程池的名字找到指定的线程池，然后对其参数进行修改，保存后会实时生效。目前支持的动态参数包括核心数、最大值、队列长度等。除此之外，在界面中，我们还能看到用户可以配置是否开启告警、队列等待任务告警阈值、活跃度告警等等。关于监控和告警，我们下面一节会对齐进行介绍。</p>\n<p><strong>线程池监控</strong></p>\n<p>除了参数动态化之外，为了更好地使用线程池，我们需要对线程池的运行状况有感知，比如当前线程池的负载是怎么样的？分配的资源够不够用？任务的执行情况是怎么样的？是长任务还是短任务？基于对这些问题的思考，动态化线程池提供了多个维度的监控和告警能力，包括：线程池活跃度、任务的执行Transaction（频率、耗时）、Reject异常、线程池内部统计信息等等，既能帮助用户从多个维度分析线程池的使用情况，又能在出现问题第一时间通知到用户，从而避免故障或加速故障恢复。</p>\n<h4 id=\"1-负载监控和告警\"><a href=\"#1-负载监控和告警\" class=\"headerlink\" title=\"1. 负载监控和告警\"></a>1. 负载监控和告警</h4><p>线程池负载关注的核心问题是：基于当前线程池参数分配的资源够不够。对于这个问题，我们可以从事前和事中两个角度来看。事前，线程池定义了“活跃度”这个概念，来让用户在发生Reject异常之前能够感知线程池负载问题，线程池活跃度计算公式为：线程池活跃度 = activeCount/maximumPoolSize。这个公式代表当活跃线程数趋向于maximumPoolSize的时候，代表线程负载趋高。事中，也可以从两方面来看线程池的过载判定条件，一个是发生了Reject异常，一个是队列中有等待任务（支持定制阈值）。以上两种情况发生了都会触发告警，告警信息会通过大象推送给服务所关联的负责人。</p>\n<p><img src=\"/images/04e73f7186a91d99181e1b5615ce9e4a318600.png\" alt=\"图22 大象告警通知\"></p>\n<p>图22 大象告警通知</p>\n<h4 id=\"2-任务级精细化监控\"><a href=\"#2-任务级精细化监控\" class=\"headerlink\" title=\"2. 任务级精细化监控\"></a>2. 任务级精细化监控</h4><p>在传统的线程池应用场景中，线程池中的任务执行情况对于用户来说是透明的。比如在一个具体的业务场景中，业务开发申请了一个线程池同时用于执行两种任务，一个是发消息任务、一个是发短信任务，这两类任务实际执行的频率和时长对于用户来说没有一个直观的感受，很可能这两类任务不适合共享一个线程池，但是由于用户无法感知，因此也无从优化。动态化线程池内部实现了任务级别的埋点，且允许为不同的业务任务指定具有业务含义的名称，线程池内部基于这个名称做Transaction打点，基于这个功能，用户可以看到线程池内部任务级别的执行情况，且区分业务，任务监控示意图如下图所示：</p>\n<p><img src=\"/images/cd0b9445c3c93a866201b7cfb24d2ce7214776.png\" alt=\"图23 线程池任务执行监控\"></p>\n<p>图23 线程池任务执行监控</p>\n<h4 id=\"3-运行时状态实时查看\"><a href=\"#3-运行时状态实时查看\" class=\"headerlink\" title=\"3. 运行时状态实时查看\"></a>3. 运行时状态实时查看</h4><p>用户基于JDK原生线程池ThreadPoolExecutor提供的几个public的getter方法，可以读取到当前线程池的运行状态以及参数，如下图所示：</p>\n<p><img src=\"/images/aba8d9c09e6f054c7061ddd720a04a26147951.png\" alt=\"图24 线程池实时运行情况\"></p>\n<p>图24 线程池实时运行情况</p>\n<p>动态化线程池基于这几个接口封装了运行时状态实时查看的功能，用户基于这个功能可以了解线程池的实时状态，比如当前有多少个工作线程，执行了多少个任务，队列中等待的任务数等等。效果如下图所示：</p>\n<p><img src=\"/images/38d5fbeaebd4998f3a30d44bd20b996f113233.png\" alt=\"图25 线程池实时运行情况\"></p>\n<p>图25 线程池实时运行情况</p>\n<h3 id=\"3-4-实践总结\"><a href=\"#3-4-实践总结\" class=\"headerlink\" title=\"3.4 实践总结\"></a>3.4 实践总结</h3><p>面对业务中使用线程池遇到的实际问题，我们曾回到支持并发性问题本身来思考有没有取代线程池的方案，也曾尝试着去追求线程池参数设置的合理性，但面对业界方案具体落地的复杂性、可维护性以及真实运行环境的不确定性，我们在前两个方向上可谓“举步维艰”。最终，我们回到线程池参数动态化方向上探索，得出一个且可以解决业务问题的方案，虽然本质上还是没有逃离使用线程池的范畴，但是在成本和收益之间，算是取得了一个很好的平衡。成本在于实现动态化以及监控成本不高，收益在于：在不颠覆原有线程池使用方式的基础之上，从降低线程池参数修改的成本以及多维度监控这两个方面降低了故障发生的概率。希望本文提供的动态化线程池思路能对大家有帮助。</p>\n<h2 id=\"四、参考资料\"><a href=\"#四、参考资料\" class=\"headerlink\" title=\"四、参考资料\"></a>四、参考资料</h2><ul>\n<li>[1] JDK 1.8源码</li>\n<li>[2]<a href=\"https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B%E6%B1%A0\" target=\"_blank\" rel=\"noopener\">维基百科-线程池</a></li>\n<li>[3] <a href=\"https://my.oschina.net/andylucc/blog/648127\" target=\"_blank\" rel=\"noopener\">更好的使用Java线程池</a></li>\n<li>[4] <a href=\"https://en.wikipedia.org/wiki/Pooling_(resource_management)\" target=\"_blank\" rel=\"noopener\">维基百科Pooling(Resource Management)</a></li>\n<li>[5] <a href=\"http://www.ideabuffer.cn/2017/04/04/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%9AThreadPoolExecutor/\" target=\"_blank\" rel=\"noopener\">深入理解Java线程池：ThreadPoolExecutor</a></li>\n<li>[6]《Java并发编程实践》</li>\n</ul>\n"},{"title":"Java线程池实现原理及实践","date":"2020-05-22T08:55:27.000Z","_content":"#  AQS 介绍\n\n### 1 AQS 简单介绍\n\nAQS 的全称为（AbstractQueuedSynchronizer），这个类在 java.util.concurrent.locks 包下面。\n\n![类图](/images/54546254.png)\n\nAQS 是一个用来构建锁和同步器的框架，使用 AQS 能简单且高效地构造出应用广泛的大量的同步器，比如我们提到的 ReentrantLock，Semaphore，其他的诸如 ReentrantReadWriteLock，SynchronousQueue，FutureTask(jdk1.7) 等等皆是基于 AQS 的。当然，我们自己也能利用 AQS 非常轻松容易地构造出符合我们自己需求的同步器。\n\n### 2 AQS 原理\n\n> 在面试中被问到并发知识的时候，大多都会被问到“请你说一下自己对于 AQS 原理的理解”。下面给大家一个示例供大家参考，面试不是背题，大家一定要加入自己的思想，即使加入不了自己的思想也要保证自己能够通俗的讲出来而不是背出来。\n\n下面大部分内容其实在 AQS 类注释上已经给出了，不过是英语看着比较吃力一点，感兴趣的话可以看看源码。\n\n#### 2.1 AQS 原理概览\n\n**AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 CLH 队列锁实现的，即将暂时获取不到锁的线程加入到队列中。**\n\n> CLH(Craig,Landin,and Hagersten)队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配。\n\n看个 AQS(AbstractQueuedSynchronizer)原理图：\n\n![453525](/images/453525.png)\n\nAQS 使用一个 int 成员变量来表示同步状态，通过内置的 FIFO 队列来完成获取资源线程的排队工作。AQS 使用 CAS 对该同步状态进行原子操作实现对其值的修改。\n\n```java\nprivate volatile int state;//共享变量，使用volatile修饰保证线程可见性\n```\n\n状态信息通过 protected 类型的`getState`，`setState`，`compareAndSetState`进行操作\n\n```java\n//返回同步状态的当前值\nprotected final int getState() {\n        return state;\n}\n // 设置同步状态的值\nprotected final void setState(int newState) {\n        state = newState;\n}\n//原子地（CAS操作）将同步状态值设置为给定值update如果当前同步状态的值等于expect（期望值）\nprotected final boolean compareAndSetState(int expect, int update) {\n        return unsafe.compareAndSwapInt(this, stateOffset, expect, update);\n}\n```\n\n#### 2.2 AQS 对资源的共享方式\n\n**AQS 定义两种资源共享方式**\n\n**1)Exclusive**（独占）\n\n只有一个线程能执行，如 ReentrantLock。又可分为公平锁和非公平锁,ReentrantLock 同时支持两种锁,下面以 ReentrantLock 对这两种锁的定义做介绍：\n\n- 公平锁：按照线程在队列中的排队顺序，先到者先拿到锁\n- 非公平锁：当线程要获取锁时，先通过两次 CAS 操作去抢锁，如果没抢到，当前线程再加入到队列中等待唤醒。\n\n> 说明：下面这部分关于 `ReentrantLock` 源代码内容节选自：<https://www.javadoop.com/post/AbstractQueuedSynchronizer-2> ，这是一篇很不错文章，推荐阅读。\n\n**下面来看 ReentrantLock 中相关的源代码：**\n\nReentrantLock 默认采用非公平锁，因为考虑获得更好的性能，通过 boolean 来决定是否用公平锁（传入 true 用公平锁）。\n\n```java\n/** Synchronizer providing all implementation mechanics */\nprivate final Sync sync;\npublic ReentrantLock() {\n    // 默认非公平锁\n    sync = new NonfairSync();\n}\npublic ReentrantLock(boolean fair) {\n    sync = fair ? new FairSync() : new NonfairSync();\n}\n```\n\nReentrantLock 中公平锁的 `lock` 方法\n\n```java\nstatic final class FairSync extends Sync {\n    final void lock() {\n        acquire(1);\n    }\n    // AbstractQueuedSynchronizer.acquire(int arg)\n    public final void acquire(int arg) {\n        if (!tryAcquire(arg) &&\n            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n            selfInterrupt();\n    }\n    protected final boolean tryAcquire(int acquires) {\n        final Thread current = Thread.currentThread();\n        int c = getState();\n        if (c == 0) {\n            // 1. 和非公平锁相比，这里多了一个判断：是否有线程在等待\n            if (!hasQueuedPredecessors() &&\n                compareAndSetState(0, acquires)) {\n                setExclusiveOwnerThread(current);\n                return true;\n            }\n        }\n        else if (current == getExclusiveOwnerThread()) {\n            int nextc = c + acquires;\n            if (nextc < 0)\n                throw new Error(\"Maximum lock count exceeded\");\n            setState(nextc);\n            return true;\n        }\n        return false;\n    }\n}\n```\n\n非公平锁的 lock 方法：\n\n```java\nstatic final class NonfairSync extends Sync {\n    final void lock() {\n        // 2. 和公平锁相比，这里会直接先进行一次CAS，成功就返回了\n        if (compareAndSetState(0, 1))\n            setExclusiveOwnerThread(Thread.currentThread());\n        else\n            acquire(1);\n    }\n    // AbstractQueuedSynchronizer.acquire(int arg)\n    public final void acquire(int arg) {\n        if (!tryAcquire(arg) &&\n            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n            selfInterrupt();\n    }\n    protected final boolean tryAcquire(int acquires) {\n        return nonfairTryAcquire(acquires);\n    }\n}\n/**\n * Performs non-fair tryLock.  tryAcquire is implemented in\n * subclasses, but both need nonfair try for trylock method.\n */\nfinal boolean nonfairTryAcquire(int acquires) {\n    final Thread current = Thread.currentThread();\n    int c = getState();\n    if (c == 0) {\n        // 这里没有对阻塞队列进行判断\n        if (compareAndSetState(0, acquires)) {\n            setExclusiveOwnerThread(current);\n            return true;\n        }\n    }\n    else if (current == getExclusiveOwnerThread()) {\n        int nextc = c + acquires;\n        if (nextc < 0) // overflow\n            throw new Error(\"Maximum lock count exceeded\");\n        setState(nextc);\n        return true;\n    }\n    return false;\n}\n```\n\n总结：公平锁和非公平锁只有两处不同：\n\n1. 非公平锁在调用 lock 后，首先就会调用 CAS 进行一次抢锁，如果这个时候恰巧锁没有被占用，那么直接就获取到锁返回了。\n2. 非公平锁在 CAS 失败后，和公平锁一样都会进入到 tryAcquire 方法，在 tryAcquire 方法中，如果发现锁这个时候被释放了（state == 0），非公平锁会直接 CAS 抢锁，但是公平锁会判断等待队列是否有线程处于等待状态，如果有则不去抢锁，乖乖排到后面。\n\n公平锁和非公平锁就这两点区别，如果这两次 CAS 都不成功，那么后面非公平锁和公平锁是一样的，都要进入到阻塞队列等待唤醒。\n\n相对来说，非公平锁会有更好的性能，因为它的吞吐量比较大。当然，非公平锁让获取锁的时间变得更加不确定，可能会导致在阻塞队列中的线程长期处于饥饿状态。\n\n**2)Share**（共享）\n\n多个线程可同时执行，如 Semaphore/CountDownLatch。Semaphore、CountDownLatCh、 CyclicBarrier、ReadWriteLock 我们都会在后面讲到。\n\nReentrantReadWriteLock 可以看成是组合式，因为 ReentrantReadWriteLock 也就是读写锁允许多个线程同时对某一资源进行读。\n\n不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源 state 的获取与释放方式即可，至于具体线程等待队列的维护（如获取资源失败入队/唤醒出队等），AQS 已经在上层已经帮我们实现好了。\n\n#### 2.3 AQS 底层使用了模板方法模式\n\n同步器的设计是基于模板方法模式的，如果需要自定义同步器一般的方式是这样（模板方法模式很经典的一个应用）：\n\n1. 使用者继承 AbstractQueuedSynchronizer 并重写指定的方法。（这些重写方法很简单，无非是对于共享资源 state 的获取和释放）\n2. 将 AQS 组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。\n\n这和我们以往通过实现接口的方式有很大区别，这是模板方法模式很经典的一个运用，下面简单的给大家介绍一下模板方法模式，模板方法模式是一个很容易理解的设计模式之一。\n\n> 模板方法模式是基于”继承“的，主要是为了在不改变模板结构的前提下在子类中重新定义模板中的内容以实现复用代码。举个很简单的例子假如我们要去一个地方的步骤是：购票`buyTicket()`->安检`securityCheck()`->乘坐某某工具回家`ride()`->到达目的地`arrive()`。我们可能乘坐不同的交通工具回家比如飞机或者火车，所以除了`ride()`方法，其他方法的实现几乎相同。我们可以定义一个包含了这些方法的抽象类，然后用户根据自己的需要继承该抽象类然后修改 `ride()`方法。\n\n**AQS 使用了模板方法模式，自定义同步器时需要重写下面几个 AQS 提供的模板方法：**\n\n```java\nisHeldExclusively()//该线程是否正在独占资源。只有用到condition才需要去实现它。\ntryAcquire(int)//独占方式。尝试获取资源，成功则返回true，失败则返回false。\ntryRelease(int)//独占方式。尝试释放资源，成功则返回true，失败则返回false。\ntryAcquireShared(int)//共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。\ntryReleaseShared(int)//共享方式。尝试释放资源，成功则返回true，失败则返回false。\n```\n\n默认情况下，每个方法都抛出 `UnsupportedOperationException`。 这些方法的实现必须是内部线程安全的，并且通常应该简短而不是阻塞。AQS 类中的其他方法都是 final ，所以无法被其他类使用，只有这几个方法可以被其他类使用。\n\n以 ReentrantLock 为例，state 初始化为 0，表示未锁定状态。A 线程 lock()时，会调用 tryAcquire()独占该锁并将 state+1。此后，其他线程再 tryAcquire()时就会失败，直到 A 线程 unlock()到 state=0（即释放锁）为止，其它线程才有机会获取该锁。当然，释放锁之前，A 线程自己是可以重复获取此锁的（state 会累加），这就是可重入的概念。但要注意，获取多少次就要释放多么次，这样才能保证 state 是能回到零态的。\n\n再以 CountDownLatch 以例，任务分为 N 个子线程去执行，state 也初始化为 N（注意 N 要与线程个数一致）。这 N 个子线程是并行执行的，每个子线程执行完后 countDown()一次，state 会 CAS(Compare and Swap)减 1。等到所有子线程都执行完后(即 state=0)，会 unpark()主调用线程，然后主调用线程就会从 await()函数返回，继续后余动作。\n\n一般来说，自定义同步器要么是独占方法，要么是共享方式，他们也只需实现`tryAcquire-tryRelease`、`tryAcquireShared-tryReleaseShared`中的一种即可。但 AQS 也支持自定义同步器同时实现独占和共享两种方式，如`ReentrantReadWriteLock`。\n\n推荐两篇 AQS 原理和相关源码分析的文章：\n\n- <http://www.cnblogs.com/waterystone/p/4920797.html>\n- <https://www.cnblogs.com/chengxiao/archive/2017/07/24/7141160.html>\n\n### 3 Semaphore(信号量)-允许多个线程同时访问\n\n**synchronized 和 ReentrantLock 都是一次只允许一个线程访问某个资源，Semaphore(信号量)可以指定多个线程同时访问某个资源。**\n\n示例代码如下：\n\n```java\n/**\n *\n * @author Snailclimb\n * @date 2018年9月30日\n * @Description: 需要一次性拿一个许可的情况\n */\npublic class SemaphoreExample1 {\n  // 请求的数量\n  private static final int threadCount = 550;\n\n  public static void main(String[] args) throws InterruptedException {\n    // 创建一个具有固定线程数量的线程池对象（如果这里线程池的线程数量给太少的话你会发现执行的很慢）\n    ExecutorService threadPool = Executors.newFixedThreadPool(300);\n    // 一次只能允许执行的线程数量。\n    final Semaphore semaphore = new Semaphore(20);\n\n    for (int i = 0; i < threadCount; i++) {\n      final int threadnum = i;\n      threadPool.execute(() -> {// Lambda 表达式的运用\n        try {\n          semaphore.acquire();// 获取一个许可，所以可运行线程数量为20/1=20\n          test(threadnum);\n          semaphore.release();// 释放一个许可\n        } catch (InterruptedException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        }\n\n      });\n    }\n    threadPool.shutdown();\n    System.out.println(\"finish\");\n  }\n\n  public static void test(int threadnum) throws InterruptedException {\n    Thread.sleep(1000);// 模拟请求的耗时操作\n    System.out.println(\"threadnum:\" + threadnum);\n    Thread.sleep(1000);// 模拟请求的耗时操作\n  }\n}\n```\n\n执行 `acquire` 方法阻塞，直到有一个许可证可以获得然后拿走一个许可证；每个 `release` 方法增加一个许可证，这可能会释放一个阻塞的 acquire 方法。然而，其实并没有实际的许可证这个对象，Semaphore 只是维持了一个可获得许可证的数量。 Semaphore 经常用于限制获取某种资源的线程数量。\n\n当然一次也可以一次拿取和释放多个许可，不过一般没有必要这样做：\n\n```java\nsemaphore.acquire(5);// 获取5个许可，所以可运行线程数量为20/5=4\ntest(threadnum);\nsemaphore.release(5);// 获取5个许可，所以可运行线程数量为20/5=4\n```\n\n除了 `acquire`方法之外，另一个比较常用的与之对应的方法是`tryAcquire`方法，该方法如果获取不到许可就立即返回 false。\n\nSemaphore 有两种模式，公平模式和非公平模式。\n\n- **公平模式：** 调用 acquire 的顺序就是获取许可证的顺序，遵循 FIFO；\n- **非公平模式：** 抢占式的。\n\n**Semaphore 对应的两个构造方法如下：**\n\n```java\n   public Semaphore(int permits) {\n        sync = new NonfairSync(permits);\n    }\n\n    public Semaphore(int permits, boolean fair) {\n        sync = fair ? new FairSync(permits) : new NonfairSync(permits);\n    }\n```\n\n**这两个构造方法，都必须提供许可的数量，第二个构造方法可以指定是公平模式还是非公平模式，默认非公平模式。**\n\n[issue645补充内容](https://github.com/Snailclimb/JavaGuide/issues/645) ：Semaphore与CountDownLatch一样，也是共享锁的一种实现。它默认构造AQS的state为permits。当执行任务的线程数量超出permits,那么多余的线程将会被放入阻塞队列Park,并自旋判断state是否大于0。只有当state大于0的时候，阻塞的线程才能继续执行,此时先前执行任务的线程继续执行release方法，release方法使得state的变量会加1，那么自旋的线程便会判断成功。 如此，每次只有最多不超过permits数量的线程能自旋成功，便限制了执行任务线程的数量。\n\n由于篇幅问题，如果对 Semaphore 源码感兴趣的朋友可以看下这篇文章：<https://juejin.im/post/5ae755366fb9a07ab508adc6>\n\n### 4 CountDownLatch （倒计时器）\n\nCountDownLatch允许 count 个线程阻塞在一个地方，直至所有线程的任务都执行完毕。在 Java 并发中，countdownlatch 的概念是一个常见的面试题，所以一定要确保你很好的理解了它。\n\nCountDownLatch是共享锁的一种实现,它默认构造 AQS 的 state 值为 count。当线程使用countDown方法时,其实使用了`tryReleaseShared`方法以CAS的操作来减少state,直至state为0就代表所有的线程都调用了countDown方法。当调用await方法的时候，如果state不为0，就代表仍然有线程没有调用countDown方法，那么就把已经调用过countDown的线程都放入阻塞队列Park,并自旋CAS判断state == 0，直至最后一个线程调用了countDown，使得state == 0，于是阻塞的线程便判断成功，全部往下执行。\n\n#### 4.1 CountDownLatch 的两种典型用法\n\n1. 某一线程在开始运行前等待 n 个线程执行完毕。将 CountDownLatch 的计数器初始化为 n ：`new CountDownLatch(n)`，每当一个任务线程执行完毕，就将计数器减 1 `countdownlatch.countDown()`，当计数器的值变为 0 时，在`CountDownLatch上 await()` 的线程就会被唤醒。一个典型应用场景就是启动一个服务时，主线程需要等待多个组件加载完毕，之后再继续执行。\n2. 实现多个线程开始执行任务的最大并行性。注意是并行性，不是并发，强调的是多个线程在某一时刻同时开始执行。类似于赛跑，将多个线程放到起点，等待发令枪响，然后同时开跑。做法是初始化一个共享的 `CountDownLatch` 对象，将其计数器初始化为 1 ：`new CountDownLatch(1)`，多个线程在开始执行任务前首先 `coundownlatch.await()`，当主线程调用 countDown() 时，计数器变为 0，多个线程同时被唤醒。\n\n#### 4.2 CountDownLatch 的使用示例\n\n```java\n/**\n *\n * @author SnailClimb\n * @date 2018年10月1日\n * @Description: CountDownLatch 使用方法示例\n */\npublic class CountDownLatchExample1 {\n  // 请求的数量\n  private static final int threadCount = 550;\n\n  public static void main(String[] args) throws InterruptedException {\n    // 创建一个具有固定线程数量的线程池对象（如果这里线程池的线程数量给太少的话你会发现执行的很慢）\n    ExecutorService threadPool = Executors.newFixedThreadPool(300);\n    final CountDownLatch countDownLatch = new CountDownLatch(threadCount);\n    for (int i = 0; i < threadCount; i++) {\n      final int threadnum = i;\n      threadPool.execute(() -> {// Lambda 表达式的运用\n        try {\n          test(threadnum);\n        } catch (InterruptedException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        } finally {\n          countDownLatch.countDown();// 表示一个请求已经被完成\n        }\n\n      });\n    }\n    countDownLatch.await();\n    threadPool.shutdown();\n    System.out.println(\"finish\");\n  }\n\n  public static void test(int threadnum) throws InterruptedException {\n    Thread.sleep(1000);// 模拟请求的耗时操作\n    System.out.println(\"threadnum:\" + threadnum);\n    Thread.sleep(1000);// 模拟请求的耗时操作\n  }\n}\n```\n\n上面的代码中，我们定义了请求的数量为 550，当这 550 个请求被处理完成之后，才会执行`System.out.println(\"finish\");`。\n\n与 CountDownLatch 的第一次交互是主线程等待其他线程。主线程必须在启动其他线程后立即调用 `CountDownLatch.await()` 方法。这样主线程的操作就会在这个方法上阻塞，直到其他线程完成各自的任务。\n\n其他 N 个线程必须引用闭锁对象，因为他们需要通知 `CountDownLatch` 对象，他们已经完成了各自的任务。这种通知机制是通过 `CountDownLatch.countDown()`方法来完成的；每调用一次这个方法，在构造函数中初始化的 count 值就减 1。所以当 N 个线程都调 用了这个方法，count 的值等于 0，然后主线程就能通过 `await()`方法，恢复执行自己的任务。\n\n再插一嘴：`CountDownLatch` 的 `await()` 方法使用不当很容易产生死锁，比如我们上面代码中的 for 循环改为：\n\n```java\nfor (int i = 0; i < threadCount-1; i++) {\n.......\n}\n```\n\n这样就导致 `count` 的值没办法等于 0，然后就会导致一直等待。\n\n如果对CountDownLatch源码感兴趣的朋友，可以查看： [【JUC】JDK1.8源码分析之CountDownLatch（五）](https://www.cnblogs.com/leesf456/p/5406191.html)\n\n#### 4.3 CountDownLatch 的不足\n\nCountDownLatch 是一次性的，计数器的值只能在构造方法中初始化一次，之后没有任何机制再次对其设置值，当 CountDownLatch 使用完毕后，它不能再次被使用。\n\n#### 4.4 CountDownLatch 相常见面试题\n\n解释一下 CountDownLatch 概念？\n\nCountDownLatch 和 CyclicBarrier 的不同之处？\n\n给出一些 CountDownLatch 使用的例子？\n\nCountDownLatch 类中主要的方法？\n\n### 5 CyclicBarrier(循环栅栏)\n\nCyclicBarrier 和 CountDownLatch 非常类似，它也可以实现线程间的技术等待，但是它的功能比 CountDownLatch 更加复杂和强大。主要应用场景和 CountDownLatch 类似。\n\n> CountDownLatch的实现是基于AQS的，而CycliBarrier是基于 ReentrantLock(ReentrantLock也属于AQS同步器)和 Condition 的.\n\nCyclicBarrier 的字面意思是可循环使用（Cyclic）的屏障（Barrier）。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。CyclicBarrier 默认的构造方法是 `CyclicBarrier(int parties)`，其参数表示屏障拦截的线程数量，每个线程调用`await`方法告诉 CyclicBarrier 我已经到达了屏障，然后当前线程被阻塞。\n\n再来看一下它的构造函数：\n\n```java\npublic CyclicBarrier(int parties) {\n    this(parties, null);\n}\n\npublic CyclicBarrier(int parties, Runnable barrierAction) {\n    if (parties <= 0) throw new IllegalArgumentException();\n    this.parties = parties;\n    this.count = parties;\n    this.barrierCommand = barrierAction;\n}\n```\n\n其中，parties 就代表了有拦截的线程的数量，当拦截的线程数量达到这个值的时候就打开栅栏，让所有线程通过。\n\n#### 5.1 CyclicBarrier 的应用场景\n\nCyclicBarrier 可以用于多线程计算数据，最后合并计算结果的应用场景。比如我们用一个 Excel 保存了用户所有银行流水，每个 Sheet 保存一个帐户近一年的每笔银行流水，现在需要统计用户的日均银行流水，先用多线程处理每个 sheet 里的银行流水，都执行完之后，得到每个 sheet 的日均银行流水，最后，再用 barrierAction 用这些线程的计算结果，计算出整个 Excel 的日均银行流水。\n\n#### 5.2 CyclicBarrier 的使用示例\n\n示例 1：\n\n```java\n/**\n *\n * @author Snailclimb\n * @date 2018年10月1日\n * @Description: 测试 CyclicBarrier 类中带参数的 await() 方法\n */\npublic class CyclicBarrierExample2 {\n  // 请求的数量\n  private static final int threadCount = 550;\n  // 需要同步的线程数量\n  private static final CyclicBarrier cyclicBarrier = new CyclicBarrier(5);\n\n  public static void main(String[] args) throws InterruptedException {\n    // 创建线程池\n    ExecutorService threadPool = Executors.newFixedThreadPool(10);\n\n    for (int i = 0; i < threadCount; i++) {\n      final int threadNum = i;\n      Thread.sleep(1000);\n      threadPool.execute(() -> {\n        try {\n          test(threadNum);\n        } catch (InterruptedException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        } catch (BrokenBarrierException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        }\n      });\n    }\n    threadPool.shutdown();\n  }\n\n  public static void test(int threadnum) throws InterruptedException, BrokenBarrierException {\n    System.out.println(\"threadnum:\" + threadnum + \"is ready\");\n    try {\n      /**等待60秒，保证子线程完全执行结束*/\n      cyclicBarrier.await(60, TimeUnit.SECONDS);\n    } catch (Exception e) {\n      System.out.println(\"-----CyclicBarrierException------\");\n    }\n    System.out.println(\"threadnum:\" + threadnum + \"is finish\");\n  }\n\n}\n```\n\n运行结果，如下：\n\n```java\nthreadnum:0is ready\nthreadnum:1is ready\nthreadnum:2is ready\nthreadnum:3is ready\nthreadnum:4is ready\nthreadnum:4is finish\nthreadnum:0is finish\nthreadnum:1is finish\nthreadnum:2is finish\nthreadnum:3is finish\nthreadnum:5is ready\nthreadnum:6is ready\nthreadnum:7is ready\nthreadnum:8is ready\nthreadnum:9is ready\nthreadnum:9is finish\nthreadnum:5is finish\nthreadnum:8is finish\nthreadnum:7is finish\nthreadnum:6is finish\n......\n```\n\n可以看到当线程数量也就是请求数量达到我们定义的 5 个的时候， `await`方法之后的方法才被执行。\n\n另外，CyclicBarrier 还提供一个更高级的构造函数`CyclicBarrier(int parties, Runnable barrierAction)`，用于在线程到达屏障时，优先执行`barrierAction`，方便处理更复杂的业务场景。示例代码如下：\n\n```java\n/**\n *\n * @author SnailClimb\n * @date 2018年10月1日\n * @Description: 新建 CyclicBarrier 的时候指定一个 Runnable\n */\npublic class CyclicBarrierExample3 {\n  // 请求的数量\n  private static final int threadCount = 550;\n  // 需要同步的线程数量\n  private static final CyclicBarrier cyclicBarrier = new CyclicBarrier(5, () -> {\n    System.out.println(\"------当线程数达到之后，优先执行------\");\n  });\n\n  public static void main(String[] args) throws InterruptedException {\n    // 创建线程池\n    ExecutorService threadPool = Executors.newFixedThreadPool(10);\n\n    for (int i = 0; i < threadCount; i++) {\n      final int threadNum = i;\n      Thread.sleep(1000);\n      threadPool.execute(() -> {\n        try {\n          test(threadNum);\n        } catch (InterruptedException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        } catch (BrokenBarrierException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        }\n      });\n    }\n    threadPool.shutdown();\n  }\n\n  public static void test(int threadnum) throws InterruptedException, BrokenBarrierException {\n    System.out.println(\"threadnum:\" + threadnum + \"is ready\");\n    cyclicBarrier.await();\n    System.out.println(\"threadnum:\" + threadnum + \"is finish\");\n  }\n\n}\n```\n\n运行结果，如下：\n\n```java\nthreadnum:0is ready\nthreadnum:1is ready\nthreadnum:2is ready\nthreadnum:3is ready\nthreadnum:4is ready\n------当线程数达到之后，优先执行------\nthreadnum:4is finish\nthreadnum:0is finish\nthreadnum:2is finish\nthreadnum:1is finish\nthreadnum:3is finish\nthreadnum:5is ready\nthreadnum:6is ready\nthreadnum:7is ready\nthreadnum:8is ready\nthreadnum:9is ready\n------当线程数达到之后，优先执行------\nthreadnum:9is finish\nthreadnum:5is finish\nthreadnum:6is finish\nthreadnum:8is finish\nthreadnum:7is finish\n......\n```\n\n#### 5.3 `CyclicBarrier`源码分析\n\n当调用 `CyclicBarrier` 对象调用 `await()` 方法时，实际上调用的是`dowait(false, 0L)`方法。 `await()` 方法就像树立起一个栅栏的行为一样，将线程挡住了，当拦住的线程数量达到 parties 的值时，栅栏才会打开，线程才得以通过执行。\n\n```java\n    public int await() throws InterruptedException, BrokenBarrierException {\n        try {\n            return dowait(false, 0L);\n        } catch (TimeoutException toe) {\n            throw new Error(toe); // cannot happen\n        }\n    }\n```\n\n`dowait(false, 0L)`：\n\n```java\n    // 当线程数量或者请求数量达到 count 时 await 之后的方法才会被执行。上面的示例中 count 的值就为 5。\n    private int count;\n    /**\n     * Main barrier code, covering the various policies.\n     */\n    private int dowait(boolean timed, long nanos)\n        throws InterruptedException, BrokenBarrierException,\n               TimeoutException {\n        final ReentrantLock lock = this.lock;\n        // 锁住\n        lock.lock();\n        try {\n            final Generation g = generation;\n\n            if (g.broken)\n                throw new BrokenBarrierException();\n\n            // 如果线程中断了，抛出异常\n            if (Thread.interrupted()) {\n                breakBarrier();\n                throw new InterruptedException();\n            }\n            // cout减1\n            int index = --count;\n            // 当 count 数量减为 0 之后说明最后一个线程已经到达栅栏了，也就是达到了可以执行await 方法之后的条件\n            if (index == 0) {  // tripped\n                boolean ranAction = false;\n                try {\n                    final Runnable command = barrierCommand;\n                    if (command != null)\n                        command.run();\n                    ranAction = true;\n                    // 将 count 重置为 parties 属性的初始化值\n                    // 唤醒之前等待的线程\n                    // 下一波执行开始\n                    nextGeneration();\n                    return 0;\n                } finally {\n                    if (!ranAction)\n                        breakBarrier();\n                }\n            }\n\n            // loop until tripped, broken, interrupted, or timed out\n            for (;;) {\n                try {\n                    if (!timed)\n                        trip.await();\n                    else if (nanos > 0L)\n                        nanos = trip.awaitNanos(nanos);\n                } catch (InterruptedException ie) {\n                    if (g == generation && ! g.broken) {\n                        breakBarrier();\n                        throw ie;\n                    } else {\n                        // We're about to finish waiting even if we had not\n                        // been interrupted, so this interrupt is deemed to\n                        // \"belong\" to subsequent execution.\n                        Thread.currentThread().interrupt();\n                    }\n                }\n\n                if (g.broken)\n                    throw new BrokenBarrierException();\n\n                if (g != generation)\n                    return index;\n\n                if (timed && nanos <= 0L) {\n                    breakBarrier();\n                    throw new TimeoutException();\n                }\n            }\n        } finally {\n            lock.unlock();\n        }\n    }\n```\n\n总结：`CyclicBarrier` 内部通过一个 count 变量作为计数器，cout 的初始值为 parties 属性的初始化值，每当一个线程到了栅栏这里了，那么就将计数器减一。如果 count 值为 0 了，表示这是这一代最后一个线程到达栅栏，就尝试执行我们构造方法中输入的任务。\n\n#### 5.4 CyclicBarrier 和 CountDownLatch 的区别\n\n**下面这个是国外一个大佬的回答：**\n\nCountDownLatch 是计数器，只能使用一次，而 CyclicBarrier 的计数器提供 reset 功能，可以多次使用。但是我不那么认为它们之间的区别仅仅就是这么简单的一点。我们来从 jdk 作者设计的目的来看，javadoc 是这么描述它们的：\n\n> CountDownLatch: A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes.(CountDownLatch: 一个或者多个线程，等待其他多个线程完成某件事情之后才能执行；) CyclicBarrier : A synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point.(CyclicBarrier : 多个线程互相等待，直到到达同一个同步点，再继续一起执行。)\n\n对于 CountDownLatch 来说，重点是“一个线程（多个线程）等待”，而其他的 N 个线程在完成“某件事情”之后，可以终止，也可以等待。而对于 CyclicBarrier，重点是多个线程，在任意一个线程没有完成，所有的线程都必须等待。\n\nCountDownLatch 是计数器，线程完成一个记录一个，只不过计数不是递增而是递减，而 CyclicBarrier 更像是一个阀门，需要所有线程都到达，阀门才能打开，然后继续执行。\n\n### 6 ReentrantLock 和 ReentrantReadWriteLock\n\nReentrantLock 和 synchronized 的区别在上面已经讲过了这里就不多做讲解。另外，需要注意的是：读写锁 ReentrantReadWriteLock 可以保证多个线程可以同时读，所以在读操作远大于写操作的时候，读写锁就非常有用了。\n\n### 参考\n\n- <https://juejin.im/post/5ae755256fb9a07ac3634067>\n- <https://blog.csdn.net/u010185262/article/details/54692886>\n- <https://blog.csdn.net/tolcf/article/details/50925145?utm_source=blogxgwz0>","source":"_posts/java/java-syc-AQS.md","raw":"---\ntitle: Java线程池实现原理及实践\ndate: 2020-05-22 16:55:27\ntags:\n    - java\n    - concurrent\n    - AQS\ncategories:\n    - java\n    - concurrent\n    - AQS\n---\n#  AQS 介绍\n\n### 1 AQS 简单介绍\n\nAQS 的全称为（AbstractQueuedSynchronizer），这个类在 java.util.concurrent.locks 包下面。\n\n![类图](/images/54546254.png)\n\nAQS 是一个用来构建锁和同步器的框架，使用 AQS 能简单且高效地构造出应用广泛的大量的同步器，比如我们提到的 ReentrantLock，Semaphore，其他的诸如 ReentrantReadWriteLock，SynchronousQueue，FutureTask(jdk1.7) 等等皆是基于 AQS 的。当然，我们自己也能利用 AQS 非常轻松容易地构造出符合我们自己需求的同步器。\n\n### 2 AQS 原理\n\n> 在面试中被问到并发知识的时候，大多都会被问到“请你说一下自己对于 AQS 原理的理解”。下面给大家一个示例供大家参考，面试不是背题，大家一定要加入自己的思想，即使加入不了自己的思想也要保证自己能够通俗的讲出来而不是背出来。\n\n下面大部分内容其实在 AQS 类注释上已经给出了，不过是英语看着比较吃力一点，感兴趣的话可以看看源码。\n\n#### 2.1 AQS 原理概览\n\n**AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 CLH 队列锁实现的，即将暂时获取不到锁的线程加入到队列中。**\n\n> CLH(Craig,Landin,and Hagersten)队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配。\n\n看个 AQS(AbstractQueuedSynchronizer)原理图：\n\n![453525](/images/453525.png)\n\nAQS 使用一个 int 成员变量来表示同步状态，通过内置的 FIFO 队列来完成获取资源线程的排队工作。AQS 使用 CAS 对该同步状态进行原子操作实现对其值的修改。\n\n```java\nprivate volatile int state;//共享变量，使用volatile修饰保证线程可见性\n```\n\n状态信息通过 protected 类型的`getState`，`setState`，`compareAndSetState`进行操作\n\n```java\n//返回同步状态的当前值\nprotected final int getState() {\n        return state;\n}\n // 设置同步状态的值\nprotected final void setState(int newState) {\n        state = newState;\n}\n//原子地（CAS操作）将同步状态值设置为给定值update如果当前同步状态的值等于expect（期望值）\nprotected final boolean compareAndSetState(int expect, int update) {\n        return unsafe.compareAndSwapInt(this, stateOffset, expect, update);\n}\n```\n\n#### 2.2 AQS 对资源的共享方式\n\n**AQS 定义两种资源共享方式**\n\n**1)Exclusive**（独占）\n\n只有一个线程能执行，如 ReentrantLock。又可分为公平锁和非公平锁,ReentrantLock 同时支持两种锁,下面以 ReentrantLock 对这两种锁的定义做介绍：\n\n- 公平锁：按照线程在队列中的排队顺序，先到者先拿到锁\n- 非公平锁：当线程要获取锁时，先通过两次 CAS 操作去抢锁，如果没抢到，当前线程再加入到队列中等待唤醒。\n\n> 说明：下面这部分关于 `ReentrantLock` 源代码内容节选自：<https://www.javadoop.com/post/AbstractQueuedSynchronizer-2> ，这是一篇很不错文章，推荐阅读。\n\n**下面来看 ReentrantLock 中相关的源代码：**\n\nReentrantLock 默认采用非公平锁，因为考虑获得更好的性能，通过 boolean 来决定是否用公平锁（传入 true 用公平锁）。\n\n```java\n/** Synchronizer providing all implementation mechanics */\nprivate final Sync sync;\npublic ReentrantLock() {\n    // 默认非公平锁\n    sync = new NonfairSync();\n}\npublic ReentrantLock(boolean fair) {\n    sync = fair ? new FairSync() : new NonfairSync();\n}\n```\n\nReentrantLock 中公平锁的 `lock` 方法\n\n```java\nstatic final class FairSync extends Sync {\n    final void lock() {\n        acquire(1);\n    }\n    // AbstractQueuedSynchronizer.acquire(int arg)\n    public final void acquire(int arg) {\n        if (!tryAcquire(arg) &&\n            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n            selfInterrupt();\n    }\n    protected final boolean tryAcquire(int acquires) {\n        final Thread current = Thread.currentThread();\n        int c = getState();\n        if (c == 0) {\n            // 1. 和非公平锁相比，这里多了一个判断：是否有线程在等待\n            if (!hasQueuedPredecessors() &&\n                compareAndSetState(0, acquires)) {\n                setExclusiveOwnerThread(current);\n                return true;\n            }\n        }\n        else if (current == getExclusiveOwnerThread()) {\n            int nextc = c + acquires;\n            if (nextc < 0)\n                throw new Error(\"Maximum lock count exceeded\");\n            setState(nextc);\n            return true;\n        }\n        return false;\n    }\n}\n```\n\n非公平锁的 lock 方法：\n\n```java\nstatic final class NonfairSync extends Sync {\n    final void lock() {\n        // 2. 和公平锁相比，这里会直接先进行一次CAS，成功就返回了\n        if (compareAndSetState(0, 1))\n            setExclusiveOwnerThread(Thread.currentThread());\n        else\n            acquire(1);\n    }\n    // AbstractQueuedSynchronizer.acquire(int arg)\n    public final void acquire(int arg) {\n        if (!tryAcquire(arg) &&\n            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n            selfInterrupt();\n    }\n    protected final boolean tryAcquire(int acquires) {\n        return nonfairTryAcquire(acquires);\n    }\n}\n/**\n * Performs non-fair tryLock.  tryAcquire is implemented in\n * subclasses, but both need nonfair try for trylock method.\n */\nfinal boolean nonfairTryAcquire(int acquires) {\n    final Thread current = Thread.currentThread();\n    int c = getState();\n    if (c == 0) {\n        // 这里没有对阻塞队列进行判断\n        if (compareAndSetState(0, acquires)) {\n            setExclusiveOwnerThread(current);\n            return true;\n        }\n    }\n    else if (current == getExclusiveOwnerThread()) {\n        int nextc = c + acquires;\n        if (nextc < 0) // overflow\n            throw new Error(\"Maximum lock count exceeded\");\n        setState(nextc);\n        return true;\n    }\n    return false;\n}\n```\n\n总结：公平锁和非公平锁只有两处不同：\n\n1. 非公平锁在调用 lock 后，首先就会调用 CAS 进行一次抢锁，如果这个时候恰巧锁没有被占用，那么直接就获取到锁返回了。\n2. 非公平锁在 CAS 失败后，和公平锁一样都会进入到 tryAcquire 方法，在 tryAcquire 方法中，如果发现锁这个时候被释放了（state == 0），非公平锁会直接 CAS 抢锁，但是公平锁会判断等待队列是否有线程处于等待状态，如果有则不去抢锁，乖乖排到后面。\n\n公平锁和非公平锁就这两点区别，如果这两次 CAS 都不成功，那么后面非公平锁和公平锁是一样的，都要进入到阻塞队列等待唤醒。\n\n相对来说，非公平锁会有更好的性能，因为它的吞吐量比较大。当然，非公平锁让获取锁的时间变得更加不确定，可能会导致在阻塞队列中的线程长期处于饥饿状态。\n\n**2)Share**（共享）\n\n多个线程可同时执行，如 Semaphore/CountDownLatch。Semaphore、CountDownLatCh、 CyclicBarrier、ReadWriteLock 我们都会在后面讲到。\n\nReentrantReadWriteLock 可以看成是组合式，因为 ReentrantReadWriteLock 也就是读写锁允许多个线程同时对某一资源进行读。\n\n不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源 state 的获取与释放方式即可，至于具体线程等待队列的维护（如获取资源失败入队/唤醒出队等），AQS 已经在上层已经帮我们实现好了。\n\n#### 2.3 AQS 底层使用了模板方法模式\n\n同步器的设计是基于模板方法模式的，如果需要自定义同步器一般的方式是这样（模板方法模式很经典的一个应用）：\n\n1. 使用者继承 AbstractQueuedSynchronizer 并重写指定的方法。（这些重写方法很简单，无非是对于共享资源 state 的获取和释放）\n2. 将 AQS 组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。\n\n这和我们以往通过实现接口的方式有很大区别，这是模板方法模式很经典的一个运用，下面简单的给大家介绍一下模板方法模式，模板方法模式是一个很容易理解的设计模式之一。\n\n> 模板方法模式是基于”继承“的，主要是为了在不改变模板结构的前提下在子类中重新定义模板中的内容以实现复用代码。举个很简单的例子假如我们要去一个地方的步骤是：购票`buyTicket()`->安检`securityCheck()`->乘坐某某工具回家`ride()`->到达目的地`arrive()`。我们可能乘坐不同的交通工具回家比如飞机或者火车，所以除了`ride()`方法，其他方法的实现几乎相同。我们可以定义一个包含了这些方法的抽象类，然后用户根据自己的需要继承该抽象类然后修改 `ride()`方法。\n\n**AQS 使用了模板方法模式，自定义同步器时需要重写下面几个 AQS 提供的模板方法：**\n\n```java\nisHeldExclusively()//该线程是否正在独占资源。只有用到condition才需要去实现它。\ntryAcquire(int)//独占方式。尝试获取资源，成功则返回true，失败则返回false。\ntryRelease(int)//独占方式。尝试释放资源，成功则返回true，失败则返回false。\ntryAcquireShared(int)//共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。\ntryReleaseShared(int)//共享方式。尝试释放资源，成功则返回true，失败则返回false。\n```\n\n默认情况下，每个方法都抛出 `UnsupportedOperationException`。 这些方法的实现必须是内部线程安全的，并且通常应该简短而不是阻塞。AQS 类中的其他方法都是 final ，所以无法被其他类使用，只有这几个方法可以被其他类使用。\n\n以 ReentrantLock 为例，state 初始化为 0，表示未锁定状态。A 线程 lock()时，会调用 tryAcquire()独占该锁并将 state+1。此后，其他线程再 tryAcquire()时就会失败，直到 A 线程 unlock()到 state=0（即释放锁）为止，其它线程才有机会获取该锁。当然，释放锁之前，A 线程自己是可以重复获取此锁的（state 会累加），这就是可重入的概念。但要注意，获取多少次就要释放多么次，这样才能保证 state 是能回到零态的。\n\n再以 CountDownLatch 以例，任务分为 N 个子线程去执行，state 也初始化为 N（注意 N 要与线程个数一致）。这 N 个子线程是并行执行的，每个子线程执行完后 countDown()一次，state 会 CAS(Compare and Swap)减 1。等到所有子线程都执行完后(即 state=0)，会 unpark()主调用线程，然后主调用线程就会从 await()函数返回，继续后余动作。\n\n一般来说，自定义同步器要么是独占方法，要么是共享方式，他们也只需实现`tryAcquire-tryRelease`、`tryAcquireShared-tryReleaseShared`中的一种即可。但 AQS 也支持自定义同步器同时实现独占和共享两种方式，如`ReentrantReadWriteLock`。\n\n推荐两篇 AQS 原理和相关源码分析的文章：\n\n- <http://www.cnblogs.com/waterystone/p/4920797.html>\n- <https://www.cnblogs.com/chengxiao/archive/2017/07/24/7141160.html>\n\n### 3 Semaphore(信号量)-允许多个线程同时访问\n\n**synchronized 和 ReentrantLock 都是一次只允许一个线程访问某个资源，Semaphore(信号量)可以指定多个线程同时访问某个资源。**\n\n示例代码如下：\n\n```java\n/**\n *\n * @author Snailclimb\n * @date 2018年9月30日\n * @Description: 需要一次性拿一个许可的情况\n */\npublic class SemaphoreExample1 {\n  // 请求的数量\n  private static final int threadCount = 550;\n\n  public static void main(String[] args) throws InterruptedException {\n    // 创建一个具有固定线程数量的线程池对象（如果这里线程池的线程数量给太少的话你会发现执行的很慢）\n    ExecutorService threadPool = Executors.newFixedThreadPool(300);\n    // 一次只能允许执行的线程数量。\n    final Semaphore semaphore = new Semaphore(20);\n\n    for (int i = 0; i < threadCount; i++) {\n      final int threadnum = i;\n      threadPool.execute(() -> {// Lambda 表达式的运用\n        try {\n          semaphore.acquire();// 获取一个许可，所以可运行线程数量为20/1=20\n          test(threadnum);\n          semaphore.release();// 释放一个许可\n        } catch (InterruptedException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        }\n\n      });\n    }\n    threadPool.shutdown();\n    System.out.println(\"finish\");\n  }\n\n  public static void test(int threadnum) throws InterruptedException {\n    Thread.sleep(1000);// 模拟请求的耗时操作\n    System.out.println(\"threadnum:\" + threadnum);\n    Thread.sleep(1000);// 模拟请求的耗时操作\n  }\n}\n```\n\n执行 `acquire` 方法阻塞，直到有一个许可证可以获得然后拿走一个许可证；每个 `release` 方法增加一个许可证，这可能会释放一个阻塞的 acquire 方法。然而，其实并没有实际的许可证这个对象，Semaphore 只是维持了一个可获得许可证的数量。 Semaphore 经常用于限制获取某种资源的线程数量。\n\n当然一次也可以一次拿取和释放多个许可，不过一般没有必要这样做：\n\n```java\nsemaphore.acquire(5);// 获取5个许可，所以可运行线程数量为20/5=4\ntest(threadnum);\nsemaphore.release(5);// 获取5个许可，所以可运行线程数量为20/5=4\n```\n\n除了 `acquire`方法之外，另一个比较常用的与之对应的方法是`tryAcquire`方法，该方法如果获取不到许可就立即返回 false。\n\nSemaphore 有两种模式，公平模式和非公平模式。\n\n- **公平模式：** 调用 acquire 的顺序就是获取许可证的顺序，遵循 FIFO；\n- **非公平模式：** 抢占式的。\n\n**Semaphore 对应的两个构造方法如下：**\n\n```java\n   public Semaphore(int permits) {\n        sync = new NonfairSync(permits);\n    }\n\n    public Semaphore(int permits, boolean fair) {\n        sync = fair ? new FairSync(permits) : new NonfairSync(permits);\n    }\n```\n\n**这两个构造方法，都必须提供许可的数量，第二个构造方法可以指定是公平模式还是非公平模式，默认非公平模式。**\n\n[issue645补充内容](https://github.com/Snailclimb/JavaGuide/issues/645) ：Semaphore与CountDownLatch一样，也是共享锁的一种实现。它默认构造AQS的state为permits。当执行任务的线程数量超出permits,那么多余的线程将会被放入阻塞队列Park,并自旋判断state是否大于0。只有当state大于0的时候，阻塞的线程才能继续执行,此时先前执行任务的线程继续执行release方法，release方法使得state的变量会加1，那么自旋的线程便会判断成功。 如此，每次只有最多不超过permits数量的线程能自旋成功，便限制了执行任务线程的数量。\n\n由于篇幅问题，如果对 Semaphore 源码感兴趣的朋友可以看下这篇文章：<https://juejin.im/post/5ae755366fb9a07ab508adc6>\n\n### 4 CountDownLatch （倒计时器）\n\nCountDownLatch允许 count 个线程阻塞在一个地方，直至所有线程的任务都执行完毕。在 Java 并发中，countdownlatch 的概念是一个常见的面试题，所以一定要确保你很好的理解了它。\n\nCountDownLatch是共享锁的一种实现,它默认构造 AQS 的 state 值为 count。当线程使用countDown方法时,其实使用了`tryReleaseShared`方法以CAS的操作来减少state,直至state为0就代表所有的线程都调用了countDown方法。当调用await方法的时候，如果state不为0，就代表仍然有线程没有调用countDown方法，那么就把已经调用过countDown的线程都放入阻塞队列Park,并自旋CAS判断state == 0，直至最后一个线程调用了countDown，使得state == 0，于是阻塞的线程便判断成功，全部往下执行。\n\n#### 4.1 CountDownLatch 的两种典型用法\n\n1. 某一线程在开始运行前等待 n 个线程执行完毕。将 CountDownLatch 的计数器初始化为 n ：`new CountDownLatch(n)`，每当一个任务线程执行完毕，就将计数器减 1 `countdownlatch.countDown()`，当计数器的值变为 0 时，在`CountDownLatch上 await()` 的线程就会被唤醒。一个典型应用场景就是启动一个服务时，主线程需要等待多个组件加载完毕，之后再继续执行。\n2. 实现多个线程开始执行任务的最大并行性。注意是并行性，不是并发，强调的是多个线程在某一时刻同时开始执行。类似于赛跑，将多个线程放到起点，等待发令枪响，然后同时开跑。做法是初始化一个共享的 `CountDownLatch` 对象，将其计数器初始化为 1 ：`new CountDownLatch(1)`，多个线程在开始执行任务前首先 `coundownlatch.await()`，当主线程调用 countDown() 时，计数器变为 0，多个线程同时被唤醒。\n\n#### 4.2 CountDownLatch 的使用示例\n\n```java\n/**\n *\n * @author SnailClimb\n * @date 2018年10月1日\n * @Description: CountDownLatch 使用方法示例\n */\npublic class CountDownLatchExample1 {\n  // 请求的数量\n  private static final int threadCount = 550;\n\n  public static void main(String[] args) throws InterruptedException {\n    // 创建一个具有固定线程数量的线程池对象（如果这里线程池的线程数量给太少的话你会发现执行的很慢）\n    ExecutorService threadPool = Executors.newFixedThreadPool(300);\n    final CountDownLatch countDownLatch = new CountDownLatch(threadCount);\n    for (int i = 0; i < threadCount; i++) {\n      final int threadnum = i;\n      threadPool.execute(() -> {// Lambda 表达式的运用\n        try {\n          test(threadnum);\n        } catch (InterruptedException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        } finally {\n          countDownLatch.countDown();// 表示一个请求已经被完成\n        }\n\n      });\n    }\n    countDownLatch.await();\n    threadPool.shutdown();\n    System.out.println(\"finish\");\n  }\n\n  public static void test(int threadnum) throws InterruptedException {\n    Thread.sleep(1000);// 模拟请求的耗时操作\n    System.out.println(\"threadnum:\" + threadnum);\n    Thread.sleep(1000);// 模拟请求的耗时操作\n  }\n}\n```\n\n上面的代码中，我们定义了请求的数量为 550，当这 550 个请求被处理完成之后，才会执行`System.out.println(\"finish\");`。\n\n与 CountDownLatch 的第一次交互是主线程等待其他线程。主线程必须在启动其他线程后立即调用 `CountDownLatch.await()` 方法。这样主线程的操作就会在这个方法上阻塞，直到其他线程完成各自的任务。\n\n其他 N 个线程必须引用闭锁对象，因为他们需要通知 `CountDownLatch` 对象，他们已经完成了各自的任务。这种通知机制是通过 `CountDownLatch.countDown()`方法来完成的；每调用一次这个方法，在构造函数中初始化的 count 值就减 1。所以当 N 个线程都调 用了这个方法，count 的值等于 0，然后主线程就能通过 `await()`方法，恢复执行自己的任务。\n\n再插一嘴：`CountDownLatch` 的 `await()` 方法使用不当很容易产生死锁，比如我们上面代码中的 for 循环改为：\n\n```java\nfor (int i = 0; i < threadCount-1; i++) {\n.......\n}\n```\n\n这样就导致 `count` 的值没办法等于 0，然后就会导致一直等待。\n\n如果对CountDownLatch源码感兴趣的朋友，可以查看： [【JUC】JDK1.8源码分析之CountDownLatch（五）](https://www.cnblogs.com/leesf456/p/5406191.html)\n\n#### 4.3 CountDownLatch 的不足\n\nCountDownLatch 是一次性的，计数器的值只能在构造方法中初始化一次，之后没有任何机制再次对其设置值，当 CountDownLatch 使用完毕后，它不能再次被使用。\n\n#### 4.4 CountDownLatch 相常见面试题\n\n解释一下 CountDownLatch 概念？\n\nCountDownLatch 和 CyclicBarrier 的不同之处？\n\n给出一些 CountDownLatch 使用的例子？\n\nCountDownLatch 类中主要的方法？\n\n### 5 CyclicBarrier(循环栅栏)\n\nCyclicBarrier 和 CountDownLatch 非常类似，它也可以实现线程间的技术等待，但是它的功能比 CountDownLatch 更加复杂和强大。主要应用场景和 CountDownLatch 类似。\n\n> CountDownLatch的实现是基于AQS的，而CycliBarrier是基于 ReentrantLock(ReentrantLock也属于AQS同步器)和 Condition 的.\n\nCyclicBarrier 的字面意思是可循环使用（Cyclic）的屏障（Barrier）。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。CyclicBarrier 默认的构造方法是 `CyclicBarrier(int parties)`，其参数表示屏障拦截的线程数量，每个线程调用`await`方法告诉 CyclicBarrier 我已经到达了屏障，然后当前线程被阻塞。\n\n再来看一下它的构造函数：\n\n```java\npublic CyclicBarrier(int parties) {\n    this(parties, null);\n}\n\npublic CyclicBarrier(int parties, Runnable barrierAction) {\n    if (parties <= 0) throw new IllegalArgumentException();\n    this.parties = parties;\n    this.count = parties;\n    this.barrierCommand = barrierAction;\n}\n```\n\n其中，parties 就代表了有拦截的线程的数量，当拦截的线程数量达到这个值的时候就打开栅栏，让所有线程通过。\n\n#### 5.1 CyclicBarrier 的应用场景\n\nCyclicBarrier 可以用于多线程计算数据，最后合并计算结果的应用场景。比如我们用一个 Excel 保存了用户所有银行流水，每个 Sheet 保存一个帐户近一年的每笔银行流水，现在需要统计用户的日均银行流水，先用多线程处理每个 sheet 里的银行流水，都执行完之后，得到每个 sheet 的日均银行流水，最后，再用 barrierAction 用这些线程的计算结果，计算出整个 Excel 的日均银行流水。\n\n#### 5.2 CyclicBarrier 的使用示例\n\n示例 1：\n\n```java\n/**\n *\n * @author Snailclimb\n * @date 2018年10月1日\n * @Description: 测试 CyclicBarrier 类中带参数的 await() 方法\n */\npublic class CyclicBarrierExample2 {\n  // 请求的数量\n  private static final int threadCount = 550;\n  // 需要同步的线程数量\n  private static final CyclicBarrier cyclicBarrier = new CyclicBarrier(5);\n\n  public static void main(String[] args) throws InterruptedException {\n    // 创建线程池\n    ExecutorService threadPool = Executors.newFixedThreadPool(10);\n\n    for (int i = 0; i < threadCount; i++) {\n      final int threadNum = i;\n      Thread.sleep(1000);\n      threadPool.execute(() -> {\n        try {\n          test(threadNum);\n        } catch (InterruptedException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        } catch (BrokenBarrierException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        }\n      });\n    }\n    threadPool.shutdown();\n  }\n\n  public static void test(int threadnum) throws InterruptedException, BrokenBarrierException {\n    System.out.println(\"threadnum:\" + threadnum + \"is ready\");\n    try {\n      /**等待60秒，保证子线程完全执行结束*/\n      cyclicBarrier.await(60, TimeUnit.SECONDS);\n    } catch (Exception e) {\n      System.out.println(\"-----CyclicBarrierException------\");\n    }\n    System.out.println(\"threadnum:\" + threadnum + \"is finish\");\n  }\n\n}\n```\n\n运行结果，如下：\n\n```java\nthreadnum:0is ready\nthreadnum:1is ready\nthreadnum:2is ready\nthreadnum:3is ready\nthreadnum:4is ready\nthreadnum:4is finish\nthreadnum:0is finish\nthreadnum:1is finish\nthreadnum:2is finish\nthreadnum:3is finish\nthreadnum:5is ready\nthreadnum:6is ready\nthreadnum:7is ready\nthreadnum:8is ready\nthreadnum:9is ready\nthreadnum:9is finish\nthreadnum:5is finish\nthreadnum:8is finish\nthreadnum:7is finish\nthreadnum:6is finish\n......\n```\n\n可以看到当线程数量也就是请求数量达到我们定义的 5 个的时候， `await`方法之后的方法才被执行。\n\n另外，CyclicBarrier 还提供一个更高级的构造函数`CyclicBarrier(int parties, Runnable barrierAction)`，用于在线程到达屏障时，优先执行`barrierAction`，方便处理更复杂的业务场景。示例代码如下：\n\n```java\n/**\n *\n * @author SnailClimb\n * @date 2018年10月1日\n * @Description: 新建 CyclicBarrier 的时候指定一个 Runnable\n */\npublic class CyclicBarrierExample3 {\n  // 请求的数量\n  private static final int threadCount = 550;\n  // 需要同步的线程数量\n  private static final CyclicBarrier cyclicBarrier = new CyclicBarrier(5, () -> {\n    System.out.println(\"------当线程数达到之后，优先执行------\");\n  });\n\n  public static void main(String[] args) throws InterruptedException {\n    // 创建线程池\n    ExecutorService threadPool = Executors.newFixedThreadPool(10);\n\n    for (int i = 0; i < threadCount; i++) {\n      final int threadNum = i;\n      Thread.sleep(1000);\n      threadPool.execute(() -> {\n        try {\n          test(threadNum);\n        } catch (InterruptedException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        } catch (BrokenBarrierException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        }\n      });\n    }\n    threadPool.shutdown();\n  }\n\n  public static void test(int threadnum) throws InterruptedException, BrokenBarrierException {\n    System.out.println(\"threadnum:\" + threadnum + \"is ready\");\n    cyclicBarrier.await();\n    System.out.println(\"threadnum:\" + threadnum + \"is finish\");\n  }\n\n}\n```\n\n运行结果，如下：\n\n```java\nthreadnum:0is ready\nthreadnum:1is ready\nthreadnum:2is ready\nthreadnum:3is ready\nthreadnum:4is ready\n------当线程数达到之后，优先执行------\nthreadnum:4is finish\nthreadnum:0is finish\nthreadnum:2is finish\nthreadnum:1is finish\nthreadnum:3is finish\nthreadnum:5is ready\nthreadnum:6is ready\nthreadnum:7is ready\nthreadnum:8is ready\nthreadnum:9is ready\n------当线程数达到之后，优先执行------\nthreadnum:9is finish\nthreadnum:5is finish\nthreadnum:6is finish\nthreadnum:8is finish\nthreadnum:7is finish\n......\n```\n\n#### 5.3 `CyclicBarrier`源码分析\n\n当调用 `CyclicBarrier` 对象调用 `await()` 方法时，实际上调用的是`dowait(false, 0L)`方法。 `await()` 方法就像树立起一个栅栏的行为一样，将线程挡住了，当拦住的线程数量达到 parties 的值时，栅栏才会打开，线程才得以通过执行。\n\n```java\n    public int await() throws InterruptedException, BrokenBarrierException {\n        try {\n            return dowait(false, 0L);\n        } catch (TimeoutException toe) {\n            throw new Error(toe); // cannot happen\n        }\n    }\n```\n\n`dowait(false, 0L)`：\n\n```java\n    // 当线程数量或者请求数量达到 count 时 await 之后的方法才会被执行。上面的示例中 count 的值就为 5。\n    private int count;\n    /**\n     * Main barrier code, covering the various policies.\n     */\n    private int dowait(boolean timed, long nanos)\n        throws InterruptedException, BrokenBarrierException,\n               TimeoutException {\n        final ReentrantLock lock = this.lock;\n        // 锁住\n        lock.lock();\n        try {\n            final Generation g = generation;\n\n            if (g.broken)\n                throw new BrokenBarrierException();\n\n            // 如果线程中断了，抛出异常\n            if (Thread.interrupted()) {\n                breakBarrier();\n                throw new InterruptedException();\n            }\n            // cout减1\n            int index = --count;\n            // 当 count 数量减为 0 之后说明最后一个线程已经到达栅栏了，也就是达到了可以执行await 方法之后的条件\n            if (index == 0) {  // tripped\n                boolean ranAction = false;\n                try {\n                    final Runnable command = barrierCommand;\n                    if (command != null)\n                        command.run();\n                    ranAction = true;\n                    // 将 count 重置为 parties 属性的初始化值\n                    // 唤醒之前等待的线程\n                    // 下一波执行开始\n                    nextGeneration();\n                    return 0;\n                } finally {\n                    if (!ranAction)\n                        breakBarrier();\n                }\n            }\n\n            // loop until tripped, broken, interrupted, or timed out\n            for (;;) {\n                try {\n                    if (!timed)\n                        trip.await();\n                    else if (nanos > 0L)\n                        nanos = trip.awaitNanos(nanos);\n                } catch (InterruptedException ie) {\n                    if (g == generation && ! g.broken) {\n                        breakBarrier();\n                        throw ie;\n                    } else {\n                        // We're about to finish waiting even if we had not\n                        // been interrupted, so this interrupt is deemed to\n                        // \"belong\" to subsequent execution.\n                        Thread.currentThread().interrupt();\n                    }\n                }\n\n                if (g.broken)\n                    throw new BrokenBarrierException();\n\n                if (g != generation)\n                    return index;\n\n                if (timed && nanos <= 0L) {\n                    breakBarrier();\n                    throw new TimeoutException();\n                }\n            }\n        } finally {\n            lock.unlock();\n        }\n    }\n```\n\n总结：`CyclicBarrier` 内部通过一个 count 变量作为计数器，cout 的初始值为 parties 属性的初始化值，每当一个线程到了栅栏这里了，那么就将计数器减一。如果 count 值为 0 了，表示这是这一代最后一个线程到达栅栏，就尝试执行我们构造方法中输入的任务。\n\n#### 5.4 CyclicBarrier 和 CountDownLatch 的区别\n\n**下面这个是国外一个大佬的回答：**\n\nCountDownLatch 是计数器，只能使用一次，而 CyclicBarrier 的计数器提供 reset 功能，可以多次使用。但是我不那么认为它们之间的区别仅仅就是这么简单的一点。我们来从 jdk 作者设计的目的来看，javadoc 是这么描述它们的：\n\n> CountDownLatch: A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes.(CountDownLatch: 一个或者多个线程，等待其他多个线程完成某件事情之后才能执行；) CyclicBarrier : A synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point.(CyclicBarrier : 多个线程互相等待，直到到达同一个同步点，再继续一起执行。)\n\n对于 CountDownLatch 来说，重点是“一个线程（多个线程）等待”，而其他的 N 个线程在完成“某件事情”之后，可以终止，也可以等待。而对于 CyclicBarrier，重点是多个线程，在任意一个线程没有完成，所有的线程都必须等待。\n\nCountDownLatch 是计数器，线程完成一个记录一个，只不过计数不是递增而是递减，而 CyclicBarrier 更像是一个阀门，需要所有线程都到达，阀门才能打开，然后继续执行。\n\n### 6 ReentrantLock 和 ReentrantReadWriteLock\n\nReentrantLock 和 synchronized 的区别在上面已经讲过了这里就不多做讲解。另外，需要注意的是：读写锁 ReentrantReadWriteLock 可以保证多个线程可以同时读，所以在读操作远大于写操作的时候，读写锁就非常有用了。\n\n### 参考\n\n- <https://juejin.im/post/5ae755256fb9a07ac3634067>\n- <https://blog.csdn.net/u010185262/article/details/54692886>\n- <https://blog.csdn.net/tolcf/article/details/50925145?utm_source=blogxgwz0>","slug":"java/java-syc-AQS","published":1,"updated":"2020-05-22T09:49:04.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmxv005ga4ja89aa20t2","content":"<h1 id=\"AQS-介绍\"><a href=\"#AQS-介绍\" class=\"headerlink\" title=\"AQS 介绍\"></a>AQS 介绍</h1><h3 id=\"1-AQS-简单介绍\"><a href=\"#1-AQS-简单介绍\" class=\"headerlink\" title=\"1 AQS 简单介绍\"></a>1 AQS 简单介绍</h3><p>AQS 的全称为（AbstractQueuedSynchronizer），这个类在 java.util.concurrent.locks 包下面。</p>\n<p><img src=\"/images/54546254.png\" alt=\"类图\"></p>\n<p>AQS 是一个用来构建锁和同步器的框架，使用 AQS 能简单且高效地构造出应用广泛的大量的同步器，比如我们提到的 ReentrantLock，Semaphore，其他的诸如 ReentrantReadWriteLock，SynchronousQueue，FutureTask(jdk1.7) 等等皆是基于 AQS 的。当然，我们自己也能利用 AQS 非常轻松容易地构造出符合我们自己需求的同步器。</p>\n<h3 id=\"2-AQS-原理\"><a href=\"#2-AQS-原理\" class=\"headerlink\" title=\"2 AQS 原理\"></a>2 AQS 原理</h3><blockquote>\n<p>在面试中被问到并发知识的时候，大多都会被问到“请你说一下自己对于 AQS 原理的理解”。下面给大家一个示例供大家参考，面试不是背题，大家一定要加入自己的思想，即使加入不了自己的思想也要保证自己能够通俗的讲出来而不是背出来。</p>\n</blockquote>\n<p>下面大部分内容其实在 AQS 类注释上已经给出了，不过是英语看着比较吃力一点，感兴趣的话可以看看源码。</p>\n<h4 id=\"2-1-AQS-原理概览\"><a href=\"#2-1-AQS-原理概览\" class=\"headerlink\" title=\"2.1 AQS 原理概览\"></a>2.1 AQS 原理概览</h4><p><strong>AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 CLH 队列锁实现的，即将暂时获取不到锁的线程加入到队列中。</strong></p>\n<blockquote>\n<p>CLH(Craig,Landin,and Hagersten)队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配。</p>\n</blockquote>\n<p>看个 AQS(AbstractQueuedSynchronizer)原理图：</p>\n<p><img src=\"/images/453525.png\" alt=\"453525\"></p>\n<p>AQS 使用一个 int 成员变量来表示同步状态，通过内置的 FIFO 队列来完成获取资源线程的排队工作。AQS 使用 CAS 对该同步状态进行原子操作实现对其值的修改。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> state;<span class=\"comment\">//共享变量，使用volatile修饰保证线程可见性</span></span><br></pre></td></tr></table></figure>\n\n<p>状态信息通过 protected 类型的<code>getState</code>，<code>setState</code>，<code>compareAndSetState</code>进行操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回同步状态的当前值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"comment\">// 设置同步状态的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setState</span><span class=\"params\">(<span class=\"keyword\">int</span> newState)</span> </span>&#123;</span><br><span class=\"line\">        state = newState;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//原子地（CAS操作）将同步状态值设置为给定值update如果当前同步状态的值等于expect（期望值）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSetState</span><span class=\"params\">(<span class=\"keyword\">int</span> expect, <span class=\"keyword\">int</span> update)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.compareAndSwapInt(<span class=\"keyword\">this</span>, stateOffset, expect, update);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-AQS-对资源的共享方式\"><a href=\"#2-2-AQS-对资源的共享方式\" class=\"headerlink\" title=\"2.2 AQS 对资源的共享方式\"></a>2.2 AQS 对资源的共享方式</h4><p><strong>AQS 定义两种资源共享方式</strong></p>\n<p><strong>1)Exclusive</strong>（独占）</p>\n<p>只有一个线程能执行，如 ReentrantLock。又可分为公平锁和非公平锁,ReentrantLock 同时支持两种锁,下面以 ReentrantLock 对这两种锁的定义做介绍：</p>\n<ul>\n<li>公平锁：按照线程在队列中的排队顺序，先到者先拿到锁</li>\n<li>非公平锁：当线程要获取锁时，先通过两次 CAS 操作去抢锁，如果没抢到，当前线程再加入到队列中等待唤醒。</li>\n</ul>\n<blockquote>\n<p>说明：下面这部分关于 <code>ReentrantLock</code> 源代码内容节选自：<a href=\"https://www.javadoop.com/post/AbstractQueuedSynchronizer-2\" target=\"_blank\" rel=\"noopener\">https://www.javadoop.com/post/AbstractQueuedSynchronizer-2</a> ，这是一篇很不错文章，推荐阅读。</p>\n</blockquote>\n<p><strong>下面来看 ReentrantLock 中相关的源代码：</strong></p>\n<p>ReentrantLock 默认采用非公平锁，因为考虑获得更好的性能，通过 boolean 来决定是否用公平锁（传入 true 用公平锁）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** Synchronizer providing all implementation mechanics */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Sync sync;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReentrantLock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 默认非公平锁</span></span><br><span class=\"line\">    sync = <span class=\"keyword\">new</span> NonfairSync();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReentrantLock</span><span class=\"params\">(<span class=\"keyword\">boolean</span> fair)</span> </span>&#123;</span><br><span class=\"line\">    sync = fair ? <span class=\"keyword\">new</span> FairSync() : <span class=\"keyword\">new</span> NonfairSync();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ReentrantLock 中公平锁的 <code>lock</code> 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FairSync</span> <span class=\"keyword\">extends</span> <span class=\"title\">Sync</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// AbstractQueuedSynchronizer.acquire(int arg)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">acquire</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class=\"line\">            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class=\"line\">            selfInterrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Thread current = Thread.currentThread();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c = getState();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 1. 和非公平锁相比，这里多了一个判断：是否有线程在等待</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class=\"line\">                compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\">                setExclusiveOwnerThread(current);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nextc = c + acquires;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"Maximum lock count exceeded\"</span>);</span><br><span class=\"line\">            setState(nextc);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>非公平锁的 lock 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonfairSync</span> <span class=\"keyword\">extends</span> <span class=\"title\">Sync</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2. 和公平锁相比，这里会直接先进行一次CAS，成功就返回了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">            setExclusiveOwnerThread(Thread.currentThread());</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// AbstractQueuedSynchronizer.acquire(int arg)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">acquire</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class=\"line\">            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class=\"line\">            selfInterrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nonfairTryAcquire(acquires);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Performs non-fair tryLock.  tryAcquire is implemented in</span></span><br><span class=\"line\"><span class=\"comment\"> * subclasses, but both need nonfair try for trylock method.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">nonfairTryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Thread current = Thread.currentThread();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = getState();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里没有对阻塞队列进行判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\">            setExclusiveOwnerThread(current);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nextc = c + acquires;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"Maximum lock count exceeded\"</span>);</span><br><span class=\"line\">        setState(nextc);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：公平锁和非公平锁只有两处不同：</p>\n<ol>\n<li>非公平锁在调用 lock 后，首先就会调用 CAS 进行一次抢锁，如果这个时候恰巧锁没有被占用，那么直接就获取到锁返回了。</li>\n<li>非公平锁在 CAS 失败后，和公平锁一样都会进入到 tryAcquire 方法，在 tryAcquire 方法中，如果发现锁这个时候被释放了（state == 0），非公平锁会直接 CAS 抢锁，但是公平锁会判断等待队列是否有线程处于等待状态，如果有则不去抢锁，乖乖排到后面。</li>\n</ol>\n<p>公平锁和非公平锁就这两点区别，如果这两次 CAS 都不成功，那么后面非公平锁和公平锁是一样的，都要进入到阻塞队列等待唤醒。</p>\n<p>相对来说，非公平锁会有更好的性能，因为它的吞吐量比较大。当然，非公平锁让获取锁的时间变得更加不确定，可能会导致在阻塞队列中的线程长期处于饥饿状态。</p>\n<p><strong>2)Share</strong>（共享）</p>\n<p>多个线程可同时执行，如 Semaphore/CountDownLatch。Semaphore、CountDownLatCh、 CyclicBarrier、ReadWriteLock 我们都会在后面讲到。</p>\n<p>ReentrantReadWriteLock 可以看成是组合式，因为 ReentrantReadWriteLock 也就是读写锁允许多个线程同时对某一资源进行读。</p>\n<p>不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源 state 的获取与释放方式即可，至于具体线程等待队列的维护（如获取资源失败入队/唤醒出队等），AQS 已经在上层已经帮我们实现好了。</p>\n<h4 id=\"2-3-AQS-底层使用了模板方法模式\"><a href=\"#2-3-AQS-底层使用了模板方法模式\" class=\"headerlink\" title=\"2.3 AQS 底层使用了模板方法模式\"></a>2.3 AQS 底层使用了模板方法模式</h4><p>同步器的设计是基于模板方法模式的，如果需要自定义同步器一般的方式是这样（模板方法模式很经典的一个应用）：</p>\n<ol>\n<li>使用者继承 AbstractQueuedSynchronizer 并重写指定的方法。（这些重写方法很简单，无非是对于共享资源 state 的获取和释放）</li>\n<li>将 AQS 组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。</li>\n</ol>\n<p>这和我们以往通过实现接口的方式有很大区别，这是模板方法模式很经典的一个运用，下面简单的给大家介绍一下模板方法模式，模板方法模式是一个很容易理解的设计模式之一。</p>\n<blockquote>\n<p>模板方法模式是基于”继承“的，主要是为了在不改变模板结构的前提下在子类中重新定义模板中的内容以实现复用代码。举个很简单的例子假如我们要去一个地方的步骤是：购票<code>buyTicket()</code>-&gt;安检<code>securityCheck()</code>-&gt;乘坐某某工具回家<code>ride()</code>-&gt;到达目的地<code>arrive()</code>。我们可能乘坐不同的交通工具回家比如飞机或者火车，所以除了<code>ride()</code>方法，其他方法的实现几乎相同。我们可以定义一个包含了这些方法的抽象类，然后用户根据自己的需要继承该抽象类然后修改 <code>ride()</code>方法。</p>\n</blockquote>\n<p><strong>AQS 使用了模板方法模式，自定义同步器时需要重写下面几个 AQS 提供的模板方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isHeldExclusively()<span class=\"comment\">//该线程是否正在独占资源。只有用到condition才需要去实现它。</span></span><br><span class=\"line\">tryAcquire(<span class=\"keyword\">int</span>)<span class=\"comment\">//独占方式。尝试获取资源，成功则返回true，失败则返回false。</span></span><br><span class=\"line\">tryRelease(<span class=\"keyword\">int</span>)<span class=\"comment\">//独占方式。尝试释放资源，成功则返回true，失败则返回false。</span></span><br><span class=\"line\">tryAcquireShared(<span class=\"keyword\">int</span>)<span class=\"comment\">//共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</span></span><br><span class=\"line\">tryReleaseShared(<span class=\"keyword\">int</span>)<span class=\"comment\">//共享方式。尝试释放资源，成功则返回true，失败则返回false。</span></span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，每个方法都抛出 <code>UnsupportedOperationException</code>。 这些方法的实现必须是内部线程安全的，并且通常应该简短而不是阻塞。AQS 类中的其他方法都是 final ，所以无法被其他类使用，只有这几个方法可以被其他类使用。</p>\n<p>以 ReentrantLock 为例，state 初始化为 0，表示未锁定状态。A 线程 lock()时，会调用 tryAcquire()独占该锁并将 state+1。此后，其他线程再 tryAcquire()时就会失败，直到 A 线程 unlock()到 state=0（即释放锁）为止，其它线程才有机会获取该锁。当然，释放锁之前，A 线程自己是可以重复获取此锁的（state 会累加），这就是可重入的概念。但要注意，获取多少次就要释放多么次，这样才能保证 state 是能回到零态的。</p>\n<p>再以 CountDownLatch 以例，任务分为 N 个子线程去执行，state 也初始化为 N（注意 N 要与线程个数一致）。这 N 个子线程是并行执行的，每个子线程执行完后 countDown()一次，state 会 CAS(Compare and Swap)减 1。等到所有子线程都执行完后(即 state=0)，会 unpark()主调用线程，然后主调用线程就会从 await()函数返回，继续后余动作。</p>\n<p>一般来说，自定义同步器要么是独占方法，要么是共享方式，他们也只需实现<code>tryAcquire-tryRelease</code>、<code>tryAcquireShared-tryReleaseShared</code>中的一种即可。但 AQS 也支持自定义同步器同时实现独占和共享两种方式，如<code>ReentrantReadWriteLock</code>。</p>\n<p>推荐两篇 AQS 原理和相关源码分析的文章：</p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/waterystone/p/4920797.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/waterystone/p/4920797.html</a></li>\n<li><a href=\"https://www.cnblogs.com/chengxiao/archive/2017/07/24/7141160.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chengxiao/archive/2017/07/24/7141160.html</a></li>\n</ul>\n<h3 id=\"3-Semaphore-信号量-允许多个线程同时访问\"><a href=\"#3-Semaphore-信号量-允许多个线程同时访问\" class=\"headerlink\" title=\"3 Semaphore(信号量)-允许多个线程同时访问\"></a>3 Semaphore(信号量)-允许多个线程同时访问</h3><p><strong>synchronized 和 ReentrantLock 都是一次只允许一个线程访问某个资源，Semaphore(信号量)可以指定多个线程同时访问某个资源。</strong></p>\n<p>示例代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Snailclimb</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018年9月30日</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 需要一次性拿一个许可的情况</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SemaphoreExample1</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 请求的数量</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadCount = <span class=\"number\">550</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个具有固定线程数量的线程池对象（如果这里线程池的线程数量给太少的话你会发现执行的很慢）</span></span><br><span class=\"line\">    ExecutorService threadPool = Executors.newFixedThreadPool(<span class=\"number\">300</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 一次只能允许执行的线程数量。</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Semaphore semaphore = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadnum = i;</span><br><span class=\"line\">      threadPool.execute(() -&gt; &#123;<span class=\"comment\">// Lambda 表达式的运用</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          semaphore.acquire();<span class=\"comment\">// 获取一个许可，所以可运行线程数量为20/1=20</span></span><br><span class=\"line\">          test(threadnum);</span><br><span class=\"line\">          semaphore.release();<span class=\"comment\">// 释放一个许可</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    threadPool.shutdown();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"finish\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> threadnum)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>);<span class=\"comment\">// 模拟请求的耗时操作</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"threadnum:\"</span> + threadnum);</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>);<span class=\"comment\">// 模拟请求的耗时操作</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>acquire</code> 方法阻塞，直到有一个许可证可以获得然后拿走一个许可证；每个 <code>release</code> 方法增加一个许可证，这可能会释放一个阻塞的 acquire 方法。然而，其实并没有实际的许可证这个对象，Semaphore 只是维持了一个可获得许可证的数量。 Semaphore 经常用于限制获取某种资源的线程数量。</p>\n<p>当然一次也可以一次拿取和释放多个许可，不过一般没有必要这样做：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">semaphore.acquire(<span class=\"number\">5</span>);<span class=\"comment\">// 获取5个许可，所以可运行线程数量为20/5=4</span></span><br><span class=\"line\">test(threadnum);</span><br><span class=\"line\">semaphore.release(<span class=\"number\">5</span>);<span class=\"comment\">// 获取5个许可，所以可运行线程数量为20/5=4</span></span><br></pre></td></tr></table></figure>\n\n<p>除了 <code>acquire</code>方法之外，另一个比较常用的与之对应的方法是<code>tryAcquire</code>方法，该方法如果获取不到许可就立即返回 false。</p>\n<p>Semaphore 有两种模式，公平模式和非公平模式。</p>\n<ul>\n<li><strong>公平模式：</strong> 调用 acquire 的顺序就是获取许可证的顺序，遵循 FIFO；</li>\n<li><strong>非公平模式：</strong> 抢占式的。</li>\n</ul>\n<p><strong>Semaphore 对应的两个构造方法如下：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Semaphore</span><span class=\"params\">(<span class=\"keyword\">int</span> permits)</span> </span>&#123;</span><br><span class=\"line\">     sync = <span class=\"keyword\">new</span> NonfairSync(permits);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Semaphore</span><span class=\"params\">(<span class=\"keyword\">int</span> permits, <span class=\"keyword\">boolean</span> fair)</span> </span>&#123;</span><br><span class=\"line\">     sync = fair ? <span class=\"keyword\">new</span> FairSync(permits) : <span class=\"keyword\">new</span> NonfairSync(permits);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>这两个构造方法，都必须提供许可的数量，第二个构造方法可以指定是公平模式还是非公平模式，默认非公平模式。</strong></p>\n<p><a href=\"https://github.com/Snailclimb/JavaGuide/issues/645\" target=\"_blank\" rel=\"noopener\">issue645补充内容</a> ：Semaphore与CountDownLatch一样，也是共享锁的一种实现。它默认构造AQS的state为permits。当执行任务的线程数量超出permits,那么多余的线程将会被放入阻塞队列Park,并自旋判断state是否大于0。只有当state大于0的时候，阻塞的线程才能继续执行,此时先前执行任务的线程继续执行release方法，release方法使得state的变量会加1，那么自旋的线程便会判断成功。 如此，每次只有最多不超过permits数量的线程能自旋成功，便限制了执行任务线程的数量。</p>\n<p>由于篇幅问题，如果对 Semaphore 源码感兴趣的朋友可以看下这篇文章：<a href=\"https://juejin.im/post/5ae755366fb9a07ab508adc6\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5ae755366fb9a07ab508adc6</a></p>\n<h3 id=\"4-CountDownLatch-（倒计时器）\"><a href=\"#4-CountDownLatch-（倒计时器）\" class=\"headerlink\" title=\"4 CountDownLatch （倒计时器）\"></a>4 CountDownLatch （倒计时器）</h3><p>CountDownLatch允许 count 个线程阻塞在一个地方，直至所有线程的任务都执行完毕。在 Java 并发中，countdownlatch 的概念是一个常见的面试题，所以一定要确保你很好的理解了它。</p>\n<p>CountDownLatch是共享锁的一种实现,它默认构造 AQS 的 state 值为 count。当线程使用countDown方法时,其实使用了<code>tryReleaseShared</code>方法以CAS的操作来减少state,直至state为0就代表所有的线程都调用了countDown方法。当调用await方法的时候，如果state不为0，就代表仍然有线程没有调用countDown方法，那么就把已经调用过countDown的线程都放入阻塞队列Park,并自旋CAS判断state == 0，直至最后一个线程调用了countDown，使得state == 0，于是阻塞的线程便判断成功，全部往下执行。</p>\n<h4 id=\"4-1-CountDownLatch-的两种典型用法\"><a href=\"#4-1-CountDownLatch-的两种典型用法\" class=\"headerlink\" title=\"4.1 CountDownLatch 的两种典型用法\"></a>4.1 CountDownLatch 的两种典型用法</h4><ol>\n<li>某一线程在开始运行前等待 n 个线程执行完毕。将 CountDownLatch 的计数器初始化为 n ：<code>new CountDownLatch(n)</code>，每当一个任务线程执行完毕，就将计数器减 1 <code>countdownlatch.countDown()</code>，当计数器的值变为 0 时，在<code>CountDownLatch上 await()</code> 的线程就会被唤醒。一个典型应用场景就是启动一个服务时，主线程需要等待多个组件加载完毕，之后再继续执行。</li>\n<li>实现多个线程开始执行任务的最大并行性。注意是并行性，不是并发，强调的是多个线程在某一时刻同时开始执行。类似于赛跑，将多个线程放到起点，等待发令枪响，然后同时开跑。做法是初始化一个共享的 <code>CountDownLatch</code> 对象，将其计数器初始化为 1 ：<code>new CountDownLatch(1)</code>，多个线程在开始执行任务前首先 <code>coundownlatch.await()</code>，当主线程调用 countDown() 时，计数器变为 0，多个线程同时被唤醒。</li>\n</ol>\n<h4 id=\"4-2-CountDownLatch-的使用示例\"><a href=\"#4-2-CountDownLatch-的使用示例\" class=\"headerlink\" title=\"4.2 CountDownLatch 的使用示例\"></a>4.2 CountDownLatch 的使用示例</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> SnailClimb</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018年10月1日</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: CountDownLatch 使用方法示例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CountDownLatchExample1</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 请求的数量</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadCount = <span class=\"number\">550</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个具有固定线程数量的线程池对象（如果这里线程池的线程数量给太少的话你会发现执行的很慢）</span></span><br><span class=\"line\">    ExecutorService threadPool = Executors.newFixedThreadPool(<span class=\"number\">300</span>);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(threadCount);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadnum = i;</span><br><span class=\"line\">      threadPool.execute(() -&gt; &#123;<span class=\"comment\">// Lambda 表达式的运用</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          test(threadnum);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">          countDownLatch.countDown();<span class=\"comment\">// 表示一个请求已经被完成</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    countDownLatch.await();</span><br><span class=\"line\">    threadPool.shutdown();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"finish\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> threadnum)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>);<span class=\"comment\">// 模拟请求的耗时操作</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"threadnum:\"</span> + threadnum);</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>);<span class=\"comment\">// 模拟请求的耗时操作</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中，我们定义了请求的数量为 550，当这 550 个请求被处理完成之后，才会执行<code>System.out.println(&quot;finish&quot;);</code>。</p>\n<p>与 CountDownLatch 的第一次交互是主线程等待其他线程。主线程必须在启动其他线程后立即调用 <code>CountDownLatch.await()</code> 方法。这样主线程的操作就会在这个方法上阻塞，直到其他线程完成各自的任务。</p>\n<p>其他 N 个线程必须引用闭锁对象，因为他们需要通知 <code>CountDownLatch</code> 对象，他们已经完成了各自的任务。这种通知机制是通过 <code>CountDownLatch.countDown()</code>方法来完成的；每调用一次这个方法，在构造函数中初始化的 count 值就减 1。所以当 N 个线程都调 用了这个方法，count 的值等于 0，然后主线程就能通过 <code>await()</code>方法，恢复执行自己的任务。</p>\n<p>再插一嘴：<code>CountDownLatch</code> 的 <code>await()</code> 方法使用不当很容易产生死锁，比如我们上面代码中的 for 循环改为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; threadCount-<span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">.......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就导致 <code>count</code> 的值没办法等于 0，然后就会导致一直等待。</p>\n<p>如果对CountDownLatch源码感兴趣的朋友，可以查看： <a href=\"https://www.cnblogs.com/leesf456/p/5406191.html\" target=\"_blank\" rel=\"noopener\">【JUC】JDK1.8源码分析之CountDownLatch（五）</a></p>\n<h4 id=\"4-3-CountDownLatch-的不足\"><a href=\"#4-3-CountDownLatch-的不足\" class=\"headerlink\" title=\"4.3 CountDownLatch 的不足\"></a>4.3 CountDownLatch 的不足</h4><p>CountDownLatch 是一次性的，计数器的值只能在构造方法中初始化一次，之后没有任何机制再次对其设置值，当 CountDownLatch 使用完毕后，它不能再次被使用。</p>\n<h4 id=\"4-4-CountDownLatch-相常见面试题\"><a href=\"#4-4-CountDownLatch-相常见面试题\" class=\"headerlink\" title=\"4.4 CountDownLatch 相常见面试题\"></a>4.4 CountDownLatch 相常见面试题</h4><p>解释一下 CountDownLatch 概念？</p>\n<p>CountDownLatch 和 CyclicBarrier 的不同之处？</p>\n<p>给出一些 CountDownLatch 使用的例子？</p>\n<p>CountDownLatch 类中主要的方法？</p>\n<h3 id=\"5-CyclicBarrier-循环栅栏\"><a href=\"#5-CyclicBarrier-循环栅栏\" class=\"headerlink\" title=\"5 CyclicBarrier(循环栅栏)\"></a>5 CyclicBarrier(循环栅栏)</h3><p>CyclicBarrier 和 CountDownLatch 非常类似，它也可以实现线程间的技术等待，但是它的功能比 CountDownLatch 更加复杂和强大。主要应用场景和 CountDownLatch 类似。</p>\n<blockquote>\n<p>CountDownLatch的实现是基于AQS的，而CycliBarrier是基于 ReentrantLock(ReentrantLock也属于AQS同步器)和 Condition 的.</p>\n</blockquote>\n<p>CyclicBarrier 的字面意思是可循环使用（Cyclic）的屏障（Barrier）。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。CyclicBarrier 默认的构造方法是 <code>CyclicBarrier(int parties)</code>，其参数表示屏障拦截的线程数量，每个线程调用<code>await</code>方法告诉 CyclicBarrier 我已经到达了屏障，然后当前线程被阻塞。</p>\n<p>再来看一下它的构造函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CyclicBarrier</span><span class=\"params\">(<span class=\"keyword\">int</span> parties)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(parties, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CyclicBarrier</span><span class=\"params\">(<span class=\"keyword\">int</span> parties, Runnable barrierAction)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parties &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parties = parties;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.count = parties;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.barrierCommand = barrierAction;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中，parties 就代表了有拦截的线程的数量，当拦截的线程数量达到这个值的时候就打开栅栏，让所有线程通过。</p>\n<h4 id=\"5-1-CyclicBarrier-的应用场景\"><a href=\"#5-1-CyclicBarrier-的应用场景\" class=\"headerlink\" title=\"5.1 CyclicBarrier 的应用场景\"></a>5.1 CyclicBarrier 的应用场景</h4><p>CyclicBarrier 可以用于多线程计算数据，最后合并计算结果的应用场景。比如我们用一个 Excel 保存了用户所有银行流水，每个 Sheet 保存一个帐户近一年的每笔银行流水，现在需要统计用户的日均银行流水，先用多线程处理每个 sheet 里的银行流水，都执行完之后，得到每个 sheet 的日均银行流水，最后，再用 barrierAction 用这些线程的计算结果，计算出整个 Excel 的日均银行流水。</p>\n<h4 id=\"5-2-CyclicBarrier-的使用示例\"><a href=\"#5-2-CyclicBarrier-的使用示例\" class=\"headerlink\" title=\"5.2 CyclicBarrier 的使用示例\"></a>5.2 CyclicBarrier 的使用示例</h4><p>示例 1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Snailclimb</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018年10月1日</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 测试 CyclicBarrier 类中带参数的 await() 方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CyclicBarrierExample2</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 请求的数量</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadCount = <span class=\"number\">550</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 需要同步的线程数量</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> CyclicBarrier cyclicBarrier = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建线程池</span></span><br><span class=\"line\">    ExecutorService threadPool = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadNum = i;</span><br><span class=\"line\">      Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">      threadPool.execute(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          test(threadNum);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    threadPool.shutdown();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> threadnum)</span> <span class=\"keyword\">throws</span> InterruptedException, BrokenBarrierException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"threadnum:\"</span> + threadnum + <span class=\"string\">\"is ready\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">/**等待60秒，保证子线程完全执行结束*/</span></span><br><span class=\"line\">      cyclicBarrier.await(<span class=\"number\">60</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"-----CyclicBarrierException------\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"threadnum:\"</span> + threadnum + <span class=\"string\">\"is finish\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">threadnum:<span class=\"number\">0</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">1</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">2</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">3</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">4</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">4</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">0</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">1</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">2</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">3</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">5</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">6</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">7</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">8</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">9</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">9</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">5</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">8</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">7</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">6</span>is finish</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<p>可以看到当线程数量也就是请求数量达到我们定义的 5 个的时候， <code>await</code>方法之后的方法才被执行。</p>\n<p>另外，CyclicBarrier 还提供一个更高级的构造函数<code>CyclicBarrier(int parties, Runnable barrierAction)</code>，用于在线程到达屏障时，优先执行<code>barrierAction</code>，方便处理更复杂的业务场景。示例代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> SnailClimb</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018年10月1日</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 新建 CyclicBarrier 的时候指定一个 Runnable</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CyclicBarrierExample3</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 请求的数量</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadCount = <span class=\"number\">550</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 需要同步的线程数量</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> CyclicBarrier cyclicBarrier = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">5</span>, () -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"------当线程数达到之后，优先执行------\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建线程池</span></span><br><span class=\"line\">    ExecutorService threadPool = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadNum = i;</span><br><span class=\"line\">      Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">      threadPool.execute(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          test(threadNum);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    threadPool.shutdown();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> threadnum)</span> <span class=\"keyword\">throws</span> InterruptedException, BrokenBarrierException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"threadnum:\"</span> + threadnum + <span class=\"string\">\"is ready\"</span>);</span><br><span class=\"line\">    cyclicBarrier.await();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"threadnum:\"</span> + threadnum + <span class=\"string\">\"is finish\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">threadnum:<span class=\"number\">0</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">1</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">2</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">3</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">4</span>is ready</span><br><span class=\"line\">------当线程数达到之后，优先执行------</span><br><span class=\"line\">threadnum:<span class=\"number\">4</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">0</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">2</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">1</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">3</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">5</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">6</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">7</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">8</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">9</span>is ready</span><br><span class=\"line\">------当线程数达到之后，优先执行------</span><br><span class=\"line\">threadnum:<span class=\"number\">9</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">5</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">6</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">8</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">7</span>is finish</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-3-CyclicBarrier源码分析\"><a href=\"#5-3-CyclicBarrier源码分析\" class=\"headerlink\" title=\"5.3 CyclicBarrier源码分析\"></a>5.3 <code>CyclicBarrier</code>源码分析</h4><p>当调用 <code>CyclicBarrier</code> 对象调用 <code>await()</code> 方法时，实际上调用的是<code>dowait(false, 0L)</code>方法。 <code>await()</code> 方法就像树立起一个栅栏的行为一样，将线程挡住了，当拦住的线程数量达到 parties 的值时，栅栏才会打开，线程才得以通过执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">await</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException, BrokenBarrierException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dowait(<span class=\"keyword\">false</span>, <span class=\"number\">0L</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (TimeoutException toe) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(toe); <span class=\"comment\">// cannot happen</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>dowait(false, 0L)</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当线程数量或者请求数量达到 count 时 await 之后的方法才会被执行。上面的示例中 count 的值就为 5。</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Main barrier code, covering the various policies.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">dowait</span><span class=\"params\">(<span class=\"keyword\">boolean</span> timed, <span class=\"keyword\">long</span> nanos)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> InterruptedException, BrokenBarrierException,</span></span><br><span class=\"line\"><span class=\"function\">           TimeoutException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</span><br><span class=\"line\">    <span class=\"comment\">// 锁住</span></span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Generation g = generation;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (g.broken)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BrokenBarrierException();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果线程中断了，抛出异常</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Thread.interrupted()) &#123;</span><br><span class=\"line\">            breakBarrier();</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InterruptedException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// cout减1</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = --count;</span><br><span class=\"line\">        <span class=\"comment\">// 当 count 数量减为 0 之后说明最后一个线程已经到达栅栏了，也就是达到了可以执行await 方法之后的条件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;  <span class=\"comment\">// tripped</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> ranAction = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> Runnable command = barrierCommand;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (command != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    command.run();</span><br><span class=\"line\">                ranAction = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 将 count 重置为 parties 属性的初始化值</span></span><br><span class=\"line\">                <span class=\"comment\">// 唤醒之前等待的线程</span></span><br><span class=\"line\">                <span class=\"comment\">// 下一波执行开始</span></span><br><span class=\"line\">                nextGeneration();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!ranAction)</span><br><span class=\"line\">                    breakBarrier();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// loop until tripped, broken, interrupted, or timed out</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!timed)</span><br><span class=\"line\">                    trip.await();</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nanos &gt; <span class=\"number\">0L</span>)</span><br><span class=\"line\">                    nanos = trip.awaitNanos(nanos);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException ie) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (g == generation &amp;&amp; ! g.broken) &#123;</span><br><span class=\"line\">                    breakBarrier();</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> ie;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// We're about to finish waiting even if we had not</span></span><br><span class=\"line\">                    <span class=\"comment\">// been interrupted, so this interrupt is deemed to</span></span><br><span class=\"line\">                    <span class=\"comment\">// \"belong\" to subsequent execution.</span></span><br><span class=\"line\">                    Thread.currentThread().interrupt();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (g.broken)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BrokenBarrierException();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (g != generation)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> index;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (timed &amp;&amp; nanos &lt;= <span class=\"number\">0L</span>) &#123;</span><br><span class=\"line\">                breakBarrier();</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> TimeoutException();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：<code>CyclicBarrier</code> 内部通过一个 count 变量作为计数器，cout 的初始值为 parties 属性的初始化值，每当一个线程到了栅栏这里了，那么就将计数器减一。如果 count 值为 0 了，表示这是这一代最后一个线程到达栅栏，就尝试执行我们构造方法中输入的任务。</p>\n<h4 id=\"5-4-CyclicBarrier-和-CountDownLatch-的区别\"><a href=\"#5-4-CyclicBarrier-和-CountDownLatch-的区别\" class=\"headerlink\" title=\"5.4 CyclicBarrier 和 CountDownLatch 的区别\"></a>5.4 CyclicBarrier 和 CountDownLatch 的区别</h4><p><strong>下面这个是国外一个大佬的回答：</strong></p>\n<p>CountDownLatch 是计数器，只能使用一次，而 CyclicBarrier 的计数器提供 reset 功能，可以多次使用。但是我不那么认为它们之间的区别仅仅就是这么简单的一点。我们来从 jdk 作者设计的目的来看，javadoc 是这么描述它们的：</p>\n<blockquote>\n<p>CountDownLatch: A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes.(CountDownLatch: 一个或者多个线程，等待其他多个线程完成某件事情之后才能执行；) CyclicBarrier : A synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point.(CyclicBarrier : 多个线程互相等待，直到到达同一个同步点，再继续一起执行。)</p>\n</blockquote>\n<p>对于 CountDownLatch 来说，重点是“一个线程（多个线程）等待”，而其他的 N 个线程在完成“某件事情”之后，可以终止，也可以等待。而对于 CyclicBarrier，重点是多个线程，在任意一个线程没有完成，所有的线程都必须等待。</p>\n<p>CountDownLatch 是计数器，线程完成一个记录一个，只不过计数不是递增而是递减，而 CyclicBarrier 更像是一个阀门，需要所有线程都到达，阀门才能打开，然后继续执行。</p>\n<h3 id=\"6-ReentrantLock-和-ReentrantReadWriteLock\"><a href=\"#6-ReentrantLock-和-ReentrantReadWriteLock\" class=\"headerlink\" title=\"6 ReentrantLock 和 ReentrantReadWriteLock\"></a>6 ReentrantLock 和 ReentrantReadWriteLock</h3><p>ReentrantLock 和 synchronized 的区别在上面已经讲过了这里就不多做讲解。另外，需要注意的是：读写锁 ReentrantReadWriteLock 可以保证多个线程可以同时读，所以在读操作远大于写操作的时候，读写锁就非常有用了。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://juejin.im/post/5ae755256fb9a07ac3634067\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5ae755256fb9a07ac3634067</a></li>\n<li><a href=\"https://blog.csdn.net/u010185262/article/details/54692886\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010185262/article/details/54692886</a></li>\n<li><a href=\"https://blog.csdn.net/tolcf/article/details/50925145?utm_source=blogxgwz0\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/tolcf/article/details/50925145?utm_source=blogxgwz0</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"AQS-介绍\"><a href=\"#AQS-介绍\" class=\"headerlink\" title=\"AQS 介绍\"></a>AQS 介绍</h1><h3 id=\"1-AQS-简单介绍\"><a href=\"#1-AQS-简单介绍\" class=\"headerlink\" title=\"1 AQS 简单介绍\"></a>1 AQS 简单介绍</h3><p>AQS 的全称为（AbstractQueuedSynchronizer），这个类在 java.util.concurrent.locks 包下面。</p>\n<p><img src=\"/images/54546254.png\" alt=\"类图\"></p>\n<p>AQS 是一个用来构建锁和同步器的框架，使用 AQS 能简单且高效地构造出应用广泛的大量的同步器，比如我们提到的 ReentrantLock，Semaphore，其他的诸如 ReentrantReadWriteLock，SynchronousQueue，FutureTask(jdk1.7) 等等皆是基于 AQS 的。当然，我们自己也能利用 AQS 非常轻松容易地构造出符合我们自己需求的同步器。</p>\n<h3 id=\"2-AQS-原理\"><a href=\"#2-AQS-原理\" class=\"headerlink\" title=\"2 AQS 原理\"></a>2 AQS 原理</h3><blockquote>\n<p>在面试中被问到并发知识的时候，大多都会被问到“请你说一下自己对于 AQS 原理的理解”。下面给大家一个示例供大家参考，面试不是背题，大家一定要加入自己的思想，即使加入不了自己的思想也要保证自己能够通俗的讲出来而不是背出来。</p>\n</blockquote>\n<p>下面大部分内容其实在 AQS 类注释上已经给出了，不过是英语看着比较吃力一点，感兴趣的话可以看看源码。</p>\n<h4 id=\"2-1-AQS-原理概览\"><a href=\"#2-1-AQS-原理概览\" class=\"headerlink\" title=\"2.1 AQS 原理概览\"></a>2.1 AQS 原理概览</h4><p><strong>AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 CLH 队列锁实现的，即将暂时获取不到锁的线程加入到队列中。</strong></p>\n<blockquote>\n<p>CLH(Craig,Landin,and Hagersten)队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配。</p>\n</blockquote>\n<p>看个 AQS(AbstractQueuedSynchronizer)原理图：</p>\n<p><img src=\"/images/453525.png\" alt=\"453525\"></p>\n<p>AQS 使用一个 int 成员变量来表示同步状态，通过内置的 FIFO 队列来完成获取资源线程的排队工作。AQS 使用 CAS 对该同步状态进行原子操作实现对其值的修改。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> state;<span class=\"comment\">//共享变量，使用volatile修饰保证线程可见性</span></span><br></pre></td></tr></table></figure>\n\n<p>状态信息通过 protected 类型的<code>getState</code>，<code>setState</code>，<code>compareAndSetState</code>进行操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回同步状态的当前值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"comment\">// 设置同步状态的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setState</span><span class=\"params\">(<span class=\"keyword\">int</span> newState)</span> </span>&#123;</span><br><span class=\"line\">        state = newState;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//原子地（CAS操作）将同步状态值设置为给定值update如果当前同步状态的值等于expect（期望值）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSetState</span><span class=\"params\">(<span class=\"keyword\">int</span> expect, <span class=\"keyword\">int</span> update)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.compareAndSwapInt(<span class=\"keyword\">this</span>, stateOffset, expect, update);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-AQS-对资源的共享方式\"><a href=\"#2-2-AQS-对资源的共享方式\" class=\"headerlink\" title=\"2.2 AQS 对资源的共享方式\"></a>2.2 AQS 对资源的共享方式</h4><p><strong>AQS 定义两种资源共享方式</strong></p>\n<p><strong>1)Exclusive</strong>（独占）</p>\n<p>只有一个线程能执行，如 ReentrantLock。又可分为公平锁和非公平锁,ReentrantLock 同时支持两种锁,下面以 ReentrantLock 对这两种锁的定义做介绍：</p>\n<ul>\n<li>公平锁：按照线程在队列中的排队顺序，先到者先拿到锁</li>\n<li>非公平锁：当线程要获取锁时，先通过两次 CAS 操作去抢锁，如果没抢到，当前线程再加入到队列中等待唤醒。</li>\n</ul>\n<blockquote>\n<p>说明：下面这部分关于 <code>ReentrantLock</code> 源代码内容节选自：<a href=\"https://www.javadoop.com/post/AbstractQueuedSynchronizer-2\" target=\"_blank\" rel=\"noopener\">https://www.javadoop.com/post/AbstractQueuedSynchronizer-2</a> ，这是一篇很不错文章，推荐阅读。</p>\n</blockquote>\n<p><strong>下面来看 ReentrantLock 中相关的源代码：</strong></p>\n<p>ReentrantLock 默认采用非公平锁，因为考虑获得更好的性能，通过 boolean 来决定是否用公平锁（传入 true 用公平锁）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** Synchronizer providing all implementation mechanics */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Sync sync;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReentrantLock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 默认非公平锁</span></span><br><span class=\"line\">    sync = <span class=\"keyword\">new</span> NonfairSync();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReentrantLock</span><span class=\"params\">(<span class=\"keyword\">boolean</span> fair)</span> </span>&#123;</span><br><span class=\"line\">    sync = fair ? <span class=\"keyword\">new</span> FairSync() : <span class=\"keyword\">new</span> NonfairSync();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ReentrantLock 中公平锁的 <code>lock</code> 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FairSync</span> <span class=\"keyword\">extends</span> <span class=\"title\">Sync</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// AbstractQueuedSynchronizer.acquire(int arg)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">acquire</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class=\"line\">            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class=\"line\">            selfInterrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Thread current = Thread.currentThread();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c = getState();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 1. 和非公平锁相比，这里多了一个判断：是否有线程在等待</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class=\"line\">                compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\">                setExclusiveOwnerThread(current);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nextc = c + acquires;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"Maximum lock count exceeded\"</span>);</span><br><span class=\"line\">            setState(nextc);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>非公平锁的 lock 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonfairSync</span> <span class=\"keyword\">extends</span> <span class=\"title\">Sync</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2. 和公平锁相比，这里会直接先进行一次CAS，成功就返回了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">            setExclusiveOwnerThread(Thread.currentThread());</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// AbstractQueuedSynchronizer.acquire(int arg)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">acquire</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class=\"line\">            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class=\"line\">            selfInterrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nonfairTryAcquire(acquires);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Performs non-fair tryLock.  tryAcquire is implemented in</span></span><br><span class=\"line\"><span class=\"comment\"> * subclasses, but both need nonfair try for trylock method.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">nonfairTryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Thread current = Thread.currentThread();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = getState();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里没有对阻塞队列进行判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\">            setExclusiveOwnerThread(current);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nextc = c + acquires;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"Maximum lock count exceeded\"</span>);</span><br><span class=\"line\">        setState(nextc);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：公平锁和非公平锁只有两处不同：</p>\n<ol>\n<li>非公平锁在调用 lock 后，首先就会调用 CAS 进行一次抢锁，如果这个时候恰巧锁没有被占用，那么直接就获取到锁返回了。</li>\n<li>非公平锁在 CAS 失败后，和公平锁一样都会进入到 tryAcquire 方法，在 tryAcquire 方法中，如果发现锁这个时候被释放了（state == 0），非公平锁会直接 CAS 抢锁，但是公平锁会判断等待队列是否有线程处于等待状态，如果有则不去抢锁，乖乖排到后面。</li>\n</ol>\n<p>公平锁和非公平锁就这两点区别，如果这两次 CAS 都不成功，那么后面非公平锁和公平锁是一样的，都要进入到阻塞队列等待唤醒。</p>\n<p>相对来说，非公平锁会有更好的性能，因为它的吞吐量比较大。当然，非公平锁让获取锁的时间变得更加不确定，可能会导致在阻塞队列中的线程长期处于饥饿状态。</p>\n<p><strong>2)Share</strong>（共享）</p>\n<p>多个线程可同时执行，如 Semaphore/CountDownLatch。Semaphore、CountDownLatCh、 CyclicBarrier、ReadWriteLock 我们都会在后面讲到。</p>\n<p>ReentrantReadWriteLock 可以看成是组合式，因为 ReentrantReadWriteLock 也就是读写锁允许多个线程同时对某一资源进行读。</p>\n<p>不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源 state 的获取与释放方式即可，至于具体线程等待队列的维护（如获取资源失败入队/唤醒出队等），AQS 已经在上层已经帮我们实现好了。</p>\n<h4 id=\"2-3-AQS-底层使用了模板方法模式\"><a href=\"#2-3-AQS-底层使用了模板方法模式\" class=\"headerlink\" title=\"2.3 AQS 底层使用了模板方法模式\"></a>2.3 AQS 底层使用了模板方法模式</h4><p>同步器的设计是基于模板方法模式的，如果需要自定义同步器一般的方式是这样（模板方法模式很经典的一个应用）：</p>\n<ol>\n<li>使用者继承 AbstractQueuedSynchronizer 并重写指定的方法。（这些重写方法很简单，无非是对于共享资源 state 的获取和释放）</li>\n<li>将 AQS 组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。</li>\n</ol>\n<p>这和我们以往通过实现接口的方式有很大区别，这是模板方法模式很经典的一个运用，下面简单的给大家介绍一下模板方法模式，模板方法模式是一个很容易理解的设计模式之一。</p>\n<blockquote>\n<p>模板方法模式是基于”继承“的，主要是为了在不改变模板结构的前提下在子类中重新定义模板中的内容以实现复用代码。举个很简单的例子假如我们要去一个地方的步骤是：购票<code>buyTicket()</code>-&gt;安检<code>securityCheck()</code>-&gt;乘坐某某工具回家<code>ride()</code>-&gt;到达目的地<code>arrive()</code>。我们可能乘坐不同的交通工具回家比如飞机或者火车，所以除了<code>ride()</code>方法，其他方法的实现几乎相同。我们可以定义一个包含了这些方法的抽象类，然后用户根据自己的需要继承该抽象类然后修改 <code>ride()</code>方法。</p>\n</blockquote>\n<p><strong>AQS 使用了模板方法模式，自定义同步器时需要重写下面几个 AQS 提供的模板方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isHeldExclusively()<span class=\"comment\">//该线程是否正在独占资源。只有用到condition才需要去实现它。</span></span><br><span class=\"line\">tryAcquire(<span class=\"keyword\">int</span>)<span class=\"comment\">//独占方式。尝试获取资源，成功则返回true，失败则返回false。</span></span><br><span class=\"line\">tryRelease(<span class=\"keyword\">int</span>)<span class=\"comment\">//独占方式。尝试释放资源，成功则返回true，失败则返回false。</span></span><br><span class=\"line\">tryAcquireShared(<span class=\"keyword\">int</span>)<span class=\"comment\">//共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</span></span><br><span class=\"line\">tryReleaseShared(<span class=\"keyword\">int</span>)<span class=\"comment\">//共享方式。尝试释放资源，成功则返回true，失败则返回false。</span></span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，每个方法都抛出 <code>UnsupportedOperationException</code>。 这些方法的实现必须是内部线程安全的，并且通常应该简短而不是阻塞。AQS 类中的其他方法都是 final ，所以无法被其他类使用，只有这几个方法可以被其他类使用。</p>\n<p>以 ReentrantLock 为例，state 初始化为 0，表示未锁定状态。A 线程 lock()时，会调用 tryAcquire()独占该锁并将 state+1。此后，其他线程再 tryAcquire()时就会失败，直到 A 线程 unlock()到 state=0（即释放锁）为止，其它线程才有机会获取该锁。当然，释放锁之前，A 线程自己是可以重复获取此锁的（state 会累加），这就是可重入的概念。但要注意，获取多少次就要释放多么次，这样才能保证 state 是能回到零态的。</p>\n<p>再以 CountDownLatch 以例，任务分为 N 个子线程去执行，state 也初始化为 N（注意 N 要与线程个数一致）。这 N 个子线程是并行执行的，每个子线程执行完后 countDown()一次，state 会 CAS(Compare and Swap)减 1。等到所有子线程都执行完后(即 state=0)，会 unpark()主调用线程，然后主调用线程就会从 await()函数返回，继续后余动作。</p>\n<p>一般来说，自定义同步器要么是独占方法，要么是共享方式，他们也只需实现<code>tryAcquire-tryRelease</code>、<code>tryAcquireShared-tryReleaseShared</code>中的一种即可。但 AQS 也支持自定义同步器同时实现独占和共享两种方式，如<code>ReentrantReadWriteLock</code>。</p>\n<p>推荐两篇 AQS 原理和相关源码分析的文章：</p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/waterystone/p/4920797.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/waterystone/p/4920797.html</a></li>\n<li><a href=\"https://www.cnblogs.com/chengxiao/archive/2017/07/24/7141160.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chengxiao/archive/2017/07/24/7141160.html</a></li>\n</ul>\n<h3 id=\"3-Semaphore-信号量-允许多个线程同时访问\"><a href=\"#3-Semaphore-信号量-允许多个线程同时访问\" class=\"headerlink\" title=\"3 Semaphore(信号量)-允许多个线程同时访问\"></a>3 Semaphore(信号量)-允许多个线程同时访问</h3><p><strong>synchronized 和 ReentrantLock 都是一次只允许一个线程访问某个资源，Semaphore(信号量)可以指定多个线程同时访问某个资源。</strong></p>\n<p>示例代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Snailclimb</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018年9月30日</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 需要一次性拿一个许可的情况</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SemaphoreExample1</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 请求的数量</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadCount = <span class=\"number\">550</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个具有固定线程数量的线程池对象（如果这里线程池的线程数量给太少的话你会发现执行的很慢）</span></span><br><span class=\"line\">    ExecutorService threadPool = Executors.newFixedThreadPool(<span class=\"number\">300</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 一次只能允许执行的线程数量。</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Semaphore semaphore = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadnum = i;</span><br><span class=\"line\">      threadPool.execute(() -&gt; &#123;<span class=\"comment\">// Lambda 表达式的运用</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          semaphore.acquire();<span class=\"comment\">// 获取一个许可，所以可运行线程数量为20/1=20</span></span><br><span class=\"line\">          test(threadnum);</span><br><span class=\"line\">          semaphore.release();<span class=\"comment\">// 释放一个许可</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    threadPool.shutdown();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"finish\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> threadnum)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>);<span class=\"comment\">// 模拟请求的耗时操作</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"threadnum:\"</span> + threadnum);</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>);<span class=\"comment\">// 模拟请求的耗时操作</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>acquire</code> 方法阻塞，直到有一个许可证可以获得然后拿走一个许可证；每个 <code>release</code> 方法增加一个许可证，这可能会释放一个阻塞的 acquire 方法。然而，其实并没有实际的许可证这个对象，Semaphore 只是维持了一个可获得许可证的数量。 Semaphore 经常用于限制获取某种资源的线程数量。</p>\n<p>当然一次也可以一次拿取和释放多个许可，不过一般没有必要这样做：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">semaphore.acquire(<span class=\"number\">5</span>);<span class=\"comment\">// 获取5个许可，所以可运行线程数量为20/5=4</span></span><br><span class=\"line\">test(threadnum);</span><br><span class=\"line\">semaphore.release(<span class=\"number\">5</span>);<span class=\"comment\">// 获取5个许可，所以可运行线程数量为20/5=4</span></span><br></pre></td></tr></table></figure>\n\n<p>除了 <code>acquire</code>方法之外，另一个比较常用的与之对应的方法是<code>tryAcquire</code>方法，该方法如果获取不到许可就立即返回 false。</p>\n<p>Semaphore 有两种模式，公平模式和非公平模式。</p>\n<ul>\n<li><strong>公平模式：</strong> 调用 acquire 的顺序就是获取许可证的顺序，遵循 FIFO；</li>\n<li><strong>非公平模式：</strong> 抢占式的。</li>\n</ul>\n<p><strong>Semaphore 对应的两个构造方法如下：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Semaphore</span><span class=\"params\">(<span class=\"keyword\">int</span> permits)</span> </span>&#123;</span><br><span class=\"line\">     sync = <span class=\"keyword\">new</span> NonfairSync(permits);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Semaphore</span><span class=\"params\">(<span class=\"keyword\">int</span> permits, <span class=\"keyword\">boolean</span> fair)</span> </span>&#123;</span><br><span class=\"line\">     sync = fair ? <span class=\"keyword\">new</span> FairSync(permits) : <span class=\"keyword\">new</span> NonfairSync(permits);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>这两个构造方法，都必须提供许可的数量，第二个构造方法可以指定是公平模式还是非公平模式，默认非公平模式。</strong></p>\n<p><a href=\"https://github.com/Snailclimb/JavaGuide/issues/645\" target=\"_blank\" rel=\"noopener\">issue645补充内容</a> ：Semaphore与CountDownLatch一样，也是共享锁的一种实现。它默认构造AQS的state为permits。当执行任务的线程数量超出permits,那么多余的线程将会被放入阻塞队列Park,并自旋判断state是否大于0。只有当state大于0的时候，阻塞的线程才能继续执行,此时先前执行任务的线程继续执行release方法，release方法使得state的变量会加1，那么自旋的线程便会判断成功。 如此，每次只有最多不超过permits数量的线程能自旋成功，便限制了执行任务线程的数量。</p>\n<p>由于篇幅问题，如果对 Semaphore 源码感兴趣的朋友可以看下这篇文章：<a href=\"https://juejin.im/post/5ae755366fb9a07ab508adc6\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5ae755366fb9a07ab508adc6</a></p>\n<h3 id=\"4-CountDownLatch-（倒计时器）\"><a href=\"#4-CountDownLatch-（倒计时器）\" class=\"headerlink\" title=\"4 CountDownLatch （倒计时器）\"></a>4 CountDownLatch （倒计时器）</h3><p>CountDownLatch允许 count 个线程阻塞在一个地方，直至所有线程的任务都执行完毕。在 Java 并发中，countdownlatch 的概念是一个常见的面试题，所以一定要确保你很好的理解了它。</p>\n<p>CountDownLatch是共享锁的一种实现,它默认构造 AQS 的 state 值为 count。当线程使用countDown方法时,其实使用了<code>tryReleaseShared</code>方法以CAS的操作来减少state,直至state为0就代表所有的线程都调用了countDown方法。当调用await方法的时候，如果state不为0，就代表仍然有线程没有调用countDown方法，那么就把已经调用过countDown的线程都放入阻塞队列Park,并自旋CAS判断state == 0，直至最后一个线程调用了countDown，使得state == 0，于是阻塞的线程便判断成功，全部往下执行。</p>\n<h4 id=\"4-1-CountDownLatch-的两种典型用法\"><a href=\"#4-1-CountDownLatch-的两种典型用法\" class=\"headerlink\" title=\"4.1 CountDownLatch 的两种典型用法\"></a>4.1 CountDownLatch 的两种典型用法</h4><ol>\n<li>某一线程在开始运行前等待 n 个线程执行完毕。将 CountDownLatch 的计数器初始化为 n ：<code>new CountDownLatch(n)</code>，每当一个任务线程执行完毕，就将计数器减 1 <code>countdownlatch.countDown()</code>，当计数器的值变为 0 时，在<code>CountDownLatch上 await()</code> 的线程就会被唤醒。一个典型应用场景就是启动一个服务时，主线程需要等待多个组件加载完毕，之后再继续执行。</li>\n<li>实现多个线程开始执行任务的最大并行性。注意是并行性，不是并发，强调的是多个线程在某一时刻同时开始执行。类似于赛跑，将多个线程放到起点，等待发令枪响，然后同时开跑。做法是初始化一个共享的 <code>CountDownLatch</code> 对象，将其计数器初始化为 1 ：<code>new CountDownLatch(1)</code>，多个线程在开始执行任务前首先 <code>coundownlatch.await()</code>，当主线程调用 countDown() 时，计数器变为 0，多个线程同时被唤醒。</li>\n</ol>\n<h4 id=\"4-2-CountDownLatch-的使用示例\"><a href=\"#4-2-CountDownLatch-的使用示例\" class=\"headerlink\" title=\"4.2 CountDownLatch 的使用示例\"></a>4.2 CountDownLatch 的使用示例</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> SnailClimb</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018年10月1日</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: CountDownLatch 使用方法示例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CountDownLatchExample1</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 请求的数量</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadCount = <span class=\"number\">550</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个具有固定线程数量的线程池对象（如果这里线程池的线程数量给太少的话你会发现执行的很慢）</span></span><br><span class=\"line\">    ExecutorService threadPool = Executors.newFixedThreadPool(<span class=\"number\">300</span>);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(threadCount);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadnum = i;</span><br><span class=\"line\">      threadPool.execute(() -&gt; &#123;<span class=\"comment\">// Lambda 表达式的运用</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          test(threadnum);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">          countDownLatch.countDown();<span class=\"comment\">// 表示一个请求已经被完成</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    countDownLatch.await();</span><br><span class=\"line\">    threadPool.shutdown();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"finish\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> threadnum)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>);<span class=\"comment\">// 模拟请求的耗时操作</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"threadnum:\"</span> + threadnum);</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>);<span class=\"comment\">// 模拟请求的耗时操作</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中，我们定义了请求的数量为 550，当这 550 个请求被处理完成之后，才会执行<code>System.out.println(&quot;finish&quot;);</code>。</p>\n<p>与 CountDownLatch 的第一次交互是主线程等待其他线程。主线程必须在启动其他线程后立即调用 <code>CountDownLatch.await()</code> 方法。这样主线程的操作就会在这个方法上阻塞，直到其他线程完成各自的任务。</p>\n<p>其他 N 个线程必须引用闭锁对象，因为他们需要通知 <code>CountDownLatch</code> 对象，他们已经完成了各自的任务。这种通知机制是通过 <code>CountDownLatch.countDown()</code>方法来完成的；每调用一次这个方法，在构造函数中初始化的 count 值就减 1。所以当 N 个线程都调 用了这个方法，count 的值等于 0，然后主线程就能通过 <code>await()</code>方法，恢复执行自己的任务。</p>\n<p>再插一嘴：<code>CountDownLatch</code> 的 <code>await()</code> 方法使用不当很容易产生死锁，比如我们上面代码中的 for 循环改为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; threadCount-<span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">.......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就导致 <code>count</code> 的值没办法等于 0，然后就会导致一直等待。</p>\n<p>如果对CountDownLatch源码感兴趣的朋友，可以查看： <a href=\"https://www.cnblogs.com/leesf456/p/5406191.html\" target=\"_blank\" rel=\"noopener\">【JUC】JDK1.8源码分析之CountDownLatch（五）</a></p>\n<h4 id=\"4-3-CountDownLatch-的不足\"><a href=\"#4-3-CountDownLatch-的不足\" class=\"headerlink\" title=\"4.3 CountDownLatch 的不足\"></a>4.3 CountDownLatch 的不足</h4><p>CountDownLatch 是一次性的，计数器的值只能在构造方法中初始化一次，之后没有任何机制再次对其设置值，当 CountDownLatch 使用完毕后，它不能再次被使用。</p>\n<h4 id=\"4-4-CountDownLatch-相常见面试题\"><a href=\"#4-4-CountDownLatch-相常见面试题\" class=\"headerlink\" title=\"4.4 CountDownLatch 相常见面试题\"></a>4.4 CountDownLatch 相常见面试题</h4><p>解释一下 CountDownLatch 概念？</p>\n<p>CountDownLatch 和 CyclicBarrier 的不同之处？</p>\n<p>给出一些 CountDownLatch 使用的例子？</p>\n<p>CountDownLatch 类中主要的方法？</p>\n<h3 id=\"5-CyclicBarrier-循环栅栏\"><a href=\"#5-CyclicBarrier-循环栅栏\" class=\"headerlink\" title=\"5 CyclicBarrier(循环栅栏)\"></a>5 CyclicBarrier(循环栅栏)</h3><p>CyclicBarrier 和 CountDownLatch 非常类似，它也可以实现线程间的技术等待，但是它的功能比 CountDownLatch 更加复杂和强大。主要应用场景和 CountDownLatch 类似。</p>\n<blockquote>\n<p>CountDownLatch的实现是基于AQS的，而CycliBarrier是基于 ReentrantLock(ReentrantLock也属于AQS同步器)和 Condition 的.</p>\n</blockquote>\n<p>CyclicBarrier 的字面意思是可循环使用（Cyclic）的屏障（Barrier）。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。CyclicBarrier 默认的构造方法是 <code>CyclicBarrier(int parties)</code>，其参数表示屏障拦截的线程数量，每个线程调用<code>await</code>方法告诉 CyclicBarrier 我已经到达了屏障，然后当前线程被阻塞。</p>\n<p>再来看一下它的构造函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CyclicBarrier</span><span class=\"params\">(<span class=\"keyword\">int</span> parties)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(parties, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CyclicBarrier</span><span class=\"params\">(<span class=\"keyword\">int</span> parties, Runnable barrierAction)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parties &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parties = parties;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.count = parties;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.barrierCommand = barrierAction;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中，parties 就代表了有拦截的线程的数量，当拦截的线程数量达到这个值的时候就打开栅栏，让所有线程通过。</p>\n<h4 id=\"5-1-CyclicBarrier-的应用场景\"><a href=\"#5-1-CyclicBarrier-的应用场景\" class=\"headerlink\" title=\"5.1 CyclicBarrier 的应用场景\"></a>5.1 CyclicBarrier 的应用场景</h4><p>CyclicBarrier 可以用于多线程计算数据，最后合并计算结果的应用场景。比如我们用一个 Excel 保存了用户所有银行流水，每个 Sheet 保存一个帐户近一年的每笔银行流水，现在需要统计用户的日均银行流水，先用多线程处理每个 sheet 里的银行流水，都执行完之后，得到每个 sheet 的日均银行流水，最后，再用 barrierAction 用这些线程的计算结果，计算出整个 Excel 的日均银行流水。</p>\n<h4 id=\"5-2-CyclicBarrier-的使用示例\"><a href=\"#5-2-CyclicBarrier-的使用示例\" class=\"headerlink\" title=\"5.2 CyclicBarrier 的使用示例\"></a>5.2 CyclicBarrier 的使用示例</h4><p>示例 1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Snailclimb</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018年10月1日</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 测试 CyclicBarrier 类中带参数的 await() 方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CyclicBarrierExample2</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 请求的数量</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadCount = <span class=\"number\">550</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 需要同步的线程数量</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> CyclicBarrier cyclicBarrier = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建线程池</span></span><br><span class=\"line\">    ExecutorService threadPool = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadNum = i;</span><br><span class=\"line\">      Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">      threadPool.execute(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          test(threadNum);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    threadPool.shutdown();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> threadnum)</span> <span class=\"keyword\">throws</span> InterruptedException, BrokenBarrierException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"threadnum:\"</span> + threadnum + <span class=\"string\">\"is ready\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">/**等待60秒，保证子线程完全执行结束*/</span></span><br><span class=\"line\">      cyclicBarrier.await(<span class=\"number\">60</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"-----CyclicBarrierException------\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"threadnum:\"</span> + threadnum + <span class=\"string\">\"is finish\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">threadnum:<span class=\"number\">0</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">1</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">2</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">3</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">4</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">4</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">0</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">1</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">2</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">3</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">5</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">6</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">7</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">8</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">9</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">9</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">5</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">8</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">7</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">6</span>is finish</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<p>可以看到当线程数量也就是请求数量达到我们定义的 5 个的时候， <code>await</code>方法之后的方法才被执行。</p>\n<p>另外，CyclicBarrier 还提供一个更高级的构造函数<code>CyclicBarrier(int parties, Runnable barrierAction)</code>，用于在线程到达屏障时，优先执行<code>barrierAction</code>，方便处理更复杂的业务场景。示例代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> SnailClimb</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018年10月1日</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: 新建 CyclicBarrier 的时候指定一个 Runnable</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CyclicBarrierExample3</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 请求的数量</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadCount = <span class=\"number\">550</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 需要同步的线程数量</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> CyclicBarrier cyclicBarrier = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">5</span>, () -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"------当线程数达到之后，优先执行------\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建线程池</span></span><br><span class=\"line\">    ExecutorService threadPool = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> threadNum = i;</span><br><span class=\"line\">      Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">      threadPool.execute(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          test(threadNum);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    threadPool.shutdown();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> threadnum)</span> <span class=\"keyword\">throws</span> InterruptedException, BrokenBarrierException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"threadnum:\"</span> + threadnum + <span class=\"string\">\"is ready\"</span>);</span><br><span class=\"line\">    cyclicBarrier.await();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"threadnum:\"</span> + threadnum + <span class=\"string\">\"is finish\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">threadnum:<span class=\"number\">0</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">1</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">2</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">3</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">4</span>is ready</span><br><span class=\"line\">------当线程数达到之后，优先执行------</span><br><span class=\"line\">threadnum:<span class=\"number\">4</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">0</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">2</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">1</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">3</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">5</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">6</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">7</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">8</span>is ready</span><br><span class=\"line\">threadnum:<span class=\"number\">9</span>is ready</span><br><span class=\"line\">------当线程数达到之后，优先执行------</span><br><span class=\"line\">threadnum:<span class=\"number\">9</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">5</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">6</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">8</span>is finish</span><br><span class=\"line\">threadnum:<span class=\"number\">7</span>is finish</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-3-CyclicBarrier源码分析\"><a href=\"#5-3-CyclicBarrier源码分析\" class=\"headerlink\" title=\"5.3 CyclicBarrier源码分析\"></a>5.3 <code>CyclicBarrier</code>源码分析</h4><p>当调用 <code>CyclicBarrier</code> 对象调用 <code>await()</code> 方法时，实际上调用的是<code>dowait(false, 0L)</code>方法。 <code>await()</code> 方法就像树立起一个栅栏的行为一样，将线程挡住了，当拦住的线程数量达到 parties 的值时，栅栏才会打开，线程才得以通过执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">await</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException, BrokenBarrierException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dowait(<span class=\"keyword\">false</span>, <span class=\"number\">0L</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (TimeoutException toe) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(toe); <span class=\"comment\">// cannot happen</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>dowait(false, 0L)</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当线程数量或者请求数量达到 count 时 await 之后的方法才会被执行。上面的示例中 count 的值就为 5。</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Main barrier code, covering the various policies.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">dowait</span><span class=\"params\">(<span class=\"keyword\">boolean</span> timed, <span class=\"keyword\">long</span> nanos)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> InterruptedException, BrokenBarrierException,</span></span><br><span class=\"line\"><span class=\"function\">           TimeoutException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</span><br><span class=\"line\">    <span class=\"comment\">// 锁住</span></span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Generation g = generation;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (g.broken)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BrokenBarrierException();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果线程中断了，抛出异常</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Thread.interrupted()) &#123;</span><br><span class=\"line\">            breakBarrier();</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InterruptedException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// cout减1</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = --count;</span><br><span class=\"line\">        <span class=\"comment\">// 当 count 数量减为 0 之后说明最后一个线程已经到达栅栏了，也就是达到了可以执行await 方法之后的条件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;  <span class=\"comment\">// tripped</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> ranAction = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> Runnable command = barrierCommand;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (command != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    command.run();</span><br><span class=\"line\">                ranAction = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 将 count 重置为 parties 属性的初始化值</span></span><br><span class=\"line\">                <span class=\"comment\">// 唤醒之前等待的线程</span></span><br><span class=\"line\">                <span class=\"comment\">// 下一波执行开始</span></span><br><span class=\"line\">                nextGeneration();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!ranAction)</span><br><span class=\"line\">                    breakBarrier();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// loop until tripped, broken, interrupted, or timed out</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!timed)</span><br><span class=\"line\">                    trip.await();</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nanos &gt; <span class=\"number\">0L</span>)</span><br><span class=\"line\">                    nanos = trip.awaitNanos(nanos);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException ie) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (g == generation &amp;&amp; ! g.broken) &#123;</span><br><span class=\"line\">                    breakBarrier();</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> ie;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// We're about to finish waiting even if we had not</span></span><br><span class=\"line\">                    <span class=\"comment\">// been interrupted, so this interrupt is deemed to</span></span><br><span class=\"line\">                    <span class=\"comment\">// \"belong\" to subsequent execution.</span></span><br><span class=\"line\">                    Thread.currentThread().interrupt();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (g.broken)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BrokenBarrierException();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (g != generation)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> index;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (timed &amp;&amp; nanos &lt;= <span class=\"number\">0L</span>) &#123;</span><br><span class=\"line\">                breakBarrier();</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> TimeoutException();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：<code>CyclicBarrier</code> 内部通过一个 count 变量作为计数器，cout 的初始值为 parties 属性的初始化值，每当一个线程到了栅栏这里了，那么就将计数器减一。如果 count 值为 0 了，表示这是这一代最后一个线程到达栅栏，就尝试执行我们构造方法中输入的任务。</p>\n<h4 id=\"5-4-CyclicBarrier-和-CountDownLatch-的区别\"><a href=\"#5-4-CyclicBarrier-和-CountDownLatch-的区别\" class=\"headerlink\" title=\"5.4 CyclicBarrier 和 CountDownLatch 的区别\"></a>5.4 CyclicBarrier 和 CountDownLatch 的区别</h4><p><strong>下面这个是国外一个大佬的回答：</strong></p>\n<p>CountDownLatch 是计数器，只能使用一次，而 CyclicBarrier 的计数器提供 reset 功能，可以多次使用。但是我不那么认为它们之间的区别仅仅就是这么简单的一点。我们来从 jdk 作者设计的目的来看，javadoc 是这么描述它们的：</p>\n<blockquote>\n<p>CountDownLatch: A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes.(CountDownLatch: 一个或者多个线程，等待其他多个线程完成某件事情之后才能执行；) CyclicBarrier : A synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point.(CyclicBarrier : 多个线程互相等待，直到到达同一个同步点，再继续一起执行。)</p>\n</blockquote>\n<p>对于 CountDownLatch 来说，重点是“一个线程（多个线程）等待”，而其他的 N 个线程在完成“某件事情”之后，可以终止，也可以等待。而对于 CyclicBarrier，重点是多个线程，在任意一个线程没有完成，所有的线程都必须等待。</p>\n<p>CountDownLatch 是计数器，线程完成一个记录一个，只不过计数不是递增而是递减，而 CyclicBarrier 更像是一个阀门，需要所有线程都到达，阀门才能打开，然后继续执行。</p>\n<h3 id=\"6-ReentrantLock-和-ReentrantReadWriteLock\"><a href=\"#6-ReentrantLock-和-ReentrantReadWriteLock\" class=\"headerlink\" title=\"6 ReentrantLock 和 ReentrantReadWriteLock\"></a>6 ReentrantLock 和 ReentrantReadWriteLock</h3><p>ReentrantLock 和 synchronized 的区别在上面已经讲过了这里就不多做讲解。另外，需要注意的是：读写锁 ReentrantReadWriteLock 可以保证多个线程可以同时读，所以在读操作远大于写操作的时候，读写锁就非常有用了。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://juejin.im/post/5ae755256fb9a07ac3634067\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5ae755256fb9a07ac3634067</a></li>\n<li><a href=\"https://blog.csdn.net/u010185262/article/details/54692886\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010185262/article/details/54692886</a></li>\n<li><a href=\"https://blog.csdn.net/tolcf/article/details/50925145?utm_source=blogxgwz0\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/tolcf/article/details/50925145?utm_source=blogxgwz0</a></li>\n</ul>\n"},{"title":"JDK8 parallelStream 与 fork/join 框架","date":"2020-05-12T17:09:49.000Z","_content":"\n## JDK1.8 parallelStream 与 fork/join 框架\n\n### 一、JDK8开启并行串行流\n\ntream是java8中新增加的一个特性,被java猿统称为流.\n\n　　Stream 不是集合元素，它不是数据结构并不保存数据，它是有关算法和计算的，它更像一个高级版本的 Iterator。原始版本的 Iterator，用户只能显式地一个一个遍历元素并对其执行某些操作；高级版本的 Stream，用户只要给出需要对其包含的元素执行什么操作，比如 “过滤掉长度大于 10 的字符串”、“获取每个字符串的首字母”等，Stream 会隐式地在内部进行遍历，做出相应的数据转换。\n\n　　Stream 就如同一个迭代器（Iterator），单向，不可往复，数据只能遍历一次，遍历过一次后即用尽了，就好比流水从面前流过，一去不复返。\n\n　　而和迭代器又不同的是，Stream 可以并行化操作，迭代器只能命令式地、串行化操作。顾名思义，当使用串行方式去遍历时，每个 item 读完后再读下一个 item。而使用并行去遍历时，数据会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出。Stream 的并行操作依赖于 Java7 中引入的 Fork/Join 框架（JSR166y）来拆分任务和加速处理过程。Java 的并行 API 演变历程基本如下：\n\n```java\n1.0-1.4 中的 java.lang.Thread  \n5.0 中的 java.util.concurrent  \n6.0 中的 Phasers 等  \n7.0 中的 Fork/Join 框架  \n8.0 中的 Lambda\n```\n\nStream 的另外一大特点是，数据源本身可以是无限的。\n\n#### 1.1 什么是parallelStream\n\nparallelStream其实就是一个并行执行的流.它通过默认的ForkJoinPool,可能提高你的多线程任务的速度.实际是多线程，注意线程安全问题\n\n　　在从stream和parallelStream方法中进行选择时,我们可以考虑以下几个问题：\n\n```\n　　1. 是否需要并行？  \n　　2. 任务之间是否是独立的？是否会引起任何竞态条件？  \n　　3. 结果是否取决于任务的调用顺序？  \n```\n\n　　对于问题1，需要弄清楚要解决的问题是什么，数据量有多大，计算的特点是什么？并不是所有的问题都适合使用并发程序来求解，比如当数据量不大时，顺序执行往往比并行执行更快。毕竟，准备线程池和其它相关资源也是需要时间的。但是，当任务涉及到I/O操作并且任务之间不互相依赖时，那么并行化就是一个不错的选择。通常而言，将这类程序并行化之后，执行速度会提升好几个等级。\n\n　　对于问题2，如果任务之间是独立的，并且代码中不涉及到对同一个对象的某个状态或者某个变量的更新操作，那么就表明代码是可以被并行化的。\n\n　　对于问题3，由于在并行环境中任务的执行顺序是不确定的，因此对于依赖于顺序的任务而言，并行化也许不能给出正确的结果。　　\n\n　　场景：默认值适用的场景是CPU密集型的，而一般的Web项目是IO密集型的（一般的Web项目都是需要跟数据库打交道的，针对数据库的操作主要就都是IO，而对CPU的消耗并不高）。\n\n　　当不能使用默认值的时候，需要开发人员额外去了解parallelStream的用法，如下：\n\n#### 1.2 parallelStream作用\n\nStream具有平行处理能力，处理的过程会分而治之，也就是将一个大任务切分成多个小任务，这表示每个任务都是一个操作，因此像以下的程式片段：\n\n```\nList<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);\nnumbers.parallelStream()\n       .forEach(out::println);  \n```\n\n　　得到的展示顺序不一定会是1、2、3、4、5、6、7、8、9，而可能是任意的顺序，就forEach()这个操作來讲，如果平行处理时，希望最后顺序是按照原来Stream的数据顺序，那可以调用forEachOrdered()。例如：\n\n```\nList<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);\nnumbers.parallelStream()\n       .forEachOrdered(out::println); \n```\n\n　　注意:如果forEachOrdered()中间有其他如filter()的中介操作，会试着平行化处理，然后最终forEachOrdered()会以原数据顺序处理，因此，使用forEachOrdered()这类的有序处理,可能会（或完全失去）失去平行化的一些优势，实际上中介操作亦有可能如此，例如sorted()方法。\n\n#### 1.3 开启串行流和并行流：\t\t\n\n```java\n    @Test\n    public void testStream() {\n        List<Integer> list = getList();\n\n        // 串行流\n        list.stream();\n        list.stream().sequential();\n\n        // 并行流\n        list.stream().parallel();\n        list.parallelStream().reduce(null);\n\n        // 串行流执行\n        list.stream().reduce((first, second) -> first+second);/\n\n        // 并行流执行\n        list.parallelStream().reduce((first, second) -> first+second);\n    }\n```\n\n#### 1.2 流处理\n\n因为比较关心并行流的实现，所以看并行流的代码：\n\njava.util.stream.ReduceOps.ReduceOp\n\n```java\nprivate static abstract class ReduceOp<T, R, S extends AccumulatingSink<T, R, S>>\n        implements TerminalOp<T, R> {\n    private final StreamShape inputShape;\n\n    /**\n     * Create a {@code ReduceOp} of the specified stream shape which uses\n     * the specified {@code Supplier} to create accumulating sinks.\n     *\n     * @param shape The shape of the stream pipeline\n     */\n    ReduceOp(StreamShape shape) {\n        inputShape = shape;\n    }\n\n    public abstract S makeSink();\n\n    @Override\n    public StreamShape inputShape() {\n        return inputShape;\n    }\n\n    @Override\n    public <P_IN> R evaluateSequential(PipelineHelper<T> helper,\n                                       Spliterator<P_IN> spliterator) {\n        return helper.wrapAndCopyInto(makeSink(), spliterator).get();\n    }\n\n    @Override\n    public <P_IN> R evaluateParallel(PipelineHelper<T> helper,\n                                     Spliterator<P_IN> spliterator) {\n        // 这里new出了一个 ReduceTask\n        return new ReduceTask<>(this, helper, spliterator).invoke().get();\n    }\n}\n```\n\n名称上看，这是个task任务（java.util.stream.ReduceOps.ReduceTask），再看下类图：\n\n![58929987340](/images/reduceTask-类图.png)\n\n看到类图结构加上熟悉fork/join框架，大概明白了stream的并行流实现了，借助于fork/join\n\n\n\n### 二、Fork/Join 框架\n\nFork/Join框架是Java7提供了的一个用于并行执行任务的框架， 是一个把大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务结果的框架。\n\n它同ThreadPoolExecutor一样，也实现了Executor和ExecutorService接口。它使用了一个无限队列来保存需要执行的任务，而线程的数量则是通过构造函数传入，如果没有向构造函数中传入希望的线程数量，那么当前计算机可用的CPU数量会被设置为线程数量作为默认值。\n\n![img](/images/forkjoin_任务拆分.png)\n\n\n\n#### 2.1分治法\n\n`ForkJoinPool`主要用来使用分治法(Divide-and-Conquer Algorithm)来解决问题。\n\n　　典型的应用比如快速排序算法。这里的要点在于，ForkJoinPool需要使用相对少的线程来处理大量的任务。比如要对1000万个数据进行排序，那么会将这个任务分割成两个500万的排序任务和一个针对这两组500万数据的合并任务。以此类推，对于500万的数据也会做出同样的分割处理，到最后会设置一个阈值来规定当数据规模到多少时，停止这样的分割处理。比如，当元素的数量小于10时，会停止分割，转而使用插入排序对它们进行排序。那么到最后，所有的任务加起来会有大概2000000+个。问题的关键在于，对于一个任务而言，只有当它所有的子任务完成之后，它才能够被执行。\n\n　　所以当使用ThreadPoolExecutor时，使用分治法会存在问题，因为ThreadPoolExecutor中的线程无法像任务队列中再添加一个任务并且在等待该任务完成之后再继续执行。而使用ForkJoinPool时，就能够让其中的线程创建新的任务，并挂起当前的任务，此时线程就能够从队列中选择子任务执行。\n\n那么使用ThreadPoolExecutor或者ForkJoinPool，会有什么性能的差异呢？\n\n　　首先，使用ForkJoinPool能够使用数量有限的线程来完成非常多的具有父子关系的任务，比如使用4个线程来完成超过200万个任务。但是，使用ThreadPoolExecutor时，是不可能完成的，因为ThreadPoolExecutor中的Thread无法选择优先执行子任务，需要完成200万个具有父子关系的任务时，也需要200万个线程，显然这是不可行的。\n\n​\t尝试改变JDK8的工作线程数量：\n\n```java\npublic static final String DEFAULT_FORK_JOIN_PARALLELISM = \"java.util.concurrent.ForkJoinPool.common.parallelism\";\n// 设置线程数\nSystem.setProperty(DEFAULT_FORK_JOIN_PARALLELISM, (Runtime.getRuntime().availableProcessors() * 2) + \"\");\n```\n\n\n\n#### 2.2 工作窃取法\n\n　　forkjoin最核心的地方就是利用了现代硬件设备多核,在一个操作时候会有空闲的cpu,那么如何利用好这个空闲的cpu就成了提高性能的关键,而这里我们要提到的工作窃取（work-stealing）算法就是整个forkjion框架的核心理念,工作窃取（work-stealing）算法是指某个线程从其他队列里窃取任务来执行。\n\n　　那么为什么需要使用工作窃取算法呢？\n\n　　假如我们需要做一个比较大的任务，我们可以把这个任务分割为若干互不依赖的子任务，为了减少线程间的竞争，于是把这些子任务分别放到不同的队列里，并为每个队列创建一个单独的线程来执行队列里的任务，线程和队列一一对应，比如A线程负责处理A队列里的任务。但是有的线程会先把自己队列里的任务干完，而其他线程对应的队列里还有任务等待处理。干完活的线程与其等着，不如去帮其他线程干活，于是它就去其他线程的队列里窃取一个任务来执行。而在这时它们会访问同一个队列，所以为了减少窃取任务线程和被窃取任务线程之间的竞争，通常会使用双端队列，被窃取任务线程永远从双端队列的头部拿任务执行，而窃取任务的线程永远从双端队列的尾部拿任务执行。\n\n　　工作窃取的运行流程图如下：\n\n![img](/images/forkjoin_工作窃取（双端队列）.png)\n\n　　工作窃取算法的优点：充分利用线程进行并行计算，并减少了线程间的竞争；\n\n　　工作窃取算法的缺点：在某些情况下还是存在竞争，比如双端队列里只有一个任务时。并且消耗了更多的系统资源，比如创建多个线程和多个双端队列。\n\n\n\n#### 2.3 Fork/Join 涉及到的关键名称\n\n　　`ForkJoinPool`： 用来执行Task，或生成新的ForkJoinWorkerThread，执行 ForkJoinWorkerThread 间的 work-stealing 逻辑。ForkJoinPool 不是为了替代 ExecutorService，而是它的补充，在某些应用场景下性能比 ExecutorService 更好。\n\n　　`ForkJoinTask`： 执行具体的分支逻辑，声明以同步/异步方式进行执行\n\n　　`ForkJoinWorkerThread`： 是 ForkJoinPool 内的 worker thread，执行\n\n　　`ForkJoinTask`, 内部有 ForkJoinPool.WorkQueue来保存要执行的ForkJoinTask。\n\n　　`ForkJoinPool.WorkQueue`：保存要执行的ForkJoinTask。\n\n\n\n#### 2.4 Fork/Join框架的实现原理\n\n在Java的Fork/Join框架中，它提供了两个类来帮助我们完成任务分割以及执行任务并合并结果：\n\n　　1、`ForkJoinTask`：我们要使用ForkJoin框架，必须首先创建一个ForkJoin任务。它提供在任务中执行fork()和join()操作的机制，通常情况下我们不需要直接继承ForkJoinTask类，而只需要继承它的子类，Fork/Join框架提供了以下两个子类：\n\n　　　　`RecursiveAction`：用于没有返回结果的任务。\n　　　　`RecursiveTask` ：用于有返回结果的任务。\n\n　　2、`ForkJoinPool` ：ForkJoinTask需要通过ForkJoinPool来执行，任务分割出的子任务会添加到当前工作线程所维护的双端队列中，进入队列的头部。当一个工作线程的队列里暂时没有任务时，它会随机从其他工作线程的队列的尾部获取一个任务。\n\n　　`ForkJoinPool`由`ForkJoinTask`数组和`ForkJoinWorkerThread`数组组成，`ForkJoinTask`数组负责将存放程序提交给`ForkJoinPool`，而`ForkJoinWorkerThread`负责执行这些任务。\n\n基本思想\n\n　　`ForkJoinPool` 的每个工作线程都维护着一个工作队列（`WorkQueue`），这是一个双端队列（`Deque`），里面存放的对象是任务（`ForkJoinTask`）。\n\n　　每个工作线程在运行中产生新的任务（通常是因为调用了 fork()）时，会放入工作队列的队尾，并且工作线程在处理自己的工作队列时，使用的是 LIFO（**后进先出**） 方式，也就是说每次从队尾取出任务来执行。\n\n　　每个工作线程在处理自己的工作队列同时，会尝试窃取一个任务（或是来自于刚刚提交到 pool 的任务，或是来自于其他工作线程的工作队列），窃取的任务位于其他线程的工作队列的队首，也就是说工作线程在窃取其他工作线程的任务时，使用的是 FIFO 方式。\n\n　　在遇到 join() 时，如果需要 join 的任务尚未完成，则会先处理其他任务，并等待其完成。\n\n　　在既没有自己的任务，也没有可以窃取的任务时，进入休眠。\n\n\n\n##### 2.4.1 ForkJoinPool属性说明、工作队列说明、控制中心说明\n\n```java\n// Instance fields\n    volatile long ctl;                   // 控制中心：非常重要，看下图解析\n    volatile int runState;               // 负数是shutdown，其余都是2的次方\n    final int config;                    // 配置：二进制的低16位代表 并行度（parallelism），\n                                                                                    //高16位：mode可选FIFO_QUEUE（1 << 16）和LIFO_QUEUE（1 << 31），默认是LIFO_QUEUE\n    int indexSeed;                       // 生成worker的queue索引\n    volatile WorkQueue[] workQueues;     // main registry\n    final ForkJoinWorkerThreadFactory factory;\n    final UncaughtExceptionHandler ueh;  // per-worker UEH\n    final String workerNamePrefix;       // to create worker name string\n    volatile AtomicLong stealCounter;    // also used as sync monitor\n```\n\n\n\n###### 2.4.1.1 工作队列workQueues\n\n用于保存向ForkJoinPool提交的任务，而具体的执行由ForkJoinWorkerThread执行，而ForkJoinWorkerThreadFactory可以用于生产出ForkJoinWorkerThread：\n\n```java\npublic static interface ForkJoinWorkerThreadFactory {\n    /**\n        * Returns a new worker thread operating in the given pool.\n        *\n        * @param pool the pool this thread works in\n        * @return the new worker thread\n        * @throws NullPointerException if the pool is null\n        */\n    public ForkJoinWorkerThread newThread(ForkJoinPool pool);\n}\n```\n\n![img](/images/292888-20190913110608100-591376294.png)\n\n```java\n// Instance fields\nvolatile int scanState;    // 负数：inactive, 非负数：active, 其中奇数代表scanning\nint stackPred;             // sp = (int)ctl, 前一个队列栈的标示信息，包含版本号、是否激活、以及队列索引\nint nsteals;               // 窃取的任务数\nint hint;                  // 一个随机数，用来帮助任务窃取，在 helpXXXX()的方法中会用到\nint config;                // 配置：二进制的低16位代表 在 queue[] 中的索引，\n// 高16位：mode可选FIFO_QUEUE（1 << 16）和LIFO_QUEUE（1 << 31），默认是LIFO_QUEUE\nvolatile int qlock;        // 锁定标示位：1: locked, < 0: terminate; else 0\nvolatile int base;         // index of next slot for poll\nint top;                   // index of next slot for push\nForkJoinTask<?>[] array;   // 任务列表\n```\n\n###### 2.4.1.2 控制中心ctl\n\n![img](/images/292888-20190913111130827-1005682912.png)\n\n###### 2.4.1.3 方法说明\n\n队列与关键任务调用说明\n\n![img](/images/292888-20190913110836624-260052587.png)\n\n\n\n2.4.1.4 externalPush || externalSubmit\n\n```java\nfinal void externalPush(ForkJoinTask<?> task) {\n        WorkQueue[] ws; WorkQueue q; int m;\n        //我们以前常用的Random，在并发下，多个线程同时计算种子需要用到同一个原子变量。\n        //由于更新操作使用CAS，同时执行只有一个线程成功，其他线程的大量自旋造成性能损失，ThreadLocalRandom继承Random，对此进行了改进。\n                //ThreadLocalRandom运用了ThreadLocal，每个线程内部维护一个种子变量，多线程下计算新种子时使用线程自己的种子变量进行更新，避免了竞争。\n        int r = ThreadLocalRandom.getProbe();\n        int rs = runState;\n        // 外部提交的task，肯定会到偶数位下标的队列上\n        // SQMASK = 0x007e = 1111110，任何数和 SQMASK 进行 & 运算 都会是偶数\n        if ((ws = workQueues) != null && (m = (ws.length - 1)) >= 0 &&\n            (q = ws[m & r & SQMASK]) != null && r != 0 && rs > 0 &&\n            //队列上锁\n            U.compareAndSwapInt(q, QLOCK, 0, 1)) {\n            ForkJoinTask<?>[] a; int am, n, s;\n            if ((a = q.array) != null &&\n                (am = a.length - 1) > (n = (s = q.top) - q.base)) {\n                int j = ((am & s) << ASHIFT) + ABASE;\n                //把 task 放到队列的 top端\n                U.putOrderedObject(a, j, task);\n                U.putOrderedInt(q, QTOP, s + 1);\n                U.putIntVolatile(q, QLOCK, 0);\n                if (n <= 1)\n                    signalWork(ws, q);\n                return;\n            }\n            //队列解锁\n            U.compareAndSwapInt(q, QLOCK, 1, 0);\n        }\n        externalSubmit(task);\n    } \n```\n\n###### 2.4.1.5 registerWorker\n\n```java\nfinal WorkQueue registerWorker(ForkJoinWorkerThread wt) {\n        //......\n            if ((ws = workQueues) != null && (n = ws.length) > 0) {\n                int s = indexSeed += SEED_INCREMENT;  // unlikely to collide\n                int m = n - 1;\n                // worker的queue肯定放在pool中的queue[]中的奇数下标\n                  // m = ws.lenght - 1, ws.lenght 肯定是偶数，则m 肯定是奇数\n                // 1的二进制位：00000001, 所以任何数 \"|\" 1 都是奇数\n                // 所以 奇数 & 奇数 ， 1&1 = 1，所以i肯定是奇数\n                i = ((s << 1) | 1) & m;               // odd-numbered indices\n                if (ws[i] != null) {                  // collision\n                    int probes = 0;                   // step by approx half n\n                    int step = (n <= 4) ? 2 : ((n >>> 1) & EVENMASK) + 2;\n                    // 如果下标已经有队列，则重新生成奇数下标\n                    // step肯定为偶数：EVENMASK：0xfffe：1111111111111110\n                      // 所以 奇数+偶数，奇偶性不变\n                    while (ws[i = (i + step) & m] != null) {\n                        if (++probes >= n) {\n                            workQueues = ws = Arrays.copyOf(ws, n <<= 1);\n                            m = n - 1;\n                            probes = 0;\n                        }\n                    }\n                }\n                //...\n            }\n        //......\n    }\n```\n\n\n\n###### 2.4.1.6 scan\n\n```java\nprivate ForkJoinTask<?> scan(WorkQueue w, int r) {\n        WorkQueue[] ws; int m;\n        if ((ws = workQueues) != null && (m = ws.length - 1) > 0 && w != null) {\n            int ss = w.scanState;                     // initially non-negative\n               // k = r & m 。 r是一个随机数，m 是 队列数组长度 - 1；用于定位去哪个 队列 窃取 task\n            for (int origin = r & m, k = origin, oldSum = 0, checkSum = 0;;) {\n                WorkQueue q; ForkJoinTask<?>[] a; ForkJoinTask<?> t;\n                int b, n; long c;\n                if ((q = ws[k]) != null) {\n                      // 如果有还没执行的task，尝试窃取队列q 中的base下标的 task。 即FIFO\n                    // i: 在内存中，b下标对应的对象的偏移值。 a.length - 1 的二进制位 永远是 0[1...]s，所以 (a.length - 1) & b = b，主要是保证了b不会越界\n                    if ((n = (b = q.base) - q.top) < 0 &&\n                        (a = q.array) != null) {      // non-empty\n                        long i = (((a.length - 1) & b) << ASHIFT) + ABASE;\n                        if ((t = ((ForkJoinTask<?>)\n                                  U.getObjectVolatile(a, i))) != null &&\n                            q.base == b) {\n                               // ss 是小偷的 scanState，大于0代表当前的worker是激活的\n                            if (ss >= 0) {\n                                  // 把 task 从 队列中取出来，然后队列的base+1，如果被窃取的队列中有多于1个的task，则尝试唤醒其他的worker\n                                if (U.compareAndSwapObject(a, i, t, null)) {\n                                    q.base = b + 1;\n                                    if (n < -1)       // signal others\n                                        signalWork(ws, q);\n                                    return t;\n                                }\n                            }\n                              // ss小于0代表当前的worker是未激活的，并且当前是第一次扫描，这时候尝试激活worker\n                            // oldSum: 上一次遍历周期的 base 值的和。\n                            // (int) c : 可以拿到当前栈顶的空闲worker。sp = (int) c\n                            else if (oldSum == 0 &&   // try to activate\n                                     w.scanState < 0)\n                                tryRelease(c = ctl, ws[m & (int)c], AC_UNIT);\n                        }\n                        if (ss < 0)                   // refresh\n                            ss = w.scanState;\n                        // 更新随机值，重新初始化所有控制变量，重新定位队列\n                        r ^= r << 1; r ^= r >>> 3; r ^= r << 10;\n                        origin = k = r & m;           // move and rescan\n                        oldSum = checkSum = 0;\n                        continue;\n                    }\n                    checkSum += b;\n                }\n                // 每次没有窃取到task的时候，都会k+1（k值不会超过m），当k遍历了一圈还没有steal到任务，则当前小偷worker是过剩的，则inactive这个小偷worker\n                if ((k = (k + 1) & m) == origin) {    // continue until stable\n                      // oldSum == (oldSum = checkSum) 实际上就是 oldSum == checkSum ， oldSum = checkSum\n                    // oldSum == checkSum 是判断 这个周期和上个周期 的base和是否一直，如果一直， 说明base可能没有变过\n                    if ((ss >= 0 || (ss == (ss = w.scanState))) &&\n                        oldSum == (oldSum = checkSum)) {\n                        if (ss < 0 || w.qlock < 0)    // already inactive\n                            break;\n                        int ns = ss | INACTIVE;       // try to inactivate\n                        long nc = ((SP_MASK & ns) |\n                                   (UC_MASK & ((c = ctl) - AC_UNIT)));\n                        // 维护 队列的 stack，可以指向前一个栈顶的队列\n                        w.stackPred = (int)c;         // hold prev stack top\n                        U.putInt(w, QSCANSTATE, ns);\n                        if (U.compareAndSwapLong(this, CTL, c, nc))\n                            ss = ns;\n                        else\n                            w.scanState = ss;         // back out\n                    }\n                    checkSum = 0;\n                }\n            }\n        }\n        return null;\n    }\n```\n\n###### 2.4.1.7 signalWork\n\n```java\nfinal void signalWork(WorkQueue[] ws, WorkQueue q) {\n        long c; int sp, i; WorkQueue v; Thread p;\n        // AC是负数，所以 active worker不足\n        while ((c = ctl) < 0L) {                       // too few active\n            // sp:第一位是0，没有版本号，没有inactive的worker\n            if ((sp = (int)c) == 0) {                  // no idle workers\n                //tc: tc不为0，就是代表 total worker - parallelism < 0, 所以需要添加worker\n                if ((c & ADD_WORKER) != 0L)            // too few workers\n                    tryAddWorker(c);\n                break;\n            }\n            if (ws == null)                            // unstarted/terminated\n                break;\n            // 取栈顶的worker，如果下标已经越界或queue为null，线程池都是终止了\n            if (ws.length <= (i = sp & SMASK))         // terminated\n                break;\n            if ((v = ws[i]) == null)                   // terminating\n                break;\n            // 新的scanState，版本+1，设置状态为激活，INACTIVE = 1 << 31，~INACTIVE = 01111111....\n            int vs = (sp + SS_SEQ) & ~INACTIVE;        // next scanState\n            // 确认 worker的 sp没有变化\n            int d = sp - v.scanState;                  // screen CAS\n            // 生成新的 ctl，(UC_MASK & (c + AC_UNIT))设置 高32位， (SP_MASK & v.stackPred)设置低32位\n            long nc = (UC_MASK & (c + AC_UNIT)) | (SP_MASK & v.stackPred);\n            if (d == 0 && U.compareAndSwapLong(this, CTL, c, nc)) {\n                //激活worker\n                v.scanState = vs;                      // activate v\n                if ((p = v.parker) != null)\n                    U.unpark(p);\n                break;\n            }\n            //当前queue没有task 需要执行了，则停止signal\n            if (q != null && q.base == q.top)          // no more work\n                break;\n        }\n    }\n```\n\n###### 2.4.1.8 ForkJoinTask的fork方法实现原理\n\n当我们调用ForkJoinTask的fork方法时，程序会把任务放在ForkJoinWorkerThread的pushTask的workQueue中，异步地执行这个任务，然后立即返回结果，代码如下：\n\n```java\npublic final ForkJoinTask<V> fork() {\n    Thread t;\n    if ((t = Thread.currentThread()) instanceof ForkJoinWorkerThread)\n        ((ForkJoinWorkerThread)t).workQueue.push(this);\n    else\n        ForkJoinPool.common.externalPush(this);\n    return this;\n}\n```\n\n若当前线程是ForkJoinWorkerThread线程，则强制类型转换（向下转换）成ForkJoinWorkerThread，然后将任务push到这个线程负责的队列里面去，在ForkJoinWorkerThread类中有一个pool和一个workQueue字段：\n\n```java\n// 线程工作的ForkJoinPool\nfinal ForkJoinPool pool;                // the pool this thread works in\n// 工作窃取队列\nfinal ForkJoinPool.WorkQueue workQueue; // work-stealing mechanics\n```\n\npushTask方法把当前任务存放在ForkJoinTask数组队列里。然后再调用ForkJoinPool的signalWork()方法唤醒或创建一个工作线程来执行任务。代码如下：\n\n```java\nfinal void push(ForkJoinTask<?> task) {\n    ForkJoinTask<?>[] a; ForkJoinPool p;\n    int b = base, s = top, n;\n    if ((a = array) != null) {    // ignore if queue removed\n        int m = a.length - 1;     // fenced write for task visibility\n        U.putOrderedObject(a, ((m & s) << ASHIFT) + ABASE, task);\n        U.putOrderedInt(this, QTOP, s + 1);\n        if ((n = s - b) <= 1) {\n            if ((p = pool) != null)\n                p.signalWork(p.workQueues, this);\n        }\n        else if (n >= m)\n            growArray();\n    }\n}\n```\n\n该方法的主要功能就是将当前任务存放在ForkJoinTask数组array里。然后再调用ForkJoinPool的signalWork()方法唤醒或创建一个工作线程来执行任务。\n\n###### 2.4.1.9 ForkJoinTask的join方法实现原理\n\n```java\npublic final V join() {\n    int s;\n    if ((s = doJoin() & DONE_MASK) != NORMAL)\n        reportException(s);\n    return getRawResult();\n}\n```\n\n　　首先，它调用了doJoin()方法，通过doJoin()方法得到当前任务的状态来判断返回什么结果，任务状态有四种：已完成（NORMAL），被取消（CANCELLED），信号（SIGNAL）和出现异常（EXCEPTIONAL）：　　\n\n　　若状态不是NORMAL，则通过reportException(int)方法来处理状态：\n\n```java\nprivate void reportException(int s) {\n    if (s == CANCELLED)\n        throw new CancellationException();\n    if (s == EXCEPTIONAL)\n        rethrow(getThrowableException());\n}\n```\n\n\n\n- 如果任务状态是已完成，则直接返回任务结果。\n- 如果任务状态是被取消，则直接抛出CancellationException。\n- 如果任务状态是抛出异常，则直接抛出对应的异常。\n\n　　doJoin()方法的实现代码：\n\n```java\nprivate int doJoin() {\n    int s; Thread t; ForkJoinWorkerThread wt; ForkJoinPool.WorkQueue w;\n    return (s = status) < 0 ? s :\n        ((t = Thread.currentThread()) instanceof ForkJoinWorkerThread) ?\n        (w = (wt = (ForkJoinWorkerThread)t).workQueue).\n        tryUnpush(this) && (s = doExec()) < 0 ? s :\n        wt.pool.awaitJoin(w, this, 0L) :\n        externalAwaitDone();\n}\n```\n\n\n\n　　在doJoin()方法里，首先通过查看任务的状态，看任务是否已经执行完了，如果执行完了，则直接返回任务状态，如果没有执行完，则从任务数组里取出任务并执行。如果任务顺利执行完成了，则设置任务状态为NORMAL，如果出现异常，则纪录异常，并将任务状态设置为EXCEPTIONAL。\n\n　　执行任务是通过doExec()方法来完成的：\n\n```java\nfinal int doExec() {\n    int s; boolean completed;\n    if ((s = status) >= 0) {\n        try {\n            completed = exec();\n        } catch (Throwable rex) {\n            return setExceptionalCompletion(rex);\n        }\n        if (completed)\n            s = setCompletion(NORMAL);\n    }\n    return s;\n}\n```\n\n真正的执行过程是由exec()方法来完成的：\n\n```java\nprotected abstract boolean exec();\n```\n\n这就是我们需要重写的方法，若是我们的任务继承自RecursiveAction，则我们需要重写RecursiveAction的compute()方法：\n\n```java\npublic abstract class RecursiveAction extends ForkJoinTask<Void> {\n    private static final long serialVersionUID = 5232453952276485070L;\n \n    /**\n     * The main computation performed by this task.\n     */\n    protected abstract void compute();\n \n    /**\n     * Always returns {@code null}.\n     *\n     * @return {@code null} always\n     */\n    public final Void getRawResult() { return null; }\n \n    /**\n     * Requires null completion value.\n     */\n    protected final void setRawResult(Void mustBeNull) { }\n \n    /**\n     * Implements execution conventions for RecursiveActions.\n     */\n    protected final boolean exec() {\n        compute();\n        return true;\n    }\n}\n```\n\n若是我们的任务继承自RecursiveTask，则我们同样需要重写RecursiveTask的compute()方法：\n\n```java\npublic abstract class RecursiveTask<V> extends ForkJoinTask<V> {\n    private static final long serialVersionUID = 5232453952276485270L;\n \n    /**\n     * The result of the computation.\n     */\n    V result;\n \n    /**\n     * The main computation performed by this task.\n     * @return the result of the computation\n     */\n    protected abstract V compute();\n \n    public final V getRawResult() {\n        return result;\n    }\n \n    protected final void setRawResult(V value) {\n        result = value;\n    }\n \n    /**\n     * Implements execution conventions for RecursiveTask.\n     */\n    protected final boolean exec() {\n        result = compute();\n        return true;\n    }\n}\n```\n\n通过上面的分析可知，执行我们的业务代码是在调用了join()之后的，也就是说，fork仅仅是分割任务，只有当我们执行join的时候，我们的任务才会被执行。\n\n##### 2.4.2 异常处理\n\nForkJoinTask在执行的时候可能会抛出异常，但是我们没办法在主线程里直接捕获异常，所以ForkJoinTask提供了isCompletedAbnormally()方法来检查任务是否已经抛出异常或已经被取消了，并且可以通过ForkJoinTask的getException方法获取异常。使用如下代码：\n\n```java\nif(task.isCompletedAbnormally()){\n    System.out.println(task.getException());\n}\n```\n\ngetException方法返回Throwable对象，如果任务被取消了则返回CancellationException。如果任务没有完成或者没有抛出异常则返回null。\n\n```java\npublic final Throwable getException() {\n        int s = status & DONE_MASK;\n        return ((s >= NORMAL)    ? null :\n                (s == CANCELLED) ? new CancellationException() :\n                getThrowableException());\n}\n```\n\n\n\n##### 2.4.2forkjoin 的使用\n\n　ForkJoinPool 使用submit 或 invoke 提交的区别：invoke是同步执行，调用之后需要等待任务完成，才能执行后面的代码；submit是异步执行，只有在Future调用get的时候会阻塞。\n\n　　这里继承的是RecursiveTask 适用于有返回值的场景；还可以继承RecursiveAction，适合于没有返回值的场景\n\n　　执行子任务调用fork方法并不是最佳的选择，最佳的选择是invokeAll方法。\n\n##### 2.4.3 示例代码\n\n   这个示例是在做某支付任务异步解耦后的业务逻辑校验，这个是一个接收返回的任务 `RecursiveTask`：\n\n```java\nclass CheckTask extends RecursiveTask<Integer> {\n\t\t/**\n\t\t*  这个是阈值，具体任务列表拆分到什么程度再开始执行\n\t\t**/\n        private int threshold = 10;\n\n    \t/**\n    \t*\t这个是当前处理的集合列表\n    \t**/\n        private List<CbVaPaymentFileContent> list;\n\n        /**\n        * 初始化任务对象\n        **/\n        private CheckTask(int threshold, List<CbVaPaymentFileContent> list) {\n            if (null == list) throw new IllegalArgumentException(\"[list] is null.\");\n            this.threshold = threshold <= 0 ? this.threshold : threshold;\n//            this.threshold = list.size() / Runtime.getRuntime().availableProcessors();\n            this.list = list;\n        }\n\n        @Override\n        protected Integer compute() {\n            if (list.size() <= threshold) {\n                // 处理\n                int count = 0;\n                for (CbVaPaymentFileContent content : list) {\n                    count += process(content);\n                }\n                return count;\n            } else {\n                // 分解\n                int middle = list.size() / 2;\n                List<CbVaPaymentFileContent> leftList = list.subList(0, middle);\n                List<CbVaPaymentFileContent> rightList = list.subList(middle, list.size());\n                CheckTask left = new CheckTask(threshold, leftList);\n                CheckTask right = new CheckTask(threshold, rightList);\n                // left.fork();\n                // right.fork();\n                \n                // 这两个方法，使用invokeAll方法的主要原因是为了充分利用线程池，在invokeAll的N个任务中，其中N-1个任务会使用fork()交给其它线程执行，但是，它还会留一个任务自己执行，这样，就充分利用了线程池，保证没有空闲的不干活的线程。\n                invokeAll(left, right);\n\n                // 结合\n                return left.join() + right.join();\n            }\n        }\n\n    }\n```\n\n　　该代码就是通过Fork/Join框架来计算数组的和，计算耗时4031毫秒。通过该代码作为应用示例主要是为了告诉大家，使用Fork/Join模型的正确方式，在源代码中可以看到，SumTask继承自RecursiveTask，重写的compute方法为：\n\n　　compute()方法使用了invokeAll方法来分解任务，而不是它下面的subtask1.fork();\n\n　　这两个方法，使用invokeAll方法的主要原因是为了充分利用线程池，在invokeAll的N个任务中，其中N-1个任务会使用fork()交给其它线程执行，但是，它还会留一个任务自己执行，这样，就充分利用了线程池，保证没有空闲的不干活的线程。\n\n　　若是采用另外一种方式来运行，程序的运行时间为6028毫秒，可以看到，明显比invokeAll方式慢了很多。\n\n##### 2.4.3 JDK8中的最佳实践\n\n##### 2.4.3.1 通过forkjoin来看parallelStream\n\n在Java 8引入了自动并行化的概念。它能够让一部分Java代码自动地以并行的方式执行，即使用了ForkJoinPool的ParallelStream。　　\n\n　　Java 8为ForkJoinPool添加了一个通用线程池，这个线程池用来处理那些没有被显式提交到任何线程池的任务。它是ForkJoinPool类型上的一个静态元素，它拥有的默认线程数量等于运行计算机上的处理器数量。当调用Arrays类上添加的新方法时，自动并行化就会发生。比如用来排序一个数组的并行快速排序，用来对一个数组中的元素进行并行遍历。自动并行化也被运用在Java 8新添加的Stream API中。\n\n　　一般ForkJoinPool中的通用线程池处理，也可以使用ThreadPoolExecutor完成，但是就代码的可读性和代码量而言，使用ForkJoinPool明显更胜一筹。\n\n##### 2.4.3.2 线程池数量\n\n​\t**1、系统CPU数量：[如机器8核，即8]**\n\n```\nRuntime.getRuntime().availableProcessors()\n```\n\n　　**2、parallelStream默认的并发线程数:【parallelStream核心使用ForkJoinPool实现，故如下】【输出是7个】**\n\n```\nForkJoinPool.getCommonPoolParallelism()\n```\n\n　　**3、为什么parallelStream默认的并发线程数要比CPU处理器的数量少1个？**\n\n　　　　因为最优的策略是每个CPU处理器分配一个线程，然而主线程也算一个线程，所以要占一个名额。如果只有1个CPU，默认的并发线程数就是1\n\n　　**4、修改默认并发数**\n\n　　　　默认的并发线程数不可以反复修改。因为`java.util.concurrent.ForkJoinPool.common.parallelism`是`final`类型的，整个JVM中只允许设置一次。多次修改以第一次为主\n\n　　　　1、系统property\n\n```\n        System.setProperty(\"java.util.concurrent.ForkJoinPool.common.parallelism\", \"20\");\n        System.out.println(ForkJoinPool.getCommonPoolParallelism());\n```\n\n　　　　2、当然上述参数也可以通过jvm设置系统属性：-Djava.util.concurrent.ForkJoinPool.common.parallelism=N （N为线程数量）　　\n\n　　**5、既然默认的并发线程数不能反复修改，进行不同线程数量的并发测试，可以引入`ForkJoinPool`。用法如下**：\n\n```\n    @Test\n    public void testSetParallelMutli() throws ExecutionException, InterruptedException {\n        int[] threadCountArr = {2, 4, 6};\n        List<Integer> para = new ArrayList<>();\n        for (int i = 0; i < 7; i++) {\n            para.add(i);\n\n        }\n        for (int threadCount : threadCountArr) {\n            new ForkJoinPool(threadCount).submit(() -> {//多线程任务\n                System.out.println(Thread.currentThread().getName());\n            }).get();\n        }\n    }\n```\n\n　　　　使用get 是为了阻塞 得到结果；如果主线程没有关闭的情况下可以不用get\n\n\n\n##### 2.4.3.2 测试示例\n\n**实际应用示例**\n\n```java\nlogger.info(\"[消息补偿任务-并行执行]开始，本次预处理总数为[{}]\", list.size());\n\n// 手动扩容下,当然这个综合考虑使用\nSystem.setProperty(DEFAULT_FORK_JOIN_PARALLELISM, (Runtime.getRuntime().availableProcessors() * appConfig.getMutiple()) + \"\");\n\n/**\n * 拆分任务到JobSender\n *  {@link Stream#reduce(Object, BiFunction, BinaryOperator)}\n *  <p>\n *      reduce.Object --> 初始值，只是为了来初始化参数类型\n *      reduce.BiFunction.apply(T t, U u) -->  t表示当前值， u表示当前操作对象\n *      reduce.BinaryOperator(T t, U u) --> t=u=初始值类型，用来合并结果的\n *  </p>\n */\nint total = list.parallelStream().filter(op -> lockAdaptor.lock(op.getId(), LockAdaptor.DEFAULT_TIMEOUT)).reduce(0, (cur, channel) -> {\n    // 构建发送器 + 并处理\n    int ava;\n    try {\n        ava = (jobSenderFactory.getSender(channel).process().dealSuccess() ? 1 : 0);\n    } finally {\n        // 解锁\n        lockAdaptor.unlock(channel.getId());\n    }\n    return cur + ava;\n}, (a, b) -> a + b);\nlogger.info(\"[消息补偿任务-并行执行]结束，本次预处理总数为[{}]， 成功总数[{}], 未成功总数[{}]\", list.size(), total, list.size() - total);\n```\n\n1、测试一、8核机器，每个任务均耗时2秒，一共16个任务\n\n```\n    @Test\n    public void testSetParallelMutli2() throws ExecutionException, InterruptedException {\n        List<Integer> para = new ArrayList<>();\n        for (int i = 0; i < 16; i++) {\n            para.add(i);\n\n        }\n        para.parallelStream().forEach(i -> {\n            try {\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(LocalDateTime.now() + \"||\" + Thread.currentThread().getName() + \":\" + i);\n        });\n    }\n```\n\n　　输出\n\n```\n2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-1:5\n2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-6:1\n2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-2:14\n2019-09-13T10:51:04.344||main:10\n2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-4:13\n2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-3:2\n2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-7:4\n2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-5:7\n2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-4:3\n2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-6:0\n2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-1:12\n2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-2:15\n2019-09-13T10:51:06.350||main:11\n2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-5:8\n2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-3:6\n2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-7:9\n```\n\n　　结论：会有7个 ForkJoinPool.commonPool-worker 线程和1个主线程main一起执行任务。并且8个一组一组执行，每个线程执行了两个任务。\n\n2、测试二、8核机器，每个任务耗时2秒内随机，一共16个任务 \n\n```\n    @Test\n    public void testSetParallelMutli2() throws ExecutionException, InterruptedException {\n        List<Integer> para = new ArrayList<>();\n        for (int i = 0; i < 16; i++) {\n            para.add(i);\n\n        }\n        para.parallelStream().forEach(i -> {\n            try {\n//                Thread.sleep(2000);\n                Thread.sleep(new Random().nextInt(2000));\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(LocalDateTime.now() + \"||\" + Thread.currentThread().getName() + \":\" + i);\n        });\n    }\n```\n\n输出\n\n```\n2019-09-13T10:54:01.486||ForkJoinPool.commonPool-worker-5:7\n2019-09-13T10:54:01.751||main:10\n2019-09-13T10:54:01.774||main:11\n2019-09-13T10:54:01.862||ForkJoinPool.commonPool-worker-5:6\n2019-09-13T10:54:02.203||ForkJoinPool.commonPool-worker-5:15\n2019-09-13T10:54:02.285||ForkJoinPool.commonPool-worker-6:1\n2019-09-13T10:54:02.407||ForkJoinPool.commonPool-worker-6:0\n2019-09-13T10:54:02.479||ForkJoinPool.commonPool-worker-1:5\n2019-09-13T10:54:02.496||ForkJoinPool.commonPool-worker-2:14\n2019-09-13T10:54:02.518||ForkJoinPool.commonPool-worker-4:13\n2019-09-13T10:54:02.732||main:9\n2019-09-13T10:54:02.740||ForkJoinPool.commonPool-worker-7:4\n2019-09-13T10:54:02.791||ForkJoinPool.commonPool-worker-3:2\n2019-09-13T10:54:03.178||ForkJoinPool.commonPool-worker-5:12\n2019-09-13T10:54:03.743||ForkJoinPool.commonPool-worker-1:8\n2019-09-13T10:54:04.003||ForkJoinPool.commonPool-worker-6:3\n```\n\n　　结论：会有7个 ForkJoinPool.commonPool-worker 线程和1个主线程main一起执行任务。并且是强占式【工作窃取法】的执行任务：如上线程5、主线程执行了各3个任务，其他有2个或一个的。\n\n3、示例三、接收消息队列消息，每次消息个数n个，每个消息是一个100个的list<String>,接收时候使用parallelStream消费并发处理\n\n发送消息\n\n```\n    @Test\n    public void testMq() throws Exception {\n        for (int j = 0; j < 1; j++) {\n            List<String> list = Lists.newArrayList();\n            for (int i = 0; i < 100; i++) {\n                list.add(j+\"___________\"+i);\n            }\n            producerMessageService.sendMessage(\"test_parallel\", UUID.randomUUID().toString(), JSON.toJSONString(list));\n            Thread.sleep(1000);\n        }\n        logger.error(\"=======================================================生产 ok\");\n\n        Thread.sleep(2000000000);\n    }\n```\n\n接收消费\n\n```\n    @Override\n    public void onMessage(List<Message> messages) throws Exception {\n        if (messages == null || messages.isEmpty()) {\n            return;\n        }\n\n        for (int i = 0; i < messages.size(); i++) {\n            Message message = messages.get(i);\n            logger.info(String.format(\"收到一条消息,消息主题（队列名）：%s,内容是：%s\", message.getTopic(), message.getText()));\n\n\n            List<String> strings = JSONArray.parseArray(message.getText(), String.class);\n            strings.parallelStream().forEach(p -> {\n                try {\n                    Thread.sleep(2000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                logger.error(LocalDateTime.now() + \"_______________\" + Thread.currentThread().getName() + \":\" + p);\n            });\n        }\n    }\n```\n\n　　说明：\n\n　　　　发送消息，1s后会发送完毕，此时如果有订阅就会出现一条消息积压。\n\n　　　　订阅消息者，订阅后会收到词条消息，此时如果正常执行完毕（不论使用不使用多线程）消息积压就没有了，因为一般消息监听会在方法正常执行完毕后，使用消息Id将此条消息从订阅队列中移除。\n\n　　　　　　接收到1条消息，里面会有一个jsonstring，反序列化为List，大小是100，交给parallelStream处理，此时会有8个线程处理【如果是8核机器】，处理速度大约是2秒8个。其余的92进入workQueue中等待处理。\n\n　　　　　　此时如果程序中断，订阅的消息不会被消费使用，下次重连时，需要做已处理消息的去重。\n\n　　　　　　此时如果有新消息发送过来，也会在积压中，不会被消息消费。\n\n 4、示例四、从a中100个数找出整除5的\n\n```\n    @Test\n    public void testExec() throws ExecutionException, InterruptedException {\n        List<Integer> a = Lists.newArrayList();\n        for (int i = 0; i < 100; i++) {\n            a.add(i);\n        }\n        List<Integer> b = Lists.newArrayList();\n        a.parallelStream().forEach(p -> {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            if (p % 5 == 0) {\n                b.add(p);\n            }\n        });\n        System.out.println(\"===========\"+b.size());\n        b.forEach(p -> System.out.print(p+\" \"));\n    }\n```\n\n输出：正确应该是20\n\n```\n===========18\n15 90 45 30 25 35 85 75 0 40 5 80 95 20 60 70 50 55 \n```\n\n \n\n对此运行结果不一致，以及会有多线程问题\n\n```\njava.lang.ArrayIndexOutOfBoundsException\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n　　……\n\nCaused by: java.lang.ArrayIndexOutOfBoundsException: 15\n    at java.util.ArrayList.add(ArrayList.java:463)\n    at com.github.bjlhx15.common.thread.juc.collection.jdk8stream.TStreamTest.lambda$testExec$6(TStreamTest.java:118)\n    at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)\n    at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)\n    at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)\n    at java.util.stream.ForEachOps$ForEachTask.compute(ForEachOps.java:291)\n```\n\n \n\n原因：parallelStream 并行执行，多线程异步，可能没有b添加完毕就遍历，ArrayList不是线程安全的\n\n修正：\n\n　　方案一、在遍历前，需全部执行完毕【串行】\n\n　　　　将 parallelStream 改为 stream串行处理【不可取，处理速度慢】\n\n　　方案二、在遍历前，需全部执行完毕\n\n　　　　继承 RecursiveTask或者RecursiveAction写任务　　　　\n\n　　方案三、将ArrayList替换安全集合CopyOnWriteArrayLIst\n\n```\n        List<Integer> b = Lists.newCopyOnWriteArrayList();\n```\n\n　　　　此时运行就会出现正确结果。按理说应该会有结果不准确问题吧。但是没有，个人理解，因为是每次8个同时执行，所以即使最后一次主线程提前结束，也有其他线程在锁着b，所以最后执行b的操作会有等待","source":"_posts/java/thread-forkJoin.md","raw":"---\ntitle: JDK8 parallelStream 与 fork/join 框架\ndate: 2020-05-13 01:09:49\ntags:\n    - java\n    - thread\n    - synchronized/lock\n    - ThreadPoolExecutor\n    - fork/join\n    - schedule\ncategories:\n    - java\n    - thread\n    - fork/join\n---\n\n## JDK1.8 parallelStream 与 fork/join 框架\n\n### 一、JDK8开启并行串行流\n\ntream是java8中新增加的一个特性,被java猿统称为流.\n\n　　Stream 不是集合元素，它不是数据结构并不保存数据，它是有关算法和计算的，它更像一个高级版本的 Iterator。原始版本的 Iterator，用户只能显式地一个一个遍历元素并对其执行某些操作；高级版本的 Stream，用户只要给出需要对其包含的元素执行什么操作，比如 “过滤掉长度大于 10 的字符串”、“获取每个字符串的首字母”等，Stream 会隐式地在内部进行遍历，做出相应的数据转换。\n\n　　Stream 就如同一个迭代器（Iterator），单向，不可往复，数据只能遍历一次，遍历过一次后即用尽了，就好比流水从面前流过，一去不复返。\n\n　　而和迭代器又不同的是，Stream 可以并行化操作，迭代器只能命令式地、串行化操作。顾名思义，当使用串行方式去遍历时，每个 item 读完后再读下一个 item。而使用并行去遍历时，数据会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出。Stream 的并行操作依赖于 Java7 中引入的 Fork/Join 框架（JSR166y）来拆分任务和加速处理过程。Java 的并行 API 演变历程基本如下：\n\n```java\n1.0-1.4 中的 java.lang.Thread  \n5.0 中的 java.util.concurrent  \n6.0 中的 Phasers 等  \n7.0 中的 Fork/Join 框架  \n8.0 中的 Lambda\n```\n\nStream 的另外一大特点是，数据源本身可以是无限的。\n\n#### 1.1 什么是parallelStream\n\nparallelStream其实就是一个并行执行的流.它通过默认的ForkJoinPool,可能提高你的多线程任务的速度.实际是多线程，注意线程安全问题\n\n　　在从stream和parallelStream方法中进行选择时,我们可以考虑以下几个问题：\n\n```\n　　1. 是否需要并行？  \n　　2. 任务之间是否是独立的？是否会引起任何竞态条件？  \n　　3. 结果是否取决于任务的调用顺序？  \n```\n\n　　对于问题1，需要弄清楚要解决的问题是什么，数据量有多大，计算的特点是什么？并不是所有的问题都适合使用并发程序来求解，比如当数据量不大时，顺序执行往往比并行执行更快。毕竟，准备线程池和其它相关资源也是需要时间的。但是，当任务涉及到I/O操作并且任务之间不互相依赖时，那么并行化就是一个不错的选择。通常而言，将这类程序并行化之后，执行速度会提升好几个等级。\n\n　　对于问题2，如果任务之间是独立的，并且代码中不涉及到对同一个对象的某个状态或者某个变量的更新操作，那么就表明代码是可以被并行化的。\n\n　　对于问题3，由于在并行环境中任务的执行顺序是不确定的，因此对于依赖于顺序的任务而言，并行化也许不能给出正确的结果。　　\n\n　　场景：默认值适用的场景是CPU密集型的，而一般的Web项目是IO密集型的（一般的Web项目都是需要跟数据库打交道的，针对数据库的操作主要就都是IO，而对CPU的消耗并不高）。\n\n　　当不能使用默认值的时候，需要开发人员额外去了解parallelStream的用法，如下：\n\n#### 1.2 parallelStream作用\n\nStream具有平行处理能力，处理的过程会分而治之，也就是将一个大任务切分成多个小任务，这表示每个任务都是一个操作，因此像以下的程式片段：\n\n```\nList<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);\nnumbers.parallelStream()\n       .forEach(out::println);  \n```\n\n　　得到的展示顺序不一定会是1、2、3、4、5、6、7、8、9，而可能是任意的顺序，就forEach()这个操作來讲，如果平行处理时，希望最后顺序是按照原来Stream的数据顺序，那可以调用forEachOrdered()。例如：\n\n```\nList<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);\nnumbers.parallelStream()\n       .forEachOrdered(out::println); \n```\n\n　　注意:如果forEachOrdered()中间有其他如filter()的中介操作，会试着平行化处理，然后最终forEachOrdered()会以原数据顺序处理，因此，使用forEachOrdered()这类的有序处理,可能会（或完全失去）失去平行化的一些优势，实际上中介操作亦有可能如此，例如sorted()方法。\n\n#### 1.3 开启串行流和并行流：\t\t\n\n```java\n    @Test\n    public void testStream() {\n        List<Integer> list = getList();\n\n        // 串行流\n        list.stream();\n        list.stream().sequential();\n\n        // 并行流\n        list.stream().parallel();\n        list.parallelStream().reduce(null);\n\n        // 串行流执行\n        list.stream().reduce((first, second) -> first+second);/\n\n        // 并行流执行\n        list.parallelStream().reduce((first, second) -> first+second);\n    }\n```\n\n#### 1.2 流处理\n\n因为比较关心并行流的实现，所以看并行流的代码：\n\njava.util.stream.ReduceOps.ReduceOp\n\n```java\nprivate static abstract class ReduceOp<T, R, S extends AccumulatingSink<T, R, S>>\n        implements TerminalOp<T, R> {\n    private final StreamShape inputShape;\n\n    /**\n     * Create a {@code ReduceOp} of the specified stream shape which uses\n     * the specified {@code Supplier} to create accumulating sinks.\n     *\n     * @param shape The shape of the stream pipeline\n     */\n    ReduceOp(StreamShape shape) {\n        inputShape = shape;\n    }\n\n    public abstract S makeSink();\n\n    @Override\n    public StreamShape inputShape() {\n        return inputShape;\n    }\n\n    @Override\n    public <P_IN> R evaluateSequential(PipelineHelper<T> helper,\n                                       Spliterator<P_IN> spliterator) {\n        return helper.wrapAndCopyInto(makeSink(), spliterator).get();\n    }\n\n    @Override\n    public <P_IN> R evaluateParallel(PipelineHelper<T> helper,\n                                     Spliterator<P_IN> spliterator) {\n        // 这里new出了一个 ReduceTask\n        return new ReduceTask<>(this, helper, spliterator).invoke().get();\n    }\n}\n```\n\n名称上看，这是个task任务（java.util.stream.ReduceOps.ReduceTask），再看下类图：\n\n![58929987340](/images/reduceTask-类图.png)\n\n看到类图结构加上熟悉fork/join框架，大概明白了stream的并行流实现了，借助于fork/join\n\n\n\n### 二、Fork/Join 框架\n\nFork/Join框架是Java7提供了的一个用于并行执行任务的框架， 是一个把大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务结果的框架。\n\n它同ThreadPoolExecutor一样，也实现了Executor和ExecutorService接口。它使用了一个无限队列来保存需要执行的任务，而线程的数量则是通过构造函数传入，如果没有向构造函数中传入希望的线程数量，那么当前计算机可用的CPU数量会被设置为线程数量作为默认值。\n\n![img](/images/forkjoin_任务拆分.png)\n\n\n\n#### 2.1分治法\n\n`ForkJoinPool`主要用来使用分治法(Divide-and-Conquer Algorithm)来解决问题。\n\n　　典型的应用比如快速排序算法。这里的要点在于，ForkJoinPool需要使用相对少的线程来处理大量的任务。比如要对1000万个数据进行排序，那么会将这个任务分割成两个500万的排序任务和一个针对这两组500万数据的合并任务。以此类推，对于500万的数据也会做出同样的分割处理，到最后会设置一个阈值来规定当数据规模到多少时，停止这样的分割处理。比如，当元素的数量小于10时，会停止分割，转而使用插入排序对它们进行排序。那么到最后，所有的任务加起来会有大概2000000+个。问题的关键在于，对于一个任务而言，只有当它所有的子任务完成之后，它才能够被执行。\n\n　　所以当使用ThreadPoolExecutor时，使用分治法会存在问题，因为ThreadPoolExecutor中的线程无法像任务队列中再添加一个任务并且在等待该任务完成之后再继续执行。而使用ForkJoinPool时，就能够让其中的线程创建新的任务，并挂起当前的任务，此时线程就能够从队列中选择子任务执行。\n\n那么使用ThreadPoolExecutor或者ForkJoinPool，会有什么性能的差异呢？\n\n　　首先，使用ForkJoinPool能够使用数量有限的线程来完成非常多的具有父子关系的任务，比如使用4个线程来完成超过200万个任务。但是，使用ThreadPoolExecutor时，是不可能完成的，因为ThreadPoolExecutor中的Thread无法选择优先执行子任务，需要完成200万个具有父子关系的任务时，也需要200万个线程，显然这是不可行的。\n\n​\t尝试改变JDK8的工作线程数量：\n\n```java\npublic static final String DEFAULT_FORK_JOIN_PARALLELISM = \"java.util.concurrent.ForkJoinPool.common.parallelism\";\n// 设置线程数\nSystem.setProperty(DEFAULT_FORK_JOIN_PARALLELISM, (Runtime.getRuntime().availableProcessors() * 2) + \"\");\n```\n\n\n\n#### 2.2 工作窃取法\n\n　　forkjoin最核心的地方就是利用了现代硬件设备多核,在一个操作时候会有空闲的cpu,那么如何利用好这个空闲的cpu就成了提高性能的关键,而这里我们要提到的工作窃取（work-stealing）算法就是整个forkjion框架的核心理念,工作窃取（work-stealing）算法是指某个线程从其他队列里窃取任务来执行。\n\n　　那么为什么需要使用工作窃取算法呢？\n\n　　假如我们需要做一个比较大的任务，我们可以把这个任务分割为若干互不依赖的子任务，为了减少线程间的竞争，于是把这些子任务分别放到不同的队列里，并为每个队列创建一个单独的线程来执行队列里的任务，线程和队列一一对应，比如A线程负责处理A队列里的任务。但是有的线程会先把自己队列里的任务干完，而其他线程对应的队列里还有任务等待处理。干完活的线程与其等着，不如去帮其他线程干活，于是它就去其他线程的队列里窃取一个任务来执行。而在这时它们会访问同一个队列，所以为了减少窃取任务线程和被窃取任务线程之间的竞争，通常会使用双端队列，被窃取任务线程永远从双端队列的头部拿任务执行，而窃取任务的线程永远从双端队列的尾部拿任务执行。\n\n　　工作窃取的运行流程图如下：\n\n![img](/images/forkjoin_工作窃取（双端队列）.png)\n\n　　工作窃取算法的优点：充分利用线程进行并行计算，并减少了线程间的竞争；\n\n　　工作窃取算法的缺点：在某些情况下还是存在竞争，比如双端队列里只有一个任务时。并且消耗了更多的系统资源，比如创建多个线程和多个双端队列。\n\n\n\n#### 2.3 Fork/Join 涉及到的关键名称\n\n　　`ForkJoinPool`： 用来执行Task，或生成新的ForkJoinWorkerThread，执行 ForkJoinWorkerThread 间的 work-stealing 逻辑。ForkJoinPool 不是为了替代 ExecutorService，而是它的补充，在某些应用场景下性能比 ExecutorService 更好。\n\n　　`ForkJoinTask`： 执行具体的分支逻辑，声明以同步/异步方式进行执行\n\n　　`ForkJoinWorkerThread`： 是 ForkJoinPool 内的 worker thread，执行\n\n　　`ForkJoinTask`, 内部有 ForkJoinPool.WorkQueue来保存要执行的ForkJoinTask。\n\n　　`ForkJoinPool.WorkQueue`：保存要执行的ForkJoinTask。\n\n\n\n#### 2.4 Fork/Join框架的实现原理\n\n在Java的Fork/Join框架中，它提供了两个类来帮助我们完成任务分割以及执行任务并合并结果：\n\n　　1、`ForkJoinTask`：我们要使用ForkJoin框架，必须首先创建一个ForkJoin任务。它提供在任务中执行fork()和join()操作的机制，通常情况下我们不需要直接继承ForkJoinTask类，而只需要继承它的子类，Fork/Join框架提供了以下两个子类：\n\n　　　　`RecursiveAction`：用于没有返回结果的任务。\n　　　　`RecursiveTask` ：用于有返回结果的任务。\n\n　　2、`ForkJoinPool` ：ForkJoinTask需要通过ForkJoinPool来执行，任务分割出的子任务会添加到当前工作线程所维护的双端队列中，进入队列的头部。当一个工作线程的队列里暂时没有任务时，它会随机从其他工作线程的队列的尾部获取一个任务。\n\n　　`ForkJoinPool`由`ForkJoinTask`数组和`ForkJoinWorkerThread`数组组成，`ForkJoinTask`数组负责将存放程序提交给`ForkJoinPool`，而`ForkJoinWorkerThread`负责执行这些任务。\n\n基本思想\n\n　　`ForkJoinPool` 的每个工作线程都维护着一个工作队列（`WorkQueue`），这是一个双端队列（`Deque`），里面存放的对象是任务（`ForkJoinTask`）。\n\n　　每个工作线程在运行中产生新的任务（通常是因为调用了 fork()）时，会放入工作队列的队尾，并且工作线程在处理自己的工作队列时，使用的是 LIFO（**后进先出**） 方式，也就是说每次从队尾取出任务来执行。\n\n　　每个工作线程在处理自己的工作队列同时，会尝试窃取一个任务（或是来自于刚刚提交到 pool 的任务，或是来自于其他工作线程的工作队列），窃取的任务位于其他线程的工作队列的队首，也就是说工作线程在窃取其他工作线程的任务时，使用的是 FIFO 方式。\n\n　　在遇到 join() 时，如果需要 join 的任务尚未完成，则会先处理其他任务，并等待其完成。\n\n　　在既没有自己的任务，也没有可以窃取的任务时，进入休眠。\n\n\n\n##### 2.4.1 ForkJoinPool属性说明、工作队列说明、控制中心说明\n\n```java\n// Instance fields\n    volatile long ctl;                   // 控制中心：非常重要，看下图解析\n    volatile int runState;               // 负数是shutdown，其余都是2的次方\n    final int config;                    // 配置：二进制的低16位代表 并行度（parallelism），\n                                                                                    //高16位：mode可选FIFO_QUEUE（1 << 16）和LIFO_QUEUE（1 << 31），默认是LIFO_QUEUE\n    int indexSeed;                       // 生成worker的queue索引\n    volatile WorkQueue[] workQueues;     // main registry\n    final ForkJoinWorkerThreadFactory factory;\n    final UncaughtExceptionHandler ueh;  // per-worker UEH\n    final String workerNamePrefix;       // to create worker name string\n    volatile AtomicLong stealCounter;    // also used as sync monitor\n```\n\n\n\n###### 2.4.1.1 工作队列workQueues\n\n用于保存向ForkJoinPool提交的任务，而具体的执行由ForkJoinWorkerThread执行，而ForkJoinWorkerThreadFactory可以用于生产出ForkJoinWorkerThread：\n\n```java\npublic static interface ForkJoinWorkerThreadFactory {\n    /**\n        * Returns a new worker thread operating in the given pool.\n        *\n        * @param pool the pool this thread works in\n        * @return the new worker thread\n        * @throws NullPointerException if the pool is null\n        */\n    public ForkJoinWorkerThread newThread(ForkJoinPool pool);\n}\n```\n\n![img](/images/292888-20190913110608100-591376294.png)\n\n```java\n// Instance fields\nvolatile int scanState;    // 负数：inactive, 非负数：active, 其中奇数代表scanning\nint stackPred;             // sp = (int)ctl, 前一个队列栈的标示信息，包含版本号、是否激活、以及队列索引\nint nsteals;               // 窃取的任务数\nint hint;                  // 一个随机数，用来帮助任务窃取，在 helpXXXX()的方法中会用到\nint config;                // 配置：二进制的低16位代表 在 queue[] 中的索引，\n// 高16位：mode可选FIFO_QUEUE（1 << 16）和LIFO_QUEUE（1 << 31），默认是LIFO_QUEUE\nvolatile int qlock;        // 锁定标示位：1: locked, < 0: terminate; else 0\nvolatile int base;         // index of next slot for poll\nint top;                   // index of next slot for push\nForkJoinTask<?>[] array;   // 任务列表\n```\n\n###### 2.4.1.2 控制中心ctl\n\n![img](/images/292888-20190913111130827-1005682912.png)\n\n###### 2.4.1.3 方法说明\n\n队列与关键任务调用说明\n\n![img](/images/292888-20190913110836624-260052587.png)\n\n\n\n2.4.1.4 externalPush || externalSubmit\n\n```java\nfinal void externalPush(ForkJoinTask<?> task) {\n        WorkQueue[] ws; WorkQueue q; int m;\n        //我们以前常用的Random，在并发下，多个线程同时计算种子需要用到同一个原子变量。\n        //由于更新操作使用CAS，同时执行只有一个线程成功，其他线程的大量自旋造成性能损失，ThreadLocalRandom继承Random，对此进行了改进。\n                //ThreadLocalRandom运用了ThreadLocal，每个线程内部维护一个种子变量，多线程下计算新种子时使用线程自己的种子变量进行更新，避免了竞争。\n        int r = ThreadLocalRandom.getProbe();\n        int rs = runState;\n        // 外部提交的task，肯定会到偶数位下标的队列上\n        // SQMASK = 0x007e = 1111110，任何数和 SQMASK 进行 & 运算 都会是偶数\n        if ((ws = workQueues) != null && (m = (ws.length - 1)) >= 0 &&\n            (q = ws[m & r & SQMASK]) != null && r != 0 && rs > 0 &&\n            //队列上锁\n            U.compareAndSwapInt(q, QLOCK, 0, 1)) {\n            ForkJoinTask<?>[] a; int am, n, s;\n            if ((a = q.array) != null &&\n                (am = a.length - 1) > (n = (s = q.top) - q.base)) {\n                int j = ((am & s) << ASHIFT) + ABASE;\n                //把 task 放到队列的 top端\n                U.putOrderedObject(a, j, task);\n                U.putOrderedInt(q, QTOP, s + 1);\n                U.putIntVolatile(q, QLOCK, 0);\n                if (n <= 1)\n                    signalWork(ws, q);\n                return;\n            }\n            //队列解锁\n            U.compareAndSwapInt(q, QLOCK, 1, 0);\n        }\n        externalSubmit(task);\n    } \n```\n\n###### 2.4.1.5 registerWorker\n\n```java\nfinal WorkQueue registerWorker(ForkJoinWorkerThread wt) {\n        //......\n            if ((ws = workQueues) != null && (n = ws.length) > 0) {\n                int s = indexSeed += SEED_INCREMENT;  // unlikely to collide\n                int m = n - 1;\n                // worker的queue肯定放在pool中的queue[]中的奇数下标\n                  // m = ws.lenght - 1, ws.lenght 肯定是偶数，则m 肯定是奇数\n                // 1的二进制位：00000001, 所以任何数 \"|\" 1 都是奇数\n                // 所以 奇数 & 奇数 ， 1&1 = 1，所以i肯定是奇数\n                i = ((s << 1) | 1) & m;               // odd-numbered indices\n                if (ws[i] != null) {                  // collision\n                    int probes = 0;                   // step by approx half n\n                    int step = (n <= 4) ? 2 : ((n >>> 1) & EVENMASK) + 2;\n                    // 如果下标已经有队列，则重新生成奇数下标\n                    // step肯定为偶数：EVENMASK：0xfffe：1111111111111110\n                      // 所以 奇数+偶数，奇偶性不变\n                    while (ws[i = (i + step) & m] != null) {\n                        if (++probes >= n) {\n                            workQueues = ws = Arrays.copyOf(ws, n <<= 1);\n                            m = n - 1;\n                            probes = 0;\n                        }\n                    }\n                }\n                //...\n            }\n        //......\n    }\n```\n\n\n\n###### 2.4.1.6 scan\n\n```java\nprivate ForkJoinTask<?> scan(WorkQueue w, int r) {\n        WorkQueue[] ws; int m;\n        if ((ws = workQueues) != null && (m = ws.length - 1) > 0 && w != null) {\n            int ss = w.scanState;                     // initially non-negative\n               // k = r & m 。 r是一个随机数，m 是 队列数组长度 - 1；用于定位去哪个 队列 窃取 task\n            for (int origin = r & m, k = origin, oldSum = 0, checkSum = 0;;) {\n                WorkQueue q; ForkJoinTask<?>[] a; ForkJoinTask<?> t;\n                int b, n; long c;\n                if ((q = ws[k]) != null) {\n                      // 如果有还没执行的task，尝试窃取队列q 中的base下标的 task。 即FIFO\n                    // i: 在内存中，b下标对应的对象的偏移值。 a.length - 1 的二进制位 永远是 0[1...]s，所以 (a.length - 1) & b = b，主要是保证了b不会越界\n                    if ((n = (b = q.base) - q.top) < 0 &&\n                        (a = q.array) != null) {      // non-empty\n                        long i = (((a.length - 1) & b) << ASHIFT) + ABASE;\n                        if ((t = ((ForkJoinTask<?>)\n                                  U.getObjectVolatile(a, i))) != null &&\n                            q.base == b) {\n                               // ss 是小偷的 scanState，大于0代表当前的worker是激活的\n                            if (ss >= 0) {\n                                  // 把 task 从 队列中取出来，然后队列的base+1，如果被窃取的队列中有多于1个的task，则尝试唤醒其他的worker\n                                if (U.compareAndSwapObject(a, i, t, null)) {\n                                    q.base = b + 1;\n                                    if (n < -1)       // signal others\n                                        signalWork(ws, q);\n                                    return t;\n                                }\n                            }\n                              // ss小于0代表当前的worker是未激活的，并且当前是第一次扫描，这时候尝试激活worker\n                            // oldSum: 上一次遍历周期的 base 值的和。\n                            // (int) c : 可以拿到当前栈顶的空闲worker。sp = (int) c\n                            else if (oldSum == 0 &&   // try to activate\n                                     w.scanState < 0)\n                                tryRelease(c = ctl, ws[m & (int)c], AC_UNIT);\n                        }\n                        if (ss < 0)                   // refresh\n                            ss = w.scanState;\n                        // 更新随机值，重新初始化所有控制变量，重新定位队列\n                        r ^= r << 1; r ^= r >>> 3; r ^= r << 10;\n                        origin = k = r & m;           // move and rescan\n                        oldSum = checkSum = 0;\n                        continue;\n                    }\n                    checkSum += b;\n                }\n                // 每次没有窃取到task的时候，都会k+1（k值不会超过m），当k遍历了一圈还没有steal到任务，则当前小偷worker是过剩的，则inactive这个小偷worker\n                if ((k = (k + 1) & m) == origin) {    // continue until stable\n                      // oldSum == (oldSum = checkSum) 实际上就是 oldSum == checkSum ， oldSum = checkSum\n                    // oldSum == checkSum 是判断 这个周期和上个周期 的base和是否一直，如果一直， 说明base可能没有变过\n                    if ((ss >= 0 || (ss == (ss = w.scanState))) &&\n                        oldSum == (oldSum = checkSum)) {\n                        if (ss < 0 || w.qlock < 0)    // already inactive\n                            break;\n                        int ns = ss | INACTIVE;       // try to inactivate\n                        long nc = ((SP_MASK & ns) |\n                                   (UC_MASK & ((c = ctl) - AC_UNIT)));\n                        // 维护 队列的 stack，可以指向前一个栈顶的队列\n                        w.stackPred = (int)c;         // hold prev stack top\n                        U.putInt(w, QSCANSTATE, ns);\n                        if (U.compareAndSwapLong(this, CTL, c, nc))\n                            ss = ns;\n                        else\n                            w.scanState = ss;         // back out\n                    }\n                    checkSum = 0;\n                }\n            }\n        }\n        return null;\n    }\n```\n\n###### 2.4.1.7 signalWork\n\n```java\nfinal void signalWork(WorkQueue[] ws, WorkQueue q) {\n        long c; int sp, i; WorkQueue v; Thread p;\n        // AC是负数，所以 active worker不足\n        while ((c = ctl) < 0L) {                       // too few active\n            // sp:第一位是0，没有版本号，没有inactive的worker\n            if ((sp = (int)c) == 0) {                  // no idle workers\n                //tc: tc不为0，就是代表 total worker - parallelism < 0, 所以需要添加worker\n                if ((c & ADD_WORKER) != 0L)            // too few workers\n                    tryAddWorker(c);\n                break;\n            }\n            if (ws == null)                            // unstarted/terminated\n                break;\n            // 取栈顶的worker，如果下标已经越界或queue为null，线程池都是终止了\n            if (ws.length <= (i = sp & SMASK))         // terminated\n                break;\n            if ((v = ws[i]) == null)                   // terminating\n                break;\n            // 新的scanState，版本+1，设置状态为激活，INACTIVE = 1 << 31，~INACTIVE = 01111111....\n            int vs = (sp + SS_SEQ) & ~INACTIVE;        // next scanState\n            // 确认 worker的 sp没有变化\n            int d = sp - v.scanState;                  // screen CAS\n            // 生成新的 ctl，(UC_MASK & (c + AC_UNIT))设置 高32位， (SP_MASK & v.stackPred)设置低32位\n            long nc = (UC_MASK & (c + AC_UNIT)) | (SP_MASK & v.stackPred);\n            if (d == 0 && U.compareAndSwapLong(this, CTL, c, nc)) {\n                //激活worker\n                v.scanState = vs;                      // activate v\n                if ((p = v.parker) != null)\n                    U.unpark(p);\n                break;\n            }\n            //当前queue没有task 需要执行了，则停止signal\n            if (q != null && q.base == q.top)          // no more work\n                break;\n        }\n    }\n```\n\n###### 2.4.1.8 ForkJoinTask的fork方法实现原理\n\n当我们调用ForkJoinTask的fork方法时，程序会把任务放在ForkJoinWorkerThread的pushTask的workQueue中，异步地执行这个任务，然后立即返回结果，代码如下：\n\n```java\npublic final ForkJoinTask<V> fork() {\n    Thread t;\n    if ((t = Thread.currentThread()) instanceof ForkJoinWorkerThread)\n        ((ForkJoinWorkerThread)t).workQueue.push(this);\n    else\n        ForkJoinPool.common.externalPush(this);\n    return this;\n}\n```\n\n若当前线程是ForkJoinWorkerThread线程，则强制类型转换（向下转换）成ForkJoinWorkerThread，然后将任务push到这个线程负责的队列里面去，在ForkJoinWorkerThread类中有一个pool和一个workQueue字段：\n\n```java\n// 线程工作的ForkJoinPool\nfinal ForkJoinPool pool;                // the pool this thread works in\n// 工作窃取队列\nfinal ForkJoinPool.WorkQueue workQueue; // work-stealing mechanics\n```\n\npushTask方法把当前任务存放在ForkJoinTask数组队列里。然后再调用ForkJoinPool的signalWork()方法唤醒或创建一个工作线程来执行任务。代码如下：\n\n```java\nfinal void push(ForkJoinTask<?> task) {\n    ForkJoinTask<?>[] a; ForkJoinPool p;\n    int b = base, s = top, n;\n    if ((a = array) != null) {    // ignore if queue removed\n        int m = a.length - 1;     // fenced write for task visibility\n        U.putOrderedObject(a, ((m & s) << ASHIFT) + ABASE, task);\n        U.putOrderedInt(this, QTOP, s + 1);\n        if ((n = s - b) <= 1) {\n            if ((p = pool) != null)\n                p.signalWork(p.workQueues, this);\n        }\n        else if (n >= m)\n            growArray();\n    }\n}\n```\n\n该方法的主要功能就是将当前任务存放在ForkJoinTask数组array里。然后再调用ForkJoinPool的signalWork()方法唤醒或创建一个工作线程来执行任务。\n\n###### 2.4.1.9 ForkJoinTask的join方法实现原理\n\n```java\npublic final V join() {\n    int s;\n    if ((s = doJoin() & DONE_MASK) != NORMAL)\n        reportException(s);\n    return getRawResult();\n}\n```\n\n　　首先，它调用了doJoin()方法，通过doJoin()方法得到当前任务的状态来判断返回什么结果，任务状态有四种：已完成（NORMAL），被取消（CANCELLED），信号（SIGNAL）和出现异常（EXCEPTIONAL）：　　\n\n　　若状态不是NORMAL，则通过reportException(int)方法来处理状态：\n\n```java\nprivate void reportException(int s) {\n    if (s == CANCELLED)\n        throw new CancellationException();\n    if (s == EXCEPTIONAL)\n        rethrow(getThrowableException());\n}\n```\n\n\n\n- 如果任务状态是已完成，则直接返回任务结果。\n- 如果任务状态是被取消，则直接抛出CancellationException。\n- 如果任务状态是抛出异常，则直接抛出对应的异常。\n\n　　doJoin()方法的实现代码：\n\n```java\nprivate int doJoin() {\n    int s; Thread t; ForkJoinWorkerThread wt; ForkJoinPool.WorkQueue w;\n    return (s = status) < 0 ? s :\n        ((t = Thread.currentThread()) instanceof ForkJoinWorkerThread) ?\n        (w = (wt = (ForkJoinWorkerThread)t).workQueue).\n        tryUnpush(this) && (s = doExec()) < 0 ? s :\n        wt.pool.awaitJoin(w, this, 0L) :\n        externalAwaitDone();\n}\n```\n\n\n\n　　在doJoin()方法里，首先通过查看任务的状态，看任务是否已经执行完了，如果执行完了，则直接返回任务状态，如果没有执行完，则从任务数组里取出任务并执行。如果任务顺利执行完成了，则设置任务状态为NORMAL，如果出现异常，则纪录异常，并将任务状态设置为EXCEPTIONAL。\n\n　　执行任务是通过doExec()方法来完成的：\n\n```java\nfinal int doExec() {\n    int s; boolean completed;\n    if ((s = status) >= 0) {\n        try {\n            completed = exec();\n        } catch (Throwable rex) {\n            return setExceptionalCompletion(rex);\n        }\n        if (completed)\n            s = setCompletion(NORMAL);\n    }\n    return s;\n}\n```\n\n真正的执行过程是由exec()方法来完成的：\n\n```java\nprotected abstract boolean exec();\n```\n\n这就是我们需要重写的方法，若是我们的任务继承自RecursiveAction，则我们需要重写RecursiveAction的compute()方法：\n\n```java\npublic abstract class RecursiveAction extends ForkJoinTask<Void> {\n    private static final long serialVersionUID = 5232453952276485070L;\n \n    /**\n     * The main computation performed by this task.\n     */\n    protected abstract void compute();\n \n    /**\n     * Always returns {@code null}.\n     *\n     * @return {@code null} always\n     */\n    public final Void getRawResult() { return null; }\n \n    /**\n     * Requires null completion value.\n     */\n    protected final void setRawResult(Void mustBeNull) { }\n \n    /**\n     * Implements execution conventions for RecursiveActions.\n     */\n    protected final boolean exec() {\n        compute();\n        return true;\n    }\n}\n```\n\n若是我们的任务继承自RecursiveTask，则我们同样需要重写RecursiveTask的compute()方法：\n\n```java\npublic abstract class RecursiveTask<V> extends ForkJoinTask<V> {\n    private static final long serialVersionUID = 5232453952276485270L;\n \n    /**\n     * The result of the computation.\n     */\n    V result;\n \n    /**\n     * The main computation performed by this task.\n     * @return the result of the computation\n     */\n    protected abstract V compute();\n \n    public final V getRawResult() {\n        return result;\n    }\n \n    protected final void setRawResult(V value) {\n        result = value;\n    }\n \n    /**\n     * Implements execution conventions for RecursiveTask.\n     */\n    protected final boolean exec() {\n        result = compute();\n        return true;\n    }\n}\n```\n\n通过上面的分析可知，执行我们的业务代码是在调用了join()之后的，也就是说，fork仅仅是分割任务，只有当我们执行join的时候，我们的任务才会被执行。\n\n##### 2.4.2 异常处理\n\nForkJoinTask在执行的时候可能会抛出异常，但是我们没办法在主线程里直接捕获异常，所以ForkJoinTask提供了isCompletedAbnormally()方法来检查任务是否已经抛出异常或已经被取消了，并且可以通过ForkJoinTask的getException方法获取异常。使用如下代码：\n\n```java\nif(task.isCompletedAbnormally()){\n    System.out.println(task.getException());\n}\n```\n\ngetException方法返回Throwable对象，如果任务被取消了则返回CancellationException。如果任务没有完成或者没有抛出异常则返回null。\n\n```java\npublic final Throwable getException() {\n        int s = status & DONE_MASK;\n        return ((s >= NORMAL)    ? null :\n                (s == CANCELLED) ? new CancellationException() :\n                getThrowableException());\n}\n```\n\n\n\n##### 2.4.2forkjoin 的使用\n\n　ForkJoinPool 使用submit 或 invoke 提交的区别：invoke是同步执行，调用之后需要等待任务完成，才能执行后面的代码；submit是异步执行，只有在Future调用get的时候会阻塞。\n\n　　这里继承的是RecursiveTask 适用于有返回值的场景；还可以继承RecursiveAction，适合于没有返回值的场景\n\n　　执行子任务调用fork方法并不是最佳的选择，最佳的选择是invokeAll方法。\n\n##### 2.4.3 示例代码\n\n   这个示例是在做某支付任务异步解耦后的业务逻辑校验，这个是一个接收返回的任务 `RecursiveTask`：\n\n```java\nclass CheckTask extends RecursiveTask<Integer> {\n\t\t/**\n\t\t*  这个是阈值，具体任务列表拆分到什么程度再开始执行\n\t\t**/\n        private int threshold = 10;\n\n    \t/**\n    \t*\t这个是当前处理的集合列表\n    \t**/\n        private List<CbVaPaymentFileContent> list;\n\n        /**\n        * 初始化任务对象\n        **/\n        private CheckTask(int threshold, List<CbVaPaymentFileContent> list) {\n            if (null == list) throw new IllegalArgumentException(\"[list] is null.\");\n            this.threshold = threshold <= 0 ? this.threshold : threshold;\n//            this.threshold = list.size() / Runtime.getRuntime().availableProcessors();\n            this.list = list;\n        }\n\n        @Override\n        protected Integer compute() {\n            if (list.size() <= threshold) {\n                // 处理\n                int count = 0;\n                for (CbVaPaymentFileContent content : list) {\n                    count += process(content);\n                }\n                return count;\n            } else {\n                // 分解\n                int middle = list.size() / 2;\n                List<CbVaPaymentFileContent> leftList = list.subList(0, middle);\n                List<CbVaPaymentFileContent> rightList = list.subList(middle, list.size());\n                CheckTask left = new CheckTask(threshold, leftList);\n                CheckTask right = new CheckTask(threshold, rightList);\n                // left.fork();\n                // right.fork();\n                \n                // 这两个方法，使用invokeAll方法的主要原因是为了充分利用线程池，在invokeAll的N个任务中，其中N-1个任务会使用fork()交给其它线程执行，但是，它还会留一个任务自己执行，这样，就充分利用了线程池，保证没有空闲的不干活的线程。\n                invokeAll(left, right);\n\n                // 结合\n                return left.join() + right.join();\n            }\n        }\n\n    }\n```\n\n　　该代码就是通过Fork/Join框架来计算数组的和，计算耗时4031毫秒。通过该代码作为应用示例主要是为了告诉大家，使用Fork/Join模型的正确方式，在源代码中可以看到，SumTask继承自RecursiveTask，重写的compute方法为：\n\n　　compute()方法使用了invokeAll方法来分解任务，而不是它下面的subtask1.fork();\n\n　　这两个方法，使用invokeAll方法的主要原因是为了充分利用线程池，在invokeAll的N个任务中，其中N-1个任务会使用fork()交给其它线程执行，但是，它还会留一个任务自己执行，这样，就充分利用了线程池，保证没有空闲的不干活的线程。\n\n　　若是采用另外一种方式来运行，程序的运行时间为6028毫秒，可以看到，明显比invokeAll方式慢了很多。\n\n##### 2.4.3 JDK8中的最佳实践\n\n##### 2.4.3.1 通过forkjoin来看parallelStream\n\n在Java 8引入了自动并行化的概念。它能够让一部分Java代码自动地以并行的方式执行，即使用了ForkJoinPool的ParallelStream。　　\n\n　　Java 8为ForkJoinPool添加了一个通用线程池，这个线程池用来处理那些没有被显式提交到任何线程池的任务。它是ForkJoinPool类型上的一个静态元素，它拥有的默认线程数量等于运行计算机上的处理器数量。当调用Arrays类上添加的新方法时，自动并行化就会发生。比如用来排序一个数组的并行快速排序，用来对一个数组中的元素进行并行遍历。自动并行化也被运用在Java 8新添加的Stream API中。\n\n　　一般ForkJoinPool中的通用线程池处理，也可以使用ThreadPoolExecutor完成，但是就代码的可读性和代码量而言，使用ForkJoinPool明显更胜一筹。\n\n##### 2.4.3.2 线程池数量\n\n​\t**1、系统CPU数量：[如机器8核，即8]**\n\n```\nRuntime.getRuntime().availableProcessors()\n```\n\n　　**2、parallelStream默认的并发线程数:【parallelStream核心使用ForkJoinPool实现，故如下】【输出是7个】**\n\n```\nForkJoinPool.getCommonPoolParallelism()\n```\n\n　　**3、为什么parallelStream默认的并发线程数要比CPU处理器的数量少1个？**\n\n　　　　因为最优的策略是每个CPU处理器分配一个线程，然而主线程也算一个线程，所以要占一个名额。如果只有1个CPU，默认的并发线程数就是1\n\n　　**4、修改默认并发数**\n\n　　　　默认的并发线程数不可以反复修改。因为`java.util.concurrent.ForkJoinPool.common.parallelism`是`final`类型的，整个JVM中只允许设置一次。多次修改以第一次为主\n\n　　　　1、系统property\n\n```\n        System.setProperty(\"java.util.concurrent.ForkJoinPool.common.parallelism\", \"20\");\n        System.out.println(ForkJoinPool.getCommonPoolParallelism());\n```\n\n　　　　2、当然上述参数也可以通过jvm设置系统属性：-Djava.util.concurrent.ForkJoinPool.common.parallelism=N （N为线程数量）　　\n\n　　**5、既然默认的并发线程数不能反复修改，进行不同线程数量的并发测试，可以引入`ForkJoinPool`。用法如下**：\n\n```\n    @Test\n    public void testSetParallelMutli() throws ExecutionException, InterruptedException {\n        int[] threadCountArr = {2, 4, 6};\n        List<Integer> para = new ArrayList<>();\n        for (int i = 0; i < 7; i++) {\n            para.add(i);\n\n        }\n        for (int threadCount : threadCountArr) {\n            new ForkJoinPool(threadCount).submit(() -> {//多线程任务\n                System.out.println(Thread.currentThread().getName());\n            }).get();\n        }\n    }\n```\n\n　　　　使用get 是为了阻塞 得到结果；如果主线程没有关闭的情况下可以不用get\n\n\n\n##### 2.4.3.2 测试示例\n\n**实际应用示例**\n\n```java\nlogger.info(\"[消息补偿任务-并行执行]开始，本次预处理总数为[{}]\", list.size());\n\n// 手动扩容下,当然这个综合考虑使用\nSystem.setProperty(DEFAULT_FORK_JOIN_PARALLELISM, (Runtime.getRuntime().availableProcessors() * appConfig.getMutiple()) + \"\");\n\n/**\n * 拆分任务到JobSender\n *  {@link Stream#reduce(Object, BiFunction, BinaryOperator)}\n *  <p>\n *      reduce.Object --> 初始值，只是为了来初始化参数类型\n *      reduce.BiFunction.apply(T t, U u) -->  t表示当前值， u表示当前操作对象\n *      reduce.BinaryOperator(T t, U u) --> t=u=初始值类型，用来合并结果的\n *  </p>\n */\nint total = list.parallelStream().filter(op -> lockAdaptor.lock(op.getId(), LockAdaptor.DEFAULT_TIMEOUT)).reduce(0, (cur, channel) -> {\n    // 构建发送器 + 并处理\n    int ava;\n    try {\n        ava = (jobSenderFactory.getSender(channel).process().dealSuccess() ? 1 : 0);\n    } finally {\n        // 解锁\n        lockAdaptor.unlock(channel.getId());\n    }\n    return cur + ava;\n}, (a, b) -> a + b);\nlogger.info(\"[消息补偿任务-并行执行]结束，本次预处理总数为[{}]， 成功总数[{}], 未成功总数[{}]\", list.size(), total, list.size() - total);\n```\n\n1、测试一、8核机器，每个任务均耗时2秒，一共16个任务\n\n```\n    @Test\n    public void testSetParallelMutli2() throws ExecutionException, InterruptedException {\n        List<Integer> para = new ArrayList<>();\n        for (int i = 0; i < 16; i++) {\n            para.add(i);\n\n        }\n        para.parallelStream().forEach(i -> {\n            try {\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(LocalDateTime.now() + \"||\" + Thread.currentThread().getName() + \":\" + i);\n        });\n    }\n```\n\n　　输出\n\n```\n2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-1:5\n2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-6:1\n2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-2:14\n2019-09-13T10:51:04.344||main:10\n2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-4:13\n2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-3:2\n2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-7:4\n2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-5:7\n2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-4:3\n2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-6:0\n2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-1:12\n2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-2:15\n2019-09-13T10:51:06.350||main:11\n2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-5:8\n2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-3:6\n2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-7:9\n```\n\n　　结论：会有7个 ForkJoinPool.commonPool-worker 线程和1个主线程main一起执行任务。并且8个一组一组执行，每个线程执行了两个任务。\n\n2、测试二、8核机器，每个任务耗时2秒内随机，一共16个任务 \n\n```\n    @Test\n    public void testSetParallelMutli2() throws ExecutionException, InterruptedException {\n        List<Integer> para = new ArrayList<>();\n        for (int i = 0; i < 16; i++) {\n            para.add(i);\n\n        }\n        para.parallelStream().forEach(i -> {\n            try {\n//                Thread.sleep(2000);\n                Thread.sleep(new Random().nextInt(2000));\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(LocalDateTime.now() + \"||\" + Thread.currentThread().getName() + \":\" + i);\n        });\n    }\n```\n\n输出\n\n```\n2019-09-13T10:54:01.486||ForkJoinPool.commonPool-worker-5:7\n2019-09-13T10:54:01.751||main:10\n2019-09-13T10:54:01.774||main:11\n2019-09-13T10:54:01.862||ForkJoinPool.commonPool-worker-5:6\n2019-09-13T10:54:02.203||ForkJoinPool.commonPool-worker-5:15\n2019-09-13T10:54:02.285||ForkJoinPool.commonPool-worker-6:1\n2019-09-13T10:54:02.407||ForkJoinPool.commonPool-worker-6:0\n2019-09-13T10:54:02.479||ForkJoinPool.commonPool-worker-1:5\n2019-09-13T10:54:02.496||ForkJoinPool.commonPool-worker-2:14\n2019-09-13T10:54:02.518||ForkJoinPool.commonPool-worker-4:13\n2019-09-13T10:54:02.732||main:9\n2019-09-13T10:54:02.740||ForkJoinPool.commonPool-worker-7:4\n2019-09-13T10:54:02.791||ForkJoinPool.commonPool-worker-3:2\n2019-09-13T10:54:03.178||ForkJoinPool.commonPool-worker-5:12\n2019-09-13T10:54:03.743||ForkJoinPool.commonPool-worker-1:8\n2019-09-13T10:54:04.003||ForkJoinPool.commonPool-worker-6:3\n```\n\n　　结论：会有7个 ForkJoinPool.commonPool-worker 线程和1个主线程main一起执行任务。并且是强占式【工作窃取法】的执行任务：如上线程5、主线程执行了各3个任务，其他有2个或一个的。\n\n3、示例三、接收消息队列消息，每次消息个数n个，每个消息是一个100个的list<String>,接收时候使用parallelStream消费并发处理\n\n发送消息\n\n```\n    @Test\n    public void testMq() throws Exception {\n        for (int j = 0; j < 1; j++) {\n            List<String> list = Lists.newArrayList();\n            for (int i = 0; i < 100; i++) {\n                list.add(j+\"___________\"+i);\n            }\n            producerMessageService.sendMessage(\"test_parallel\", UUID.randomUUID().toString(), JSON.toJSONString(list));\n            Thread.sleep(1000);\n        }\n        logger.error(\"=======================================================生产 ok\");\n\n        Thread.sleep(2000000000);\n    }\n```\n\n接收消费\n\n```\n    @Override\n    public void onMessage(List<Message> messages) throws Exception {\n        if (messages == null || messages.isEmpty()) {\n            return;\n        }\n\n        for (int i = 0; i < messages.size(); i++) {\n            Message message = messages.get(i);\n            logger.info(String.format(\"收到一条消息,消息主题（队列名）：%s,内容是：%s\", message.getTopic(), message.getText()));\n\n\n            List<String> strings = JSONArray.parseArray(message.getText(), String.class);\n            strings.parallelStream().forEach(p -> {\n                try {\n                    Thread.sleep(2000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                logger.error(LocalDateTime.now() + \"_______________\" + Thread.currentThread().getName() + \":\" + p);\n            });\n        }\n    }\n```\n\n　　说明：\n\n　　　　发送消息，1s后会发送完毕，此时如果有订阅就会出现一条消息积压。\n\n　　　　订阅消息者，订阅后会收到词条消息，此时如果正常执行完毕（不论使用不使用多线程）消息积压就没有了，因为一般消息监听会在方法正常执行完毕后，使用消息Id将此条消息从订阅队列中移除。\n\n　　　　　　接收到1条消息，里面会有一个jsonstring，反序列化为List，大小是100，交给parallelStream处理，此时会有8个线程处理【如果是8核机器】，处理速度大约是2秒8个。其余的92进入workQueue中等待处理。\n\n　　　　　　此时如果程序中断，订阅的消息不会被消费使用，下次重连时，需要做已处理消息的去重。\n\n　　　　　　此时如果有新消息发送过来，也会在积压中，不会被消息消费。\n\n 4、示例四、从a中100个数找出整除5的\n\n```\n    @Test\n    public void testExec() throws ExecutionException, InterruptedException {\n        List<Integer> a = Lists.newArrayList();\n        for (int i = 0; i < 100; i++) {\n            a.add(i);\n        }\n        List<Integer> b = Lists.newArrayList();\n        a.parallelStream().forEach(p -> {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            if (p % 5 == 0) {\n                b.add(p);\n            }\n        });\n        System.out.println(\"===========\"+b.size());\n        b.forEach(p -> System.out.print(p+\" \"));\n    }\n```\n\n输出：正确应该是20\n\n```\n===========18\n15 90 45 30 25 35 85 75 0 40 5 80 95 20 60 70 50 55 \n```\n\n \n\n对此运行结果不一致，以及会有多线程问题\n\n```\njava.lang.ArrayIndexOutOfBoundsException\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n　　……\n\nCaused by: java.lang.ArrayIndexOutOfBoundsException: 15\n    at java.util.ArrayList.add(ArrayList.java:463)\n    at com.github.bjlhx15.common.thread.juc.collection.jdk8stream.TStreamTest.lambda$testExec$6(TStreamTest.java:118)\n    at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)\n    at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)\n    at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)\n    at java.util.stream.ForEachOps$ForEachTask.compute(ForEachOps.java:291)\n```\n\n \n\n原因：parallelStream 并行执行，多线程异步，可能没有b添加完毕就遍历，ArrayList不是线程安全的\n\n修正：\n\n　　方案一、在遍历前，需全部执行完毕【串行】\n\n　　　　将 parallelStream 改为 stream串行处理【不可取，处理速度慢】\n\n　　方案二、在遍历前，需全部执行完毕\n\n　　　　继承 RecursiveTask或者RecursiveAction写任务　　　　\n\n　　方案三、将ArrayList替换安全集合CopyOnWriteArrayLIst\n\n```\n        List<Integer> b = Lists.newCopyOnWriteArrayList();\n```\n\n　　　　此时运行就会出现正确结果。按理说应该会有结果不准确问题吧。但是没有，个人理解，因为是每次8个同时执行，所以即使最后一次主线程提前结束，也有其他线程在锁着b，所以最后执行b的操作会有等待","slug":"java/thread-forkJoin","published":1,"updated":"2020-05-12T17:11:50.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckai0vmy5005xa4ja2m7k8ru9","content":"<h2 id=\"JDK1-8-parallelStream-与-fork-join-框架\"><a href=\"#JDK1-8-parallelStream-与-fork-join-框架\" class=\"headerlink\" title=\"JDK1.8 parallelStream 与 fork/join 框架\"></a>JDK1.8 parallelStream 与 fork/join 框架</h2><h3 id=\"一、JDK8开启并行串行流\"><a href=\"#一、JDK8开启并行串行流\" class=\"headerlink\" title=\"一、JDK8开启并行串行流\"></a>一、JDK8开启并行串行流</h3><p>tream是java8中新增加的一个特性,被java猿统称为流.</p>\n<p>　　Stream 不是集合元素，它不是数据结构并不保存数据，它是有关算法和计算的，它更像一个高级版本的 Iterator。原始版本的 Iterator，用户只能显式地一个一个遍历元素并对其执行某些操作；高级版本的 Stream，用户只要给出需要对其包含的元素执行什么操作，比如 “过滤掉长度大于 10 的字符串”、“获取每个字符串的首字母”等，Stream 会隐式地在内部进行遍历，做出相应的数据转换。</p>\n<p>　　Stream 就如同一个迭代器（Iterator），单向，不可往复，数据只能遍历一次，遍历过一次后即用尽了，就好比流水从面前流过，一去不复返。</p>\n<p>　　而和迭代器又不同的是，Stream 可以并行化操作，迭代器只能命令式地、串行化操作。顾名思义，当使用串行方式去遍历时，每个 item 读完后再读下一个 item。而使用并行去遍历时，数据会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出。Stream 的并行操作依赖于 Java7 中引入的 Fork/Join 框架（JSR166y）来拆分任务和加速处理过程。Java 的并行 API 演变历程基本如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.0</span>-<span class=\"number\">1.4</span> 中的 java.lang.Thread  </span><br><span class=\"line\"><span class=\"number\">5.0</span> 中的 java.util.concurrent  </span><br><span class=\"line\"><span class=\"number\">6.0</span> 中的 Phasers 等  </span><br><span class=\"line\"><span class=\"number\">7.0</span> 中的 Fork/Join 框架  </span><br><span class=\"line\"><span class=\"number\">8.0</span> 中的 Lambda</span><br></pre></td></tr></table></figure>\n\n<p>Stream 的另外一大特点是，数据源本身可以是无限的。</p>\n<h4 id=\"1-1-什么是parallelStream\"><a href=\"#1-1-什么是parallelStream\" class=\"headerlink\" title=\"1.1 什么是parallelStream\"></a>1.1 什么是parallelStream</h4><p>parallelStream其实就是一个并行执行的流.它通过默认的ForkJoinPool,可能提高你的多线程任务的速度.实际是多线程，注意线程安全问题</p>\n<p>　　在从stream和parallelStream方法中进行选择时,我们可以考虑以下几个问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　1. 是否需要并行？  </span><br><span class=\"line\">　　2. 任务之间是否是独立的？是否会引起任何竞态条件？  </span><br><span class=\"line\">　　3. 结果是否取决于任务的调用顺序？</span><br></pre></td></tr></table></figure>\n\n<p>　　对于问题1，需要弄清楚要解决的问题是什么，数据量有多大，计算的特点是什么？并不是所有的问题都适合使用并发程序来求解，比如当数据量不大时，顺序执行往往比并行执行更快。毕竟，准备线程池和其它相关资源也是需要时间的。但是，当任务涉及到I/O操作并且任务之间不互相依赖时，那么并行化就是一个不错的选择。通常而言，将这类程序并行化之后，执行速度会提升好几个等级。</p>\n<p>　　对于问题2，如果任务之间是独立的，并且代码中不涉及到对同一个对象的某个状态或者某个变量的更新操作，那么就表明代码是可以被并行化的。</p>\n<p>　　对于问题3，由于在并行环境中任务的执行顺序是不确定的，因此对于依赖于顺序的任务而言，并行化也许不能给出正确的结果。　　</p>\n<p>　　场景：默认值适用的场景是CPU密集型的，而一般的Web项目是IO密集型的（一般的Web项目都是需要跟数据库打交道的，针对数据库的操作主要就都是IO，而对CPU的消耗并不高）。</p>\n<p>　　当不能使用默认值的时候，需要开发人员额外去了解parallelStream的用法，如下：</p>\n<h4 id=\"1-2-parallelStream作用\"><a href=\"#1-2-parallelStream作用\" class=\"headerlink\" title=\"1.2 parallelStream作用\"></a>1.2 parallelStream作用</h4><p>Stream具有平行处理能力，处理的过程会分而治之，也就是将一个大任务切分成多个小任务，这表示每个任务都是一个操作，因此像以下的程式片段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; numbers &#x3D; Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);</span><br><span class=\"line\">numbers.parallelStream()</span><br><span class=\"line\">       .forEach(out::println);</span><br></pre></td></tr></table></figure>\n\n<p>　　得到的展示顺序不一定会是1、2、3、4、5、6、7、8、9，而可能是任意的顺序，就forEach()这个操作來讲，如果平行处理时，希望最后顺序是按照原来Stream的数据顺序，那可以调用forEachOrdered()。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; numbers &#x3D; Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);</span><br><span class=\"line\">numbers.parallelStream()</span><br><span class=\"line\">       .forEachOrdered(out::println);</span><br></pre></td></tr></table></figure>\n\n<p>　　注意:如果forEachOrdered()中间有其他如filter()的中介操作，会试着平行化处理，然后最终forEachOrdered()会以原数据顺序处理，因此，使用forEachOrdered()这类的有序处理,可能会（或完全失去）失去平行化的一些优势，实际上中介操作亦有可能如此，例如sorted()方法。</p>\n<h4 id=\"1-3-开启串行流和并行流：\"><a href=\"#1-3-开启串行流和并行流：\" class=\"headerlink\" title=\"1.3 开启串行流和并行流：\"></a>1.3 开启串行流和并行流：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testStream</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; list = getList();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 串行流</span></span><br><span class=\"line\">    list.stream();</span><br><span class=\"line\">    list.stream().sequential();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 并行流</span></span><br><span class=\"line\">    list.stream().parallel();</span><br><span class=\"line\">    list.parallelStream().reduce(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 串行流执行</span></span><br><span class=\"line\">    list.stream().reduce((first, second) -&gt; first+second);/</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 并行流执行</span></span><br><span class=\"line\">    list.parallelStream().reduce((first, second) -&gt; first+second);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-流处理\"><a href=\"#1-2-流处理\" class=\"headerlink\" title=\"1.2 流处理\"></a>1.2 流处理</h4><p>因为比较关心并行流的实现，所以看并行流的代码：</p>\n<p>java.util.stream.ReduceOps.ReduceOp</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReduceOp</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">R</span>, <span class=\"title\">S</span> <span class=\"keyword\">extends</span> <span class=\"title\">AccumulatingSink</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">R</span>, <span class=\"title\">S</span>&gt;&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">TerminalOp</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">R</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> StreamShape inputShape;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Create a &#123;<span class=\"doctag\">@code</span> ReduceOp&#125; of the specified stream shape which uses</span></span><br><span class=\"line\"><span class=\"comment\">     * the specified &#123;<span class=\"doctag\">@code</span> Supplier&#125; to create accumulating sinks.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> shape The shape of the stream pipeline</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ReduceOp(StreamShape shape) &#123;</span><br><span class=\"line\">        inputShape = shape;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> S <span class=\"title\">makeSink</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> StreamShape <span class=\"title\">inputShape</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inputShape;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;P_IN&gt; <span class=\"function\">R <span class=\"title\">evaluateSequential</span><span class=\"params\">(PipelineHelper&lt;T&gt; helper,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                       Spliterator&lt;P_IN&gt; spliterator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helper.wrapAndCopyInto(makeSink(), spliterator).get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;P_IN&gt; <span class=\"function\">R <span class=\"title\">evaluateParallel</span><span class=\"params\">(PipelineHelper&lt;T&gt; helper,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     Spliterator&lt;P_IN&gt; spliterator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里new出了一个 ReduceTask</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ReduceTask&lt;&gt;(<span class=\"keyword\">this</span>, helper, spliterator).invoke().get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>名称上看，这是个task任务（java.util.stream.ReduceOps.ReduceTask），再看下类图：</p>\n<p><img src=\"/images/reduceTask-%E7%B1%BB%E5%9B%BE.png\" alt=\"58929987340\"></p>\n<p>看到类图结构加上熟悉fork/join框架，大概明白了stream的并行流实现了，借助于fork/join</p>\n<h3 id=\"二、Fork-Join-框架\"><a href=\"#二、Fork-Join-框架\" class=\"headerlink\" title=\"二、Fork/Join 框架\"></a>二、Fork/Join 框架</h3><p>Fork/Join框架是Java7提供了的一个用于并行执行任务的框架， 是一个把大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务结果的框架。</p>\n<p>它同ThreadPoolExecutor一样，也实现了Executor和ExecutorService接口。它使用了一个无限队列来保存需要执行的任务，而线程的数量则是通过构造函数传入，如果没有向构造函数中传入希望的线程数量，那么当前计算机可用的CPU数量会被设置为线程数量作为默认值。</p>\n<p><img src=\"/images/forkjoin_%E4%BB%BB%E5%8A%A1%E6%8B%86%E5%88%86.png\" alt=\"img\"></p>\n<h4 id=\"2-1分治法\"><a href=\"#2-1分治法\" class=\"headerlink\" title=\"2.1分治法\"></a>2.1分治法</h4><p><code>ForkJoinPool</code>主要用来使用分治法(Divide-and-Conquer Algorithm)来解决问题。</p>\n<p>　　典型的应用比如快速排序算法。这里的要点在于，ForkJoinPool需要使用相对少的线程来处理大量的任务。比如要对1000万个数据进行排序，那么会将这个任务分割成两个500万的排序任务和一个针对这两组500万数据的合并任务。以此类推，对于500万的数据也会做出同样的分割处理，到最后会设置一个阈值来规定当数据规模到多少时，停止这样的分割处理。比如，当元素的数量小于10时，会停止分割，转而使用插入排序对它们进行排序。那么到最后，所有的任务加起来会有大概2000000+个。问题的关键在于，对于一个任务而言，只有当它所有的子任务完成之后，它才能够被执行。</p>\n<p>　　所以当使用ThreadPoolExecutor时，使用分治法会存在问题，因为ThreadPoolExecutor中的线程无法像任务队列中再添加一个任务并且在等待该任务完成之后再继续执行。而使用ForkJoinPool时，就能够让其中的线程创建新的任务，并挂起当前的任务，此时线程就能够从队列中选择子任务执行。</p>\n<p>那么使用ThreadPoolExecutor或者ForkJoinPool，会有什么性能的差异呢？</p>\n<p>　　首先，使用ForkJoinPool能够使用数量有限的线程来完成非常多的具有父子关系的任务，比如使用4个线程来完成超过200万个任务。但是，使用ThreadPoolExecutor时，是不可能完成的，因为ThreadPoolExecutor中的Thread无法选择优先执行子任务，需要完成200万个具有父子关系的任务时，也需要200万个线程，显然这是不可行的。</p>\n<p>​    尝试改变JDK8的工作线程数量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_FORK_JOIN_PARALLELISM = <span class=\"string\">\"java.util.concurrent.ForkJoinPool.common.parallelism\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 设置线程数</span></span><br><span class=\"line\">System.setProperty(DEFAULT_FORK_JOIN_PARALLELISM, (Runtime.getRuntime().availableProcessors() * <span class=\"number\">2</span>) + <span class=\"string\">\"\"</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-2-工作窃取法\"><a href=\"#2-2-工作窃取法\" class=\"headerlink\" title=\"2.2 工作窃取法\"></a>2.2 工作窃取法</h4><p>　　forkjoin最核心的地方就是利用了现代硬件设备多核,在一个操作时候会有空闲的cpu,那么如何利用好这个空闲的cpu就成了提高性能的关键,而这里我们要提到的工作窃取（work-stealing）算法就是整个forkjion框架的核心理念,工作窃取（work-stealing）算法是指某个线程从其他队列里窃取任务来执行。</p>\n<p>　　那么为什么需要使用工作窃取算法呢？</p>\n<p>　　假如我们需要做一个比较大的任务，我们可以把这个任务分割为若干互不依赖的子任务，为了减少线程间的竞争，于是把这些子任务分别放到不同的队列里，并为每个队列创建一个单独的线程来执行队列里的任务，线程和队列一一对应，比如A线程负责处理A队列里的任务。但是有的线程会先把自己队列里的任务干完，而其他线程对应的队列里还有任务等待处理。干完活的线程与其等着，不如去帮其他线程干活，于是它就去其他线程的队列里窃取一个任务来执行。而在这时它们会访问同一个队列，所以为了减少窃取任务线程和被窃取任务线程之间的竞争，通常会使用双端队列，被窃取任务线程永远从双端队列的头部拿任务执行，而窃取任务的线程永远从双端队列的尾部拿任务执行。</p>\n<p>　　工作窃取的运行流程图如下：</p>\n<p><img src=\"/images/forkjoin_%E5%B7%A5%E4%BD%9C%E7%AA%83%E5%8F%96%EF%BC%88%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97%EF%BC%89.png\" alt=\"img\"></p>\n<p>　　工作窃取算法的优点：充分利用线程进行并行计算，并减少了线程间的竞争；</p>\n<p>　　工作窃取算法的缺点：在某些情况下还是存在竞争，比如双端队列里只有一个任务时。并且消耗了更多的系统资源，比如创建多个线程和多个双端队列。</p>\n<h4 id=\"2-3-Fork-Join-涉及到的关键名称\"><a href=\"#2-3-Fork-Join-涉及到的关键名称\" class=\"headerlink\" title=\"2.3 Fork/Join 涉及到的关键名称\"></a>2.3 Fork/Join 涉及到的关键名称</h4><p>　　<code>ForkJoinPool</code>： 用来执行Task，或生成新的ForkJoinWorkerThread，执行 ForkJoinWorkerThread 间的 work-stealing 逻辑。ForkJoinPool 不是为了替代 ExecutorService，而是它的补充，在某些应用场景下性能比 ExecutorService 更好。</p>\n<p>　　<code>ForkJoinTask</code>： 执行具体的分支逻辑，声明以同步/异步方式进行执行</p>\n<p>　　<code>ForkJoinWorkerThread</code>： 是 ForkJoinPool 内的 worker thread，执行</p>\n<p>　　<code>ForkJoinTask</code>, 内部有 ForkJoinPool.WorkQueue来保存要执行的ForkJoinTask。</p>\n<p>　　<code>ForkJoinPool.WorkQueue</code>：保存要执行的ForkJoinTask。</p>\n<h4 id=\"2-4-Fork-Join框架的实现原理\"><a href=\"#2-4-Fork-Join框架的实现原理\" class=\"headerlink\" title=\"2.4 Fork/Join框架的实现原理\"></a>2.4 Fork/Join框架的实现原理</h4><p>在Java的Fork/Join框架中，它提供了两个类来帮助我们完成任务分割以及执行任务并合并结果：</p>\n<p>　　1、<code>ForkJoinTask</code>：我们要使用ForkJoin框架，必须首先创建一个ForkJoin任务。它提供在任务中执行fork()和join()操作的机制，通常情况下我们不需要直接继承ForkJoinTask类，而只需要继承它的子类，Fork/Join框架提供了以下两个子类：</p>\n<p>　　　　<code>RecursiveAction</code>：用于没有返回结果的任务。<br>　　　　<code>RecursiveTask</code> ：用于有返回结果的任务。</p>\n<p>　　2、<code>ForkJoinPool</code> ：ForkJoinTask需要通过ForkJoinPool来执行，任务分割出的子任务会添加到当前工作线程所维护的双端队列中，进入队列的头部。当一个工作线程的队列里暂时没有任务时，它会随机从其他工作线程的队列的尾部获取一个任务。</p>\n<p>　　<code>ForkJoinPool</code>由<code>ForkJoinTask</code>数组和<code>ForkJoinWorkerThread</code>数组组成，<code>ForkJoinTask</code>数组负责将存放程序提交给<code>ForkJoinPool</code>，而<code>ForkJoinWorkerThread</code>负责执行这些任务。</p>\n<p>基本思想</p>\n<p>　　<code>ForkJoinPool</code> 的每个工作线程都维护着一个工作队列（<code>WorkQueue</code>），这是一个双端队列（<code>Deque</code>），里面存放的对象是任务（<code>ForkJoinTask</code>）。</p>\n<p>　　每个工作线程在运行中产生新的任务（通常是因为调用了 fork()）时，会放入工作队列的队尾，并且工作线程在处理自己的工作队列时，使用的是 LIFO（<strong>后进先出</strong>） 方式，也就是说每次从队尾取出任务来执行。</p>\n<p>　　每个工作线程在处理自己的工作队列同时，会尝试窃取一个任务（或是来自于刚刚提交到 pool 的任务，或是来自于其他工作线程的工作队列），窃取的任务位于其他线程的工作队列的队首，也就是说工作线程在窃取其他工作线程的任务时，使用的是 FIFO 方式。</p>\n<p>　　在遇到 join() 时，如果需要 join 的任务尚未完成，则会先处理其他任务，并等待其完成。</p>\n<p>　　在既没有自己的任务，也没有可以窃取的任务时，进入休眠。</p>\n<h5 id=\"2-4-1-ForkJoinPool属性说明、工作队列说明、控制中心说明\"><a href=\"#2-4-1-ForkJoinPool属性说明、工作队列说明、控制中心说明\" class=\"headerlink\" title=\"2.4.1 ForkJoinPool属性说明、工作队列说明、控制中心说明\"></a>2.4.1 ForkJoinPool属性说明、工作队列说明、控制中心说明</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Instance fields</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> ctl;                   <span class=\"comment\">// 控制中心：非常重要，看下图解析</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> runState;               <span class=\"comment\">// 负数是shutdown，其余都是2的次方</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> config;                    <span class=\"comment\">// 配置：二进制的低16位代表 并行度（parallelism），</span></span><br><span class=\"line\">                                                                                    <span class=\"comment\">//高16位：mode可选FIFO_QUEUE（1 &lt;&lt; 16）和LIFO_QUEUE（1 &lt;&lt; 31），默认是LIFO_QUEUE</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> indexSeed;                       <span class=\"comment\">// 生成worker的queue索引</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> WorkQueue[] workQueues;     <span class=\"comment\">// main registry</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> ForkJoinWorkerThreadFactory factory;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> UncaughtExceptionHandler ueh;  <span class=\"comment\">// per-worker UEH</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> String workerNamePrefix;       <span class=\"comment\">// to create worker name string</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> AtomicLong stealCounter;    <span class=\"comment\">// also used as sync monitor</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"2-4-1-1-工作队列workQueues\"><a href=\"#2-4-1-1-工作队列workQueues\" class=\"headerlink\" title=\"2.4.1.1 工作队列workQueues\"></a>2.4.1.1 工作队列workQueues</h6><p>用于保存向ForkJoinPool提交的任务，而具体的执行由ForkJoinWorkerThread执行，而ForkJoinWorkerThreadFactory可以用于生产出ForkJoinWorkerThread：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ForkJoinWorkerThreadFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * Returns a new worker thread operating in the given pool.</span></span><br><span class=\"line\"><span class=\"comment\">        *</span></span><br><span class=\"line\"><span class=\"comment\">        * <span class=\"doctag\">@param</span> pool the pool this thread works in</span></span><br><span class=\"line\"><span class=\"comment\">        * <span class=\"doctag\">@return</span> the new worker thread</span></span><br><span class=\"line\"><span class=\"comment\">        * <span class=\"doctag\">@throws</span> NullPointerException if the pool is null</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ForkJoinWorkerThread <span class=\"title\">newThread</span><span class=\"params\">(ForkJoinPool pool)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/292888-20190913110608100-591376294.png\" alt=\"img\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Instance fields</span></span><br><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> scanState;    <span class=\"comment\">// 负数：inactive, 非负数：active, 其中奇数代表scanning</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> stackPred;             <span class=\"comment\">// sp = (int)ctl, 前一个队列栈的标示信息，包含版本号、是否激活、以及队列索引</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> nsteals;               <span class=\"comment\">// 窃取的任务数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> hint;                  <span class=\"comment\">// 一个随机数，用来帮助任务窃取，在 helpXXXX()的方法中会用到</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> config;                <span class=\"comment\">// 配置：二进制的低16位代表 在 queue[] 中的索引，</span></span><br><span class=\"line\"><span class=\"comment\">// 高16位：mode可选FIFO_QUEUE（1 &lt;&lt; 16）和LIFO_QUEUE（1 &lt;&lt; 31），默认是LIFO_QUEUE</span></span><br><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> qlock;        <span class=\"comment\">// 锁定标示位：1: locked, &lt; 0: terminate; else 0</span></span><br><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> base;         <span class=\"comment\">// index of next slot for poll</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> top;                   <span class=\"comment\">// index of next slot for push</span></span><br><span class=\"line\">ForkJoinTask&lt;?&gt;[] array;   <span class=\"comment\">// 任务列表</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-4-1-2-控制中心ctl\"><a href=\"#2-4-1-2-控制中心ctl\" class=\"headerlink\" title=\"2.4.1.2 控制中心ctl\"></a>2.4.1.2 控制中心ctl</h6><p><img src=\"/images/292888-20190913111130827-1005682912.png\" alt=\"img\"></p>\n<h6 id=\"2-4-1-3-方法说明\"><a href=\"#2-4-1-3-方法说明\" class=\"headerlink\" title=\"2.4.1.3 方法说明\"></a>2.4.1.3 方法说明</h6><p>队列与关键任务调用说明</p>\n<p><img src=\"/images/292888-20190913110836624-260052587.png\" alt=\"img\"></p>\n<p>2.4.1.4 externalPush || externalSubmit</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">externalPush</span><span class=\"params\">(ForkJoinTask&lt;?&gt; task)</span> </span>&#123;</span><br><span class=\"line\">        WorkQueue[] ws; WorkQueue q; <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">        <span class=\"comment\">//我们以前常用的Random，在并发下，多个线程同时计算种子需要用到同一个原子变量。</span></span><br><span class=\"line\">        <span class=\"comment\">//由于更新操作使用CAS，同时执行只有一个线程成功，其他线程的大量自旋造成性能损失，ThreadLocalRandom继承Random，对此进行了改进。</span></span><br><span class=\"line\">                <span class=\"comment\">//ThreadLocalRandom运用了ThreadLocal，每个线程内部维护一个种子变量，多线程下计算新种子时使用线程自己的种子变量进行更新，避免了竞争。</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> r = ThreadLocalRandom.getProbe();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rs = runState;</span><br><span class=\"line\">        <span class=\"comment\">// 外部提交的task，肯定会到偶数位下标的队列上</span></span><br><span class=\"line\">        <span class=\"comment\">// SQMASK = 0x007e = 1111110，任何数和 SQMASK 进行 &amp; 运算 都会是偶数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((ws = workQueues) != <span class=\"keyword\">null</span> &amp;&amp; (m = (ws.length - <span class=\"number\">1</span>)) &gt;= <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">            (q = ws[m &amp; r &amp; SQMASK]) != <span class=\"keyword\">null</span> &amp;&amp; r != <span class=\"number\">0</span> &amp;&amp; rs &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">            <span class=\"comment\">//队列上锁</span></span><br><span class=\"line\">            U.compareAndSwapInt(q, QLOCK, <span class=\"number\">0</span>, <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            ForkJoinTask&lt;?&gt;[] a; <span class=\"keyword\">int</span> am, n, s;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((a = q.array) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                (am = a.length - <span class=\"number\">1</span>) &gt; (n = (s = q.top) - q.base)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> j = ((am &amp; s) &lt;&lt; ASHIFT) + ABASE;</span><br><span class=\"line\">                <span class=\"comment\">//把 task 放到队列的 top端</span></span><br><span class=\"line\">                U.putOrderedObject(a, j, task);</span><br><span class=\"line\">                U.putOrderedInt(q, QTOP, s + <span class=\"number\">1</span>);</span><br><span class=\"line\">                U.putIntVolatile(q, QLOCK, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">                    signalWork(ws, q);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//队列解锁</span></span><br><span class=\"line\">            U.compareAndSwapInt(q, QLOCK, <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        externalSubmit(task);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-4-1-5-registerWorker\"><a href=\"#2-4-1-5-registerWorker\" class=\"headerlink\" title=\"2.4.1.5 registerWorker\"></a>2.4.1.5 registerWorker</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> WorkQueue <span class=\"title\">registerWorker</span><span class=\"params\">(ForkJoinWorkerThread wt)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//......</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((ws = workQueues) != <span class=\"keyword\">null</span> &amp;&amp; (n = ws.length) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> s = indexSeed += SEED_INCREMENT;  <span class=\"comment\">// unlikely to collide</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> m = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">// worker的queue肯定放在pool中的queue[]中的奇数下标</span></span><br><span class=\"line\">                  <span class=\"comment\">// m = ws.lenght - 1, ws.lenght 肯定是偶数，则m 肯定是奇数</span></span><br><span class=\"line\">                <span class=\"comment\">// 1的二进制位：00000001, 所以任何数 \"|\" 1 都是奇数</span></span><br><span class=\"line\">                <span class=\"comment\">// 所以 奇数 &amp; 奇数 ， 1&amp;1 = 1，所以i肯定是奇数</span></span><br><span class=\"line\">                i = ((s &lt;&lt; <span class=\"number\">1</span>) | <span class=\"number\">1</span>) &amp; m;               <span class=\"comment\">// odd-numbered indices</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ws[i] != <span class=\"keyword\">null</span>) &#123;                  <span class=\"comment\">// collision</span></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> probes = <span class=\"number\">0</span>;                   <span class=\"comment\">// step by approx half n</span></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> step = (n &lt;= <span class=\"number\">4</span>) ? <span class=\"number\">2</span> : ((n &gt;&gt;&gt; <span class=\"number\">1</span>) &amp; EVENMASK) + <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果下标已经有队列，则重新生成奇数下标</span></span><br><span class=\"line\">                    <span class=\"comment\">// step肯定为偶数：EVENMASK：0xfffe：1111111111111110</span></span><br><span class=\"line\">                      <span class=\"comment\">// 所以 奇数+偶数，奇偶性不变</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (ws[i = (i + step) &amp; m] != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (++probes &gt;= n) &#123;</span><br><span class=\"line\">                            workQueues = ws = Arrays.copyOf(ws, n &lt;&lt;= <span class=\"number\">1</span>);</span><br><span class=\"line\">                            m = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">                            probes = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//...</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"comment\">//......</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"2-4-1-6-scan\"><a href=\"#2-4-1-6-scan\" class=\"headerlink\" title=\"2.4.1.6 scan\"></a>2.4.1.6 scan</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ForkJoinTask&lt;?&gt; scan(WorkQueue w, <span class=\"keyword\">int</span> r) &#123;</span><br><span class=\"line\">        WorkQueue[] ws; <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((ws = workQueues) != <span class=\"keyword\">null</span> &amp;&amp; (m = ws.length - <span class=\"number\">1</span>) &gt; <span class=\"number\">0</span> &amp;&amp; w != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ss = w.scanState;                     <span class=\"comment\">// initially non-negative</span></span><br><span class=\"line\">               <span class=\"comment\">// k = r &amp; m 。 r是一个随机数，m 是 队列数组长度 - 1；用于定位去哪个 队列 窃取 task</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> origin = r &amp; m, k = origin, oldSum = <span class=\"number\">0</span>, checkSum = <span class=\"number\">0</span>;;) &#123;</span><br><span class=\"line\">                WorkQueue q; ForkJoinTask&lt;?&gt;[] a; ForkJoinTask&lt;?&gt; t;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> b, n; <span class=\"keyword\">long</span> c;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((q = ws[k]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                      <span class=\"comment\">// 如果有还没执行的task，尝试窃取队列q 中的base下标的 task。 即FIFO</span></span><br><span class=\"line\">                    <span class=\"comment\">// i: 在内存中，b下标对应的对象的偏移值。 a.length - 1 的二进制位 永远是 0[1...]s，所以 (a.length - 1) &amp; b = b，主要是保证了b不会越界</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((n = (b = q.base) - q.top) &lt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">                        (a = q.array) != <span class=\"keyword\">null</span>) &#123;      <span class=\"comment\">// non-empty</span></span><br><span class=\"line\">                        <span class=\"keyword\">long</span> i = (((a.length - <span class=\"number\">1</span>) &amp; b) &lt;&lt; ASHIFT) + ABASE;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((t = ((ForkJoinTask&lt;?&gt;)</span><br><span class=\"line\">                                  U.getObjectVolatile(a, i))) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                            q.base == b) &#123;</span><br><span class=\"line\">                               <span class=\"comment\">// ss 是小偷的 scanState，大于0代表当前的worker是激活的</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (ss &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                  <span class=\"comment\">// 把 task 从 队列中取出来，然后队列的base+1，如果被窃取的队列中有多于1个的task，则尝试唤醒其他的worker</span></span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (U.compareAndSwapObject(a, i, t, <span class=\"keyword\">null</span>)) &#123;</span><br><span class=\"line\">                                    q.base = b + <span class=\"number\">1</span>;</span><br><span class=\"line\">                                    <span class=\"keyword\">if</span> (n &lt; -<span class=\"number\">1</span>)       <span class=\"comment\">// signal others</span></span><br><span class=\"line\">                                        signalWork(ws, q);</span><br><span class=\"line\">                                    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                              <span class=\"comment\">// ss小于0代表当前的worker是未激活的，并且当前是第一次扫描，这时候尝试激活worker</span></span><br><span class=\"line\">                            <span class=\"comment\">// oldSum: 上一次遍历周期的 base 值的和。</span></span><br><span class=\"line\">                            <span class=\"comment\">// (int) c : 可以拿到当前栈顶的空闲worker。sp = (int) c</span></span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldSum == <span class=\"number\">0</span> &amp;&amp;   <span class=\"comment\">// try to activate</span></span><br><span class=\"line\">                                     w.scanState &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                                tryRelease(c = ctl, ws[m &amp; (<span class=\"keyword\">int</span>)c], AC_UNIT);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (ss &lt; <span class=\"number\">0</span>)                   <span class=\"comment\">// refresh</span></span><br><span class=\"line\">                            ss = w.scanState;</span><br><span class=\"line\">                        <span class=\"comment\">// 更新随机值，重新初始化所有控制变量，重新定位队列</span></span><br><span class=\"line\">                        r ^= r &lt;&lt; <span class=\"number\">1</span>; r ^= r &gt;&gt;&gt; <span class=\"number\">3</span>; r ^= r &lt;&lt; <span class=\"number\">10</span>;</span><br><span class=\"line\">                        origin = k = r &amp; m;           <span class=\"comment\">// move and rescan</span></span><br><span class=\"line\">                        oldSum = checkSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    checkSum += b;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 每次没有窃取到task的时候，都会k+1（k值不会超过m），当k遍历了一圈还没有steal到任务，则当前小偷worker是过剩的，则inactive这个小偷worker</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((k = (k + <span class=\"number\">1</span>) &amp; m) == origin) &#123;    <span class=\"comment\">// continue until stable</span></span><br><span class=\"line\">                      <span class=\"comment\">// oldSum == (oldSum = checkSum) 实际上就是 oldSum == checkSum ， oldSum = checkSum</span></span><br><span class=\"line\">                    <span class=\"comment\">// oldSum == checkSum 是判断 这个周期和上个周期 的base和是否一直，如果一直， 说明base可能没有变过</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((ss &gt;= <span class=\"number\">0</span> || (ss == (ss = w.scanState))) &amp;&amp;</span><br><span class=\"line\">                        oldSum == (oldSum = checkSum)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (ss &lt; <span class=\"number\">0</span> || w.qlock &lt; <span class=\"number\">0</span>)    <span class=\"comment\">// already inactive</span></span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> ns = ss | INACTIVE;       <span class=\"comment\">// try to inactivate</span></span><br><span class=\"line\">                        <span class=\"keyword\">long</span> nc = ((SP_MASK &amp; ns) |</span><br><span class=\"line\">                                   (UC_MASK &amp; ((c = ctl) - AC_UNIT)));</span><br><span class=\"line\">                        <span class=\"comment\">// 维护 队列的 stack，可以指向前一个栈顶的队列</span></span><br><span class=\"line\">                        w.stackPred = (<span class=\"keyword\">int</span>)c;         <span class=\"comment\">// hold prev stack top</span></span><br><span class=\"line\">                        U.putInt(w, QSCANSTATE, ns);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (U.compareAndSwapLong(<span class=\"keyword\">this</span>, CTL, c, nc))</span><br><span class=\"line\">                            ss = ns;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span></span><br><span class=\"line\">                            w.scanState = ss;         <span class=\"comment\">// back out</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    checkSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-4-1-7-signalWork\"><a href=\"#2-4-1-7-signalWork\" class=\"headerlink\" title=\"2.4.1.7 signalWork\"></a>2.4.1.7 signalWork</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">signalWork</span><span class=\"params\">(WorkQueue[] ws, WorkQueue q)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> c; <span class=\"keyword\">int</span> sp, i; WorkQueue v; Thread p;</span><br><span class=\"line\">        <span class=\"comment\">// AC是负数，所以 active worker不足</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((c = ctl) &lt; <span class=\"number\">0L</span>) &#123;                       <span class=\"comment\">// too few active</span></span><br><span class=\"line\">            <span class=\"comment\">// sp:第一位是0，没有版本号，没有inactive的worker</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((sp = (<span class=\"keyword\">int</span>)c) == <span class=\"number\">0</span>) &#123;                  <span class=\"comment\">// no idle workers</span></span><br><span class=\"line\">                <span class=\"comment\">//tc: tc不为0，就是代表 total worker - parallelism &lt; 0, 所以需要添加worker</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((c &amp; ADD_WORKER) != <span class=\"number\">0L</span>)            <span class=\"comment\">// too few workers</span></span><br><span class=\"line\">                    tryAddWorker(c);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ws == <span class=\"keyword\">null</span>)                            <span class=\"comment\">// unstarted/terminated</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 取栈顶的worker，如果下标已经越界或queue为null，线程池都是终止了</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ws.length &lt;= (i = sp &amp; SMASK))         <span class=\"comment\">// terminated</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((v = ws[i]) == <span class=\"keyword\">null</span>)                   <span class=\"comment\">// terminating</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 新的scanState，版本+1，设置状态为激活，INACTIVE = 1 &lt;&lt; 31，~INACTIVE = 01111111....</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> vs = (sp + SS_SEQ) &amp; ~INACTIVE;        <span class=\"comment\">// next scanState</span></span><br><span class=\"line\">            <span class=\"comment\">// 确认 worker的 sp没有变化</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> d = sp - v.scanState;                  <span class=\"comment\">// screen CAS</span></span><br><span class=\"line\">            <span class=\"comment\">// 生成新的 ctl，(UC_MASK &amp; (c + AC_UNIT))设置 高32位， (SP_MASK &amp; v.stackPred)设置低32位</span></span><br><span class=\"line\">            <span class=\"keyword\">long</span> nc = (UC_MASK &amp; (c + AC_UNIT)) | (SP_MASK &amp; v.stackPred);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d == <span class=\"number\">0</span> &amp;&amp; U.compareAndSwapLong(<span class=\"keyword\">this</span>, CTL, c, nc)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//激活worker</span></span><br><span class=\"line\">                v.scanState = vs;                      <span class=\"comment\">// activate v</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((p = v.parker) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    U.unpark(p);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//当前queue没有task 需要执行了，则停止signal</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (q != <span class=\"keyword\">null</span> &amp;&amp; q.base == q.top)          <span class=\"comment\">// no more work</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-4-1-8-ForkJoinTask的fork方法实现原理\"><a href=\"#2-4-1-8-ForkJoinTask的fork方法实现原理\" class=\"headerlink\" title=\"2.4.1.8 ForkJoinTask的fork方法实现原理\"></a>2.4.1.8 ForkJoinTask的fork方法实现原理</h6><p>当我们调用ForkJoinTask的fork方法时，程序会把任务放在ForkJoinWorkerThread的pushTask的workQueue中，异步地执行这个任务，然后立即返回结果，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ForkJoinTask&lt;V&gt; <span class=\"title\">fork</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Thread t;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((t = Thread.currentThread()) <span class=\"keyword\">instanceof</span> ForkJoinWorkerThread)</span><br><span class=\"line\">        ((ForkJoinWorkerThread)t).workQueue.push(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        ForkJoinPool.common.externalPush(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>若当前线程是ForkJoinWorkerThread线程，则强制类型转换（向下转换）成ForkJoinWorkerThread，然后将任务push到这个线程负责的队列里面去，在ForkJoinWorkerThread类中有一个pool和一个workQueue字段：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 线程工作的ForkJoinPool</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> ForkJoinPool pool;                <span class=\"comment\">// the pool this thread works in</span></span><br><span class=\"line\"><span class=\"comment\">// 工作窃取队列</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> ForkJoinPool.WorkQueue workQueue; <span class=\"comment\">// work-stealing mechanics</span></span><br></pre></td></tr></table></figure>\n\n<p>pushTask方法把当前任务存放在ForkJoinTask数组队列里。然后再调用ForkJoinPool的signalWork()方法唤醒或创建一个工作线程来执行任务。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(ForkJoinTask&lt;?&gt; task)</span> </span>&#123;</span><br><span class=\"line\">    ForkJoinTask&lt;?&gt;[] a; ForkJoinPool p;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = base, s = top, n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((a = array) != <span class=\"keyword\">null</span>) &#123;    <span class=\"comment\">// ignore if queue removed</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = a.length - <span class=\"number\">1</span>;     <span class=\"comment\">// fenced write for task visibility</span></span><br><span class=\"line\">        U.putOrderedObject(a, ((m &amp; s) &lt;&lt; ASHIFT) + ABASE, task);</span><br><span class=\"line\">        U.putOrderedInt(<span class=\"keyword\">this</span>, QTOP, s + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((n = s - b) &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((p = pool) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                p.signalWork(p.workQueues, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n &gt;= m)</span><br><span class=\"line\">            growArray();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法的主要功能就是将当前任务存放在ForkJoinTask数组array里。然后再调用ForkJoinPool的signalWork()方法唤醒或创建一个工作线程来执行任务。</p>\n<h6 id=\"2-4-1-9-ForkJoinTask的join方法实现原理\"><a href=\"#2-4-1-9-ForkJoinTask的join方法实现原理\" class=\"headerlink\" title=\"2.4.1.9 ForkJoinTask的join方法实现原理\"></a>2.4.1.9 ForkJoinTask的join方法实现原理</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">join</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((s = doJoin() &amp; DONE_MASK) != NORMAL)</span><br><span class=\"line\">        reportException(s);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getRawResult();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　首先，它调用了doJoin()方法，通过doJoin()方法得到当前任务的状态来判断返回什么结果，任务状态有四种：已完成（NORMAL），被取消（CANCELLED），信号（SIGNAL）和出现异常（EXCEPTIONAL）：　　</p>\n<p>　　若状态不是NORMAL，则通过reportException(int)方法来处理状态：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">reportException</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == CANCELLED)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> CancellationException();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == EXCEPTIONAL)</span><br><span class=\"line\">        rethrow(getThrowableException());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>如果任务状态是已完成，则直接返回任务结果。</li>\n<li>如果任务状态是被取消，则直接抛出CancellationException。</li>\n<li>如果任务状态是抛出异常，则直接抛出对应的异常。</li>\n</ul>\n<p>　　doJoin()方法的实现代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">doJoin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s; Thread t; ForkJoinWorkerThread wt; ForkJoinPool.WorkQueue w;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (s = status) &lt; <span class=\"number\">0</span> ? s :</span><br><span class=\"line\">        ((t = Thread.currentThread()) <span class=\"keyword\">instanceof</span> ForkJoinWorkerThread) ?</span><br><span class=\"line\">        (w = (wt = (ForkJoinWorkerThread)t).workQueue).</span><br><span class=\"line\">        tryUnpush(<span class=\"keyword\">this</span>) &amp;&amp; (s = doExec()) &lt; <span class=\"number\">0</span> ? s :</span><br><span class=\"line\">        wt.pool.awaitJoin(w, <span class=\"keyword\">this</span>, <span class=\"number\">0L</span>) :</span><br><span class=\"line\">        externalAwaitDone();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>　　在doJoin()方法里，首先通过查看任务的状态，看任务是否已经执行完了，如果执行完了，则直接返回任务状态，如果没有执行完，则从任务数组里取出任务并执行。如果任务顺利执行完成了，则设置任务状态为NORMAL，如果出现异常，则纪录异常，并将任务状态设置为EXCEPTIONAL。</p>\n<p>　　执行任务是通过doExec()方法来完成的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">doExec</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s; <span class=\"keyword\">boolean</span> completed;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((s = status) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            completed = exec();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable rex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> setExceptionalCompletion(rex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (completed)</span><br><span class=\"line\">            s = setCompletion(NORMAL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>真正的执行过程是由exec()方法来完成的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">exec</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>这就是我们需要重写的方法，若是我们的任务继承自RecursiveAction，则我们需要重写RecursiveAction的compute()方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecursiveAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ForkJoinTask</span>&lt;<span class=\"title\">Void</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">5232453952276485070L</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The main computation performed by this task.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">compute</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Always returns &#123;<span class=\"doctag\">@code</span> null&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> null&#125; always</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Void <span class=\"title\">getRawResult</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>; &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Requires null completion value.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setRawResult</span><span class=\"params\">(Void mustBeNull)</span> </span>&#123; &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Implements execution conventions for RecursiveActions.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">exec</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        compute();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>若是我们的任务继承自RecursiveTask，则我们同样需要重写RecursiveTask的compute()方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecursiveTask</span>&lt;<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">ForkJoinTask</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">5232453952276485270L</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The result of the computation.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    V result;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The main computation performed by this task.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the result of the computation</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> V <span class=\"title\">compute</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">getRawResult</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setRawResult</span><span class=\"params\">(V value)</span> </span>&#123;</span><br><span class=\"line\">        result = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Implements execution conventions for RecursiveTask.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">exec</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        result = compute();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过上面的分析可知，执行我们的业务代码是在调用了join()之后的，也就是说，fork仅仅是分割任务，只有当我们执行join的时候，我们的任务才会被执行。</p>\n<h5 id=\"2-4-2-异常处理\"><a href=\"#2-4-2-异常处理\" class=\"headerlink\" title=\"2.4.2 异常处理\"></a>2.4.2 异常处理</h5><p>ForkJoinTask在执行的时候可能会抛出异常，但是我们没办法在主线程里直接捕获异常，所以ForkJoinTask提供了isCompletedAbnormally()方法来检查任务是否已经抛出异常或已经被取消了，并且可以通过ForkJoinTask的getException方法获取异常。使用如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(task.isCompletedAbnormally())&#123;</span><br><span class=\"line\">    System.out.println(task.getException());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>getException方法返回Throwable对象，如果任务被取消了则返回CancellationException。如果任务没有完成或者没有抛出异常则返回null。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Throwable <span class=\"title\">getException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s = status &amp; DONE_MASK;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((s &gt;= NORMAL)    ? <span class=\"keyword\">null</span> :</span><br><span class=\"line\">                (s == CANCELLED) ? <span class=\"keyword\">new</span> CancellationException() :</span><br><span class=\"line\">                getThrowableException());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"2-4-2forkjoin-的使用\"><a href=\"#2-4-2forkjoin-的使用\" class=\"headerlink\" title=\"2.4.2forkjoin 的使用\"></a>2.4.2forkjoin 的使用</h5><p>　ForkJoinPool 使用submit 或 invoke 提交的区别：invoke是同步执行，调用之后需要等待任务完成，才能执行后面的代码；submit是异步执行，只有在Future调用get的时候会阻塞。</p>\n<p>　　这里继承的是RecursiveTask 适用于有返回值的场景；还可以继承RecursiveAction，适合于没有返回值的场景</p>\n<p>　　执行子任务调用fork方法并不是最佳的选择，最佳的选择是invokeAll方法。</p>\n<h5 id=\"2-4-3-示例代码\"><a href=\"#2-4-3-示例代码\" class=\"headerlink\" title=\"2.4.3 示例代码\"></a>2.4.3 示例代码</h5><p>   这个示例是在做某支付任务异步解耦后的业务逻辑校验，这个是一个接收返回的任务 <code>RecursiveTask</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CheckTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecursiveTask</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*  这个是阈值，具体任务列表拆分到什么程度再开始执行</span></span><br><span class=\"line\"><span class=\"comment\">\t\t**/</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> threshold = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    \t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    \t*\t这个是当前处理的集合列表</span></span><br><span class=\"line\"><span class=\"comment\">    \t**/</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;CbVaPaymentFileContent&gt; list;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * 初始化任务对象</span></span><br><span class=\"line\"><span class=\"comment\">        **/</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">CheckTask</span><span class=\"params\">(<span class=\"keyword\">int</span> threshold, List&lt;CbVaPaymentFileContent&gt; list)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == list) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"[list] is null.\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.threshold = threshold &lt;= <span class=\"number\">0</span> ? <span class=\"keyword\">this</span>.threshold : threshold;</span><br><span class=\"line\"><span class=\"comment\">//            this.threshold = list.size() / Runtime.getRuntime().availableProcessors();</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.list = list;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> Integer <span class=\"title\">compute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (list.size() &lt;= threshold) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 处理</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (CbVaPaymentFileContent content : list) &#123;</span><br><span class=\"line\">                    count += process(content);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 分解</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> middle = list.size() / <span class=\"number\">2</span>;</span><br><span class=\"line\">                List&lt;CbVaPaymentFileContent&gt; leftList = list.subList(<span class=\"number\">0</span>, middle);</span><br><span class=\"line\">                List&lt;CbVaPaymentFileContent&gt; rightList = list.subList(middle, list.size());</span><br><span class=\"line\">                CheckTask left = <span class=\"keyword\">new</span> CheckTask(threshold, leftList);</span><br><span class=\"line\">                CheckTask right = <span class=\"keyword\">new</span> CheckTask(threshold, rightList);</span><br><span class=\"line\">                <span class=\"comment\">// left.fork();</span></span><br><span class=\"line\">                <span class=\"comment\">// right.fork();</span></span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">// 这两个方法，使用invokeAll方法的主要原因是为了充分利用线程池，在invokeAll的N个任务中，其中N-1个任务会使用fork()交给其它线程执行，但是，它还会留一个任务自己执行，这样，就充分利用了线程池，保证没有空闲的不干活的线程。</span></span><br><span class=\"line\">                invokeAll(left, right);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 结合</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> left.join() + right.join();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　该代码就是通过Fork/Join框架来计算数组的和，计算耗时4031毫秒。通过该代码作为应用示例主要是为了告诉大家，使用Fork/Join模型的正确方式，在源代码中可以看到，SumTask继承自RecursiveTask，重写的compute方法为：</p>\n<p>　　compute()方法使用了invokeAll方法来分解任务，而不是它下面的subtask1.fork();</p>\n<p>　　这两个方法，使用invokeAll方法的主要原因是为了充分利用线程池，在invokeAll的N个任务中，其中N-1个任务会使用fork()交给其它线程执行，但是，它还会留一个任务自己执行，这样，就充分利用了线程池，保证没有空闲的不干活的线程。</p>\n<p>　　若是采用另外一种方式来运行，程序的运行时间为6028毫秒，可以看到，明显比invokeAll方式慢了很多。</p>\n<h5 id=\"2-4-3-JDK8中的最佳实践\"><a href=\"#2-4-3-JDK8中的最佳实践\" class=\"headerlink\" title=\"2.4.3 JDK8中的最佳实践\"></a>2.4.3 JDK8中的最佳实践</h5><h5 id=\"2-4-3-1-通过forkjoin来看parallelStream\"><a href=\"#2-4-3-1-通过forkjoin来看parallelStream\" class=\"headerlink\" title=\"2.4.3.1 通过forkjoin来看parallelStream\"></a>2.4.3.1 通过forkjoin来看parallelStream</h5><p>在Java 8引入了自动并行化的概念。它能够让一部分Java代码自动地以并行的方式执行，即使用了ForkJoinPool的ParallelStream。　　</p>\n<p>　　Java 8为ForkJoinPool添加了一个通用线程池，这个线程池用来处理那些没有被显式提交到任何线程池的任务。它是ForkJoinPool类型上的一个静态元素，它拥有的默认线程数量等于运行计算机上的处理器数量。当调用Arrays类上添加的新方法时，自动并行化就会发生。比如用来排序一个数组的并行快速排序，用来对一个数组中的元素进行并行遍历。自动并行化也被运用在Java 8新添加的Stream API中。</p>\n<p>　　一般ForkJoinPool中的通用线程池处理，也可以使用ThreadPoolExecutor完成，但是就代码的可读性和代码量而言，使用ForkJoinPool明显更胜一筹。</p>\n<h5 id=\"2-4-3-2-线程池数量\"><a href=\"#2-4-3-2-线程池数量\" class=\"headerlink\" title=\"2.4.3.2 线程池数量\"></a>2.4.3.2 线程池数量</h5><p>​    <strong>1、系统CPU数量：[如机器8核，即8]</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Runtime.getRuntime().availableProcessors()</span><br></pre></td></tr></table></figure>\n\n<p>　　<strong>2、parallelStream默认的并发线程数:【parallelStream核心使用ForkJoinPool实现，故如下】【输出是7个】</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ForkJoinPool.getCommonPoolParallelism()</span><br></pre></td></tr></table></figure>\n\n<p>　　<strong>3、为什么parallelStream默认的并发线程数要比CPU处理器的数量少1个？</strong></p>\n<p>　　　　因为最优的策略是每个CPU处理器分配一个线程，然而主线程也算一个线程，所以要占一个名额。如果只有1个CPU，默认的并发线程数就是1</p>\n<p>　　<strong>4、修改默认并发数</strong></p>\n<p>　　　　默认的并发线程数不可以反复修改。因为<code>java.util.concurrent.ForkJoinPool.common.parallelism</code>是<code>final</code>类型的，整个JVM中只允许设置一次。多次修改以第一次为主</p>\n<p>　　　　1、系统property</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.setProperty(&quot;java.util.concurrent.ForkJoinPool.common.parallelism&quot;, &quot;20&quot;);</span><br><span class=\"line\">System.out.println(ForkJoinPool.getCommonPoolParallelism());</span><br></pre></td></tr></table></figure>\n\n<p>　　　　2、当然上述参数也可以通过jvm设置系统属性：-Djava.util.concurrent.ForkJoinPool.common.parallelism=N （N为线程数量）　　</p>\n<p>　　<strong>5、既然默认的并发线程数不能反复修改，进行不同线程数量的并发测试，可以引入<code>ForkJoinPool</code>。用法如下</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void testSetParallelMutli() throws ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">    int[] threadCountArr &#x3D; &#123;2, 4, 6&#125;;</span><br><span class=\"line\">    List&lt;Integer&gt; para &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; 7; i++) &#123;</span><br><span class=\"line\">        para.add(i);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (int threadCount : threadCountArr) &#123;</span><br><span class=\"line\">        new ForkJoinPool(threadCount).submit(() -&gt; &#123;&#x2F;&#x2F;多线程任务</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        &#125;).get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　　　使用get 是为了阻塞 得到结果；如果主线程没有关闭的情况下可以不用get</p>\n<h5 id=\"2-4-3-2-测试示例\"><a href=\"#2-4-3-2-测试示例\" class=\"headerlink\" title=\"2.4.3.2 测试示例\"></a>2.4.3.2 测试示例</h5><p><strong>实际应用示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger.info(<span class=\"string\">\"[消息补偿任务-并行执行]开始，本次预处理总数为[&#123;&#125;]\"</span>, list.size());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 手动扩容下,当然这个综合考虑使用</span></span><br><span class=\"line\">System.setProperty(DEFAULT_FORK_JOIN_PARALLELISM, (Runtime.getRuntime().availableProcessors() * appConfig.getMutiple()) + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 拆分任务到JobSender</span></span><br><span class=\"line\"><span class=\"comment\"> *  &#123;<span class=\"doctag\">@link</span> Stream#reduce(Object, BiFunction, BinaryOperator)&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *  &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *      reduce.Object --&gt; 初始值，只是为了来初始化参数类型</span></span><br><span class=\"line\"><span class=\"comment\"> *      reduce.BiFunction.apply(T t, U u) --&gt;  t表示当前值， u表示当前操作对象</span></span><br><span class=\"line\"><span class=\"comment\"> *      reduce.BinaryOperator(T t, U u) --&gt; t=u=初始值类型，用来合并结果的</span></span><br><span class=\"line\"><span class=\"comment\"> *  &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> total = list.parallelStream().filter(op -&gt; lockAdaptor.lock(op.getId(), LockAdaptor.DEFAULT_TIMEOUT)).reduce(<span class=\"number\">0</span>, (cur, channel) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构建发送器 + 并处理</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ava;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ava = (jobSenderFactory.getSender(channel).process().dealSuccess() ? <span class=\"number\">1</span> : <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 解锁</span></span><br><span class=\"line\">        lockAdaptor.unlock(channel.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cur + ava;</span><br><span class=\"line\">&#125;, (a, b) -&gt; a + b);</span><br><span class=\"line\">logger.info(<span class=\"string\">\"[消息补偿任务-并行执行]结束，本次预处理总数为[&#123;&#125;]， 成功总数[&#123;&#125;], 未成功总数[&#123;&#125;]\"</span>, list.size(), total, list.size() - total);</span><br></pre></td></tr></table></figure>\n\n<p>1、测试一、8核机器，每个任务均耗时2秒，一共16个任务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void testSetParallelMutli2() throws ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">    List&lt;Integer&gt; para &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; 16; i++) &#123;</span><br><span class=\"line\">        para.add(i);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    para.parallelStream().forEach(i -&gt; &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Thread.sleep(2000);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(LocalDateTime.now() + &quot;||&quot; + Thread.currentThread().getName() + &quot;:&quot; + i);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-1:5</span><br><span class=\"line\">2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-6:1</span><br><span class=\"line\">2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-2:14</span><br><span class=\"line\">2019-09-13T10:51:04.344||main:10</span><br><span class=\"line\">2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-4:13</span><br><span class=\"line\">2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-3:2</span><br><span class=\"line\">2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-7:4</span><br><span class=\"line\">2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-5:7</span><br><span class=\"line\">2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-4:3</span><br><span class=\"line\">2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-6:0</span><br><span class=\"line\">2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-1:12</span><br><span class=\"line\">2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-2:15</span><br><span class=\"line\">2019-09-13T10:51:06.350||main:11</span><br><span class=\"line\">2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-5:8</span><br><span class=\"line\">2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-3:6</span><br><span class=\"line\">2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-7:9</span><br></pre></td></tr></table></figure>\n\n<p>　　结论：会有7个 ForkJoinPool.commonPool-worker 线程和1个主线程main一起执行任务。并且8个一组一组执行，每个线程执行了两个任务。</p>\n<p>2、测试二、8核机器，每个任务耗时2秒内随机，一共16个任务 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testSetParallelMutli2() throws ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; para &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; 16; i++) &#123;</span><br><span class=\"line\">            para.add(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        para.parallelStream().forEach(i -&gt; &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">&#x2F;&#x2F;                Thread.sleep(2000);</span><br><span class=\"line\">                Thread.sleep(new Random().nextInt(2000));</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(LocalDateTime.now() + &quot;||&quot; + Thread.currentThread().getName() + &quot;:&quot; + i);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-09-13T10:54:01.486||ForkJoinPool.commonPool-worker-5:7</span><br><span class=\"line\">2019-09-13T10:54:01.751||main:10</span><br><span class=\"line\">2019-09-13T10:54:01.774||main:11</span><br><span class=\"line\">2019-09-13T10:54:01.862||ForkJoinPool.commonPool-worker-5:6</span><br><span class=\"line\">2019-09-13T10:54:02.203||ForkJoinPool.commonPool-worker-5:15</span><br><span class=\"line\">2019-09-13T10:54:02.285||ForkJoinPool.commonPool-worker-6:1</span><br><span class=\"line\">2019-09-13T10:54:02.407||ForkJoinPool.commonPool-worker-6:0</span><br><span class=\"line\">2019-09-13T10:54:02.479||ForkJoinPool.commonPool-worker-1:5</span><br><span class=\"line\">2019-09-13T10:54:02.496||ForkJoinPool.commonPool-worker-2:14</span><br><span class=\"line\">2019-09-13T10:54:02.518||ForkJoinPool.commonPool-worker-4:13</span><br><span class=\"line\">2019-09-13T10:54:02.732||main:9</span><br><span class=\"line\">2019-09-13T10:54:02.740||ForkJoinPool.commonPool-worker-7:4</span><br><span class=\"line\">2019-09-13T10:54:02.791||ForkJoinPool.commonPool-worker-3:2</span><br><span class=\"line\">2019-09-13T10:54:03.178||ForkJoinPool.commonPool-worker-5:12</span><br><span class=\"line\">2019-09-13T10:54:03.743||ForkJoinPool.commonPool-worker-1:8</span><br><span class=\"line\">2019-09-13T10:54:04.003||ForkJoinPool.commonPool-worker-6:3</span><br></pre></td></tr></table></figure>\n\n<p>　　结论：会有7个 ForkJoinPool.commonPool-worker 线程和1个主线程main一起执行任务。并且是强占式【工作窃取法】的执行任务：如上线程5、主线程执行了各3个任务，其他有2个或一个的。</p>\n<p>3、示例三、接收消息队列消息，每次消息个数n个，每个消息是一个100个的list<String>,接收时候使用parallelStream消费并发处理</p>\n<p>发送消息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void testMq() throws Exception &#123;</span><br><span class=\"line\">    for (int j &#x3D; 0; j &lt; 1; j++) &#123;</span><br><span class=\"line\">        List&lt;String&gt; list &#x3D; Lists.newArrayList();</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; 100; i++) &#123;</span><br><span class=\"line\">            list.add(j+&quot;___________&quot;+i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        producerMessageService.sendMessage(&quot;test_parallel&quot;, UUID.randomUUID().toString(), JSON.toJSONString(list));</span><br><span class=\"line\">        Thread.sleep(1000);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    logger.error(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;生产 ok&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    Thread.sleep(2000000000);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接收消费</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public void onMessage(List&lt;Message&gt; messages) throws Exception &#123;</span><br><span class=\"line\">    if (messages &#x3D;&#x3D; null || messages.isEmpty()) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; messages.size(); i++) &#123;</span><br><span class=\"line\">        Message message &#x3D; messages.get(i);</span><br><span class=\"line\">        logger.info(String.format(&quot;收到一条消息,消息主题（队列名）：%s,内容是：%s&quot;, message.getTopic(), message.getText()));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;String&gt; strings &#x3D; JSONArray.parseArray(message.getText(), String.class);</span><br><span class=\"line\">        strings.parallelStream().forEach(p -&gt; &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Thread.sleep(2000);</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            logger.error(LocalDateTime.now() + &quot;_______________&quot; + Thread.currentThread().getName() + &quot;:&quot; + p);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　说明：</p>\n<p>　　　　发送消息，1s后会发送完毕，此时如果有订阅就会出现一条消息积压。</p>\n<p>　　　　订阅消息者，订阅后会收到词条消息，此时如果正常执行完毕（不论使用不使用多线程）消息积压就没有了，因为一般消息监听会在方法正常执行完毕后，使用消息Id将此条消息从订阅队列中移除。</p>\n<p>　　　　　　接收到1条消息，里面会有一个jsonstring，反序列化为List，大小是100，交给parallelStream处理，此时会有8个线程处理【如果是8核机器】，处理速度大约是2秒8个。其余的92进入workQueue中等待处理。</p>\n<p>　　　　　　此时如果程序中断，订阅的消息不会被消费使用，下次重连时，需要做已处理消息的去重。</p>\n<p>　　　　　　此时如果有新消息发送过来，也会在积压中，不会被消息消费。</p>\n<p> 4、示例四、从a中100个数找出整除5的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void testExec() throws ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">    List&lt;Integer&gt; a &#x3D; Lists.newArrayList();</span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; 100; i++) &#123;</span><br><span class=\"line\">        a.add(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    List&lt;Integer&gt; b &#x3D; Lists.newArrayList();</span><br><span class=\"line\">    a.parallelStream().forEach(p -&gt; &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Thread.sleep(100);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (p % 5 &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">            b.add(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;+b.size());</span><br><span class=\"line\">    b.forEach(p -&gt; System.out.print(p+&quot; &quot;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：正确应该是20</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;18</span><br><span class=\"line\">15 90 45 30 25 35 85 75 0 40 5 80 95 20 60 70 50 55</span><br></pre></td></tr></table></figure>\n\n\n\n<p>对此运行结果不一致，以及会有多线程问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.ArrayIndexOutOfBoundsException</span><br><span class=\"line\">    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class=\"line\">　　……</span><br><span class=\"line\"></span><br><span class=\"line\">Caused by: java.lang.ArrayIndexOutOfBoundsException: 15</span><br><span class=\"line\">    at java.util.ArrayList.add(ArrayList.java:463)</span><br><span class=\"line\">    at com.github.bjlhx15.common.thread.juc.collection.jdk8stream.TStreamTest.lambda$testExec$6(TStreamTest.java:118)</span><br><span class=\"line\">    at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)</span><br><span class=\"line\">    at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)</span><br><span class=\"line\">    at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)</span><br><span class=\"line\">    at java.util.stream.ForEachOps$ForEachTask.compute(ForEachOps.java:291)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>原因：parallelStream 并行执行，多线程异步，可能没有b添加完毕就遍历，ArrayList不是线程安全的</p>\n<p>修正：</p>\n<p>　　方案一、在遍历前，需全部执行完毕【串行】</p>\n<p>　　　　将 parallelStream 改为 stream串行处理【不可取，处理速度慢】</p>\n<p>　　方案二、在遍历前，需全部执行完毕</p>\n<p>　　　　继承 RecursiveTask或者RecursiveAction写任务　　　　</p>\n<p>　　方案三、将ArrayList替换安全集合CopyOnWriteArrayLIst</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; b &#x3D; Lists.newCopyOnWriteArrayList();</span><br></pre></td></tr></table></figure>\n\n<p>　　　　此时运行就会出现正确结果。按理说应该会有结果不准确问题吧。但是没有，个人理解，因为是每次8个同时执行，所以即使最后一次主线程提前结束，也有其他线程在锁着b，所以最后执行b的操作会有等待</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JDK1-8-parallelStream-与-fork-join-框架\"><a href=\"#JDK1-8-parallelStream-与-fork-join-框架\" class=\"headerlink\" title=\"JDK1.8 parallelStream 与 fork/join 框架\"></a>JDK1.8 parallelStream 与 fork/join 框架</h2><h3 id=\"一、JDK8开启并行串行流\"><a href=\"#一、JDK8开启并行串行流\" class=\"headerlink\" title=\"一、JDK8开启并行串行流\"></a>一、JDK8开启并行串行流</h3><p>tream是java8中新增加的一个特性,被java猿统称为流.</p>\n<p>　　Stream 不是集合元素，它不是数据结构并不保存数据，它是有关算法和计算的，它更像一个高级版本的 Iterator。原始版本的 Iterator，用户只能显式地一个一个遍历元素并对其执行某些操作；高级版本的 Stream，用户只要给出需要对其包含的元素执行什么操作，比如 “过滤掉长度大于 10 的字符串”、“获取每个字符串的首字母”等，Stream 会隐式地在内部进行遍历，做出相应的数据转换。</p>\n<p>　　Stream 就如同一个迭代器（Iterator），单向，不可往复，数据只能遍历一次，遍历过一次后即用尽了，就好比流水从面前流过，一去不复返。</p>\n<p>　　而和迭代器又不同的是，Stream 可以并行化操作，迭代器只能命令式地、串行化操作。顾名思义，当使用串行方式去遍历时，每个 item 读完后再读下一个 item。而使用并行去遍历时，数据会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出。Stream 的并行操作依赖于 Java7 中引入的 Fork/Join 框架（JSR166y）来拆分任务和加速处理过程。Java 的并行 API 演变历程基本如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.0</span>-<span class=\"number\">1.4</span> 中的 java.lang.Thread  </span><br><span class=\"line\"><span class=\"number\">5.0</span> 中的 java.util.concurrent  </span><br><span class=\"line\"><span class=\"number\">6.0</span> 中的 Phasers 等  </span><br><span class=\"line\"><span class=\"number\">7.0</span> 中的 Fork/Join 框架  </span><br><span class=\"line\"><span class=\"number\">8.0</span> 中的 Lambda</span><br></pre></td></tr></table></figure>\n\n<p>Stream 的另外一大特点是，数据源本身可以是无限的。</p>\n<h4 id=\"1-1-什么是parallelStream\"><a href=\"#1-1-什么是parallelStream\" class=\"headerlink\" title=\"1.1 什么是parallelStream\"></a>1.1 什么是parallelStream</h4><p>parallelStream其实就是一个并行执行的流.它通过默认的ForkJoinPool,可能提高你的多线程任务的速度.实际是多线程，注意线程安全问题</p>\n<p>　　在从stream和parallelStream方法中进行选择时,我们可以考虑以下几个问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　1. 是否需要并行？  </span><br><span class=\"line\">　　2. 任务之间是否是独立的？是否会引起任何竞态条件？  </span><br><span class=\"line\">　　3. 结果是否取决于任务的调用顺序？</span><br></pre></td></tr></table></figure>\n\n<p>　　对于问题1，需要弄清楚要解决的问题是什么，数据量有多大，计算的特点是什么？并不是所有的问题都适合使用并发程序来求解，比如当数据量不大时，顺序执行往往比并行执行更快。毕竟，准备线程池和其它相关资源也是需要时间的。但是，当任务涉及到I/O操作并且任务之间不互相依赖时，那么并行化就是一个不错的选择。通常而言，将这类程序并行化之后，执行速度会提升好几个等级。</p>\n<p>　　对于问题2，如果任务之间是独立的，并且代码中不涉及到对同一个对象的某个状态或者某个变量的更新操作，那么就表明代码是可以被并行化的。</p>\n<p>　　对于问题3，由于在并行环境中任务的执行顺序是不确定的，因此对于依赖于顺序的任务而言，并行化也许不能给出正确的结果。　　</p>\n<p>　　场景：默认值适用的场景是CPU密集型的，而一般的Web项目是IO密集型的（一般的Web项目都是需要跟数据库打交道的，针对数据库的操作主要就都是IO，而对CPU的消耗并不高）。</p>\n<p>　　当不能使用默认值的时候，需要开发人员额外去了解parallelStream的用法，如下：</p>\n<h4 id=\"1-2-parallelStream作用\"><a href=\"#1-2-parallelStream作用\" class=\"headerlink\" title=\"1.2 parallelStream作用\"></a>1.2 parallelStream作用</h4><p>Stream具有平行处理能力，处理的过程会分而治之，也就是将一个大任务切分成多个小任务，这表示每个任务都是一个操作，因此像以下的程式片段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; numbers &#x3D; Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);</span><br><span class=\"line\">numbers.parallelStream()</span><br><span class=\"line\">       .forEach(out::println);</span><br></pre></td></tr></table></figure>\n\n<p>　　得到的展示顺序不一定会是1、2、3、4、5、6、7、8、9，而可能是任意的顺序，就forEach()这个操作來讲，如果平行处理时，希望最后顺序是按照原来Stream的数据顺序，那可以调用forEachOrdered()。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; numbers &#x3D; Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);</span><br><span class=\"line\">numbers.parallelStream()</span><br><span class=\"line\">       .forEachOrdered(out::println);</span><br></pre></td></tr></table></figure>\n\n<p>　　注意:如果forEachOrdered()中间有其他如filter()的中介操作，会试着平行化处理，然后最终forEachOrdered()会以原数据顺序处理，因此，使用forEachOrdered()这类的有序处理,可能会（或完全失去）失去平行化的一些优势，实际上中介操作亦有可能如此，例如sorted()方法。</p>\n<h4 id=\"1-3-开启串行流和并行流：\"><a href=\"#1-3-开启串行流和并行流：\" class=\"headerlink\" title=\"1.3 开启串行流和并行流：\"></a>1.3 开启串行流和并行流：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testStream</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; list = getList();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 串行流</span></span><br><span class=\"line\">    list.stream();</span><br><span class=\"line\">    list.stream().sequential();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 并行流</span></span><br><span class=\"line\">    list.stream().parallel();</span><br><span class=\"line\">    list.parallelStream().reduce(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 串行流执行</span></span><br><span class=\"line\">    list.stream().reduce((first, second) -&gt; first+second);/</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 并行流执行</span></span><br><span class=\"line\">    list.parallelStream().reduce((first, second) -&gt; first+second);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-流处理\"><a href=\"#1-2-流处理\" class=\"headerlink\" title=\"1.2 流处理\"></a>1.2 流处理</h4><p>因为比较关心并行流的实现，所以看并行流的代码：</p>\n<p>java.util.stream.ReduceOps.ReduceOp</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReduceOp</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">R</span>, <span class=\"title\">S</span> <span class=\"keyword\">extends</span> <span class=\"title\">AccumulatingSink</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">R</span>, <span class=\"title\">S</span>&gt;&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">TerminalOp</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">R</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> StreamShape inputShape;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Create a &#123;<span class=\"doctag\">@code</span> ReduceOp&#125; of the specified stream shape which uses</span></span><br><span class=\"line\"><span class=\"comment\">     * the specified &#123;<span class=\"doctag\">@code</span> Supplier&#125; to create accumulating sinks.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> shape The shape of the stream pipeline</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ReduceOp(StreamShape shape) &#123;</span><br><span class=\"line\">        inputShape = shape;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> S <span class=\"title\">makeSink</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> StreamShape <span class=\"title\">inputShape</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inputShape;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;P_IN&gt; <span class=\"function\">R <span class=\"title\">evaluateSequential</span><span class=\"params\">(PipelineHelper&lt;T&gt; helper,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                       Spliterator&lt;P_IN&gt; spliterator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helper.wrapAndCopyInto(makeSink(), spliterator).get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;P_IN&gt; <span class=\"function\">R <span class=\"title\">evaluateParallel</span><span class=\"params\">(PipelineHelper&lt;T&gt; helper,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     Spliterator&lt;P_IN&gt; spliterator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里new出了一个 ReduceTask</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ReduceTask&lt;&gt;(<span class=\"keyword\">this</span>, helper, spliterator).invoke().get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>名称上看，这是个task任务（java.util.stream.ReduceOps.ReduceTask），再看下类图：</p>\n<p><img src=\"/images/reduceTask-%E7%B1%BB%E5%9B%BE.png\" alt=\"58929987340\"></p>\n<p>看到类图结构加上熟悉fork/join框架，大概明白了stream的并行流实现了，借助于fork/join</p>\n<h3 id=\"二、Fork-Join-框架\"><a href=\"#二、Fork-Join-框架\" class=\"headerlink\" title=\"二、Fork/Join 框架\"></a>二、Fork/Join 框架</h3><p>Fork/Join框架是Java7提供了的一个用于并行执行任务的框架， 是一个把大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务结果的框架。</p>\n<p>它同ThreadPoolExecutor一样，也实现了Executor和ExecutorService接口。它使用了一个无限队列来保存需要执行的任务，而线程的数量则是通过构造函数传入，如果没有向构造函数中传入希望的线程数量，那么当前计算机可用的CPU数量会被设置为线程数量作为默认值。</p>\n<p><img src=\"/images/forkjoin_%E4%BB%BB%E5%8A%A1%E6%8B%86%E5%88%86.png\" alt=\"img\"></p>\n<h4 id=\"2-1分治法\"><a href=\"#2-1分治法\" class=\"headerlink\" title=\"2.1分治法\"></a>2.1分治法</h4><p><code>ForkJoinPool</code>主要用来使用分治法(Divide-and-Conquer Algorithm)来解决问题。</p>\n<p>　　典型的应用比如快速排序算法。这里的要点在于，ForkJoinPool需要使用相对少的线程来处理大量的任务。比如要对1000万个数据进行排序，那么会将这个任务分割成两个500万的排序任务和一个针对这两组500万数据的合并任务。以此类推，对于500万的数据也会做出同样的分割处理，到最后会设置一个阈值来规定当数据规模到多少时，停止这样的分割处理。比如，当元素的数量小于10时，会停止分割，转而使用插入排序对它们进行排序。那么到最后，所有的任务加起来会有大概2000000+个。问题的关键在于，对于一个任务而言，只有当它所有的子任务完成之后，它才能够被执行。</p>\n<p>　　所以当使用ThreadPoolExecutor时，使用分治法会存在问题，因为ThreadPoolExecutor中的线程无法像任务队列中再添加一个任务并且在等待该任务完成之后再继续执行。而使用ForkJoinPool时，就能够让其中的线程创建新的任务，并挂起当前的任务，此时线程就能够从队列中选择子任务执行。</p>\n<p>那么使用ThreadPoolExecutor或者ForkJoinPool，会有什么性能的差异呢？</p>\n<p>　　首先，使用ForkJoinPool能够使用数量有限的线程来完成非常多的具有父子关系的任务，比如使用4个线程来完成超过200万个任务。但是，使用ThreadPoolExecutor时，是不可能完成的，因为ThreadPoolExecutor中的Thread无法选择优先执行子任务，需要完成200万个具有父子关系的任务时，也需要200万个线程，显然这是不可行的。</p>\n<p>​    尝试改变JDK8的工作线程数量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_FORK_JOIN_PARALLELISM = <span class=\"string\">\"java.util.concurrent.ForkJoinPool.common.parallelism\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 设置线程数</span></span><br><span class=\"line\">System.setProperty(DEFAULT_FORK_JOIN_PARALLELISM, (Runtime.getRuntime().availableProcessors() * <span class=\"number\">2</span>) + <span class=\"string\">\"\"</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-2-工作窃取法\"><a href=\"#2-2-工作窃取法\" class=\"headerlink\" title=\"2.2 工作窃取法\"></a>2.2 工作窃取法</h4><p>　　forkjoin最核心的地方就是利用了现代硬件设备多核,在一个操作时候会有空闲的cpu,那么如何利用好这个空闲的cpu就成了提高性能的关键,而这里我们要提到的工作窃取（work-stealing）算法就是整个forkjion框架的核心理念,工作窃取（work-stealing）算法是指某个线程从其他队列里窃取任务来执行。</p>\n<p>　　那么为什么需要使用工作窃取算法呢？</p>\n<p>　　假如我们需要做一个比较大的任务，我们可以把这个任务分割为若干互不依赖的子任务，为了减少线程间的竞争，于是把这些子任务分别放到不同的队列里，并为每个队列创建一个单独的线程来执行队列里的任务，线程和队列一一对应，比如A线程负责处理A队列里的任务。但是有的线程会先把自己队列里的任务干完，而其他线程对应的队列里还有任务等待处理。干完活的线程与其等着，不如去帮其他线程干活，于是它就去其他线程的队列里窃取一个任务来执行。而在这时它们会访问同一个队列，所以为了减少窃取任务线程和被窃取任务线程之间的竞争，通常会使用双端队列，被窃取任务线程永远从双端队列的头部拿任务执行，而窃取任务的线程永远从双端队列的尾部拿任务执行。</p>\n<p>　　工作窃取的运行流程图如下：</p>\n<p><img src=\"/images/forkjoin_%E5%B7%A5%E4%BD%9C%E7%AA%83%E5%8F%96%EF%BC%88%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97%EF%BC%89.png\" alt=\"img\"></p>\n<p>　　工作窃取算法的优点：充分利用线程进行并行计算，并减少了线程间的竞争；</p>\n<p>　　工作窃取算法的缺点：在某些情况下还是存在竞争，比如双端队列里只有一个任务时。并且消耗了更多的系统资源，比如创建多个线程和多个双端队列。</p>\n<h4 id=\"2-3-Fork-Join-涉及到的关键名称\"><a href=\"#2-3-Fork-Join-涉及到的关键名称\" class=\"headerlink\" title=\"2.3 Fork/Join 涉及到的关键名称\"></a>2.3 Fork/Join 涉及到的关键名称</h4><p>　　<code>ForkJoinPool</code>： 用来执行Task，或生成新的ForkJoinWorkerThread，执行 ForkJoinWorkerThread 间的 work-stealing 逻辑。ForkJoinPool 不是为了替代 ExecutorService，而是它的补充，在某些应用场景下性能比 ExecutorService 更好。</p>\n<p>　　<code>ForkJoinTask</code>： 执行具体的分支逻辑，声明以同步/异步方式进行执行</p>\n<p>　　<code>ForkJoinWorkerThread</code>： 是 ForkJoinPool 内的 worker thread，执行</p>\n<p>　　<code>ForkJoinTask</code>, 内部有 ForkJoinPool.WorkQueue来保存要执行的ForkJoinTask。</p>\n<p>　　<code>ForkJoinPool.WorkQueue</code>：保存要执行的ForkJoinTask。</p>\n<h4 id=\"2-4-Fork-Join框架的实现原理\"><a href=\"#2-4-Fork-Join框架的实现原理\" class=\"headerlink\" title=\"2.4 Fork/Join框架的实现原理\"></a>2.4 Fork/Join框架的实现原理</h4><p>在Java的Fork/Join框架中，它提供了两个类来帮助我们完成任务分割以及执行任务并合并结果：</p>\n<p>　　1、<code>ForkJoinTask</code>：我们要使用ForkJoin框架，必须首先创建一个ForkJoin任务。它提供在任务中执行fork()和join()操作的机制，通常情况下我们不需要直接继承ForkJoinTask类，而只需要继承它的子类，Fork/Join框架提供了以下两个子类：</p>\n<p>　　　　<code>RecursiveAction</code>：用于没有返回结果的任务。<br>　　　　<code>RecursiveTask</code> ：用于有返回结果的任务。</p>\n<p>　　2、<code>ForkJoinPool</code> ：ForkJoinTask需要通过ForkJoinPool来执行，任务分割出的子任务会添加到当前工作线程所维护的双端队列中，进入队列的头部。当一个工作线程的队列里暂时没有任务时，它会随机从其他工作线程的队列的尾部获取一个任务。</p>\n<p>　　<code>ForkJoinPool</code>由<code>ForkJoinTask</code>数组和<code>ForkJoinWorkerThread</code>数组组成，<code>ForkJoinTask</code>数组负责将存放程序提交给<code>ForkJoinPool</code>，而<code>ForkJoinWorkerThread</code>负责执行这些任务。</p>\n<p>基本思想</p>\n<p>　　<code>ForkJoinPool</code> 的每个工作线程都维护着一个工作队列（<code>WorkQueue</code>），这是一个双端队列（<code>Deque</code>），里面存放的对象是任务（<code>ForkJoinTask</code>）。</p>\n<p>　　每个工作线程在运行中产生新的任务（通常是因为调用了 fork()）时，会放入工作队列的队尾，并且工作线程在处理自己的工作队列时，使用的是 LIFO（<strong>后进先出</strong>） 方式，也就是说每次从队尾取出任务来执行。</p>\n<p>　　每个工作线程在处理自己的工作队列同时，会尝试窃取一个任务（或是来自于刚刚提交到 pool 的任务，或是来自于其他工作线程的工作队列），窃取的任务位于其他线程的工作队列的队首，也就是说工作线程在窃取其他工作线程的任务时，使用的是 FIFO 方式。</p>\n<p>　　在遇到 join() 时，如果需要 join 的任务尚未完成，则会先处理其他任务，并等待其完成。</p>\n<p>　　在既没有自己的任务，也没有可以窃取的任务时，进入休眠。</p>\n<h5 id=\"2-4-1-ForkJoinPool属性说明、工作队列说明、控制中心说明\"><a href=\"#2-4-1-ForkJoinPool属性说明、工作队列说明、控制中心说明\" class=\"headerlink\" title=\"2.4.1 ForkJoinPool属性说明、工作队列说明、控制中心说明\"></a>2.4.1 ForkJoinPool属性说明、工作队列说明、控制中心说明</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Instance fields</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> ctl;                   <span class=\"comment\">// 控制中心：非常重要，看下图解析</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> runState;               <span class=\"comment\">// 负数是shutdown，其余都是2的次方</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> config;                    <span class=\"comment\">// 配置：二进制的低16位代表 并行度（parallelism），</span></span><br><span class=\"line\">                                                                                    <span class=\"comment\">//高16位：mode可选FIFO_QUEUE（1 &lt;&lt; 16）和LIFO_QUEUE（1 &lt;&lt; 31），默认是LIFO_QUEUE</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> indexSeed;                       <span class=\"comment\">// 生成worker的queue索引</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> WorkQueue[] workQueues;     <span class=\"comment\">// main registry</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> ForkJoinWorkerThreadFactory factory;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> UncaughtExceptionHandler ueh;  <span class=\"comment\">// per-worker UEH</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> String workerNamePrefix;       <span class=\"comment\">// to create worker name string</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> AtomicLong stealCounter;    <span class=\"comment\">// also used as sync monitor</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"2-4-1-1-工作队列workQueues\"><a href=\"#2-4-1-1-工作队列workQueues\" class=\"headerlink\" title=\"2.4.1.1 工作队列workQueues\"></a>2.4.1.1 工作队列workQueues</h6><p>用于保存向ForkJoinPool提交的任务，而具体的执行由ForkJoinWorkerThread执行，而ForkJoinWorkerThreadFactory可以用于生产出ForkJoinWorkerThread：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ForkJoinWorkerThreadFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * Returns a new worker thread operating in the given pool.</span></span><br><span class=\"line\"><span class=\"comment\">        *</span></span><br><span class=\"line\"><span class=\"comment\">        * <span class=\"doctag\">@param</span> pool the pool this thread works in</span></span><br><span class=\"line\"><span class=\"comment\">        * <span class=\"doctag\">@return</span> the new worker thread</span></span><br><span class=\"line\"><span class=\"comment\">        * <span class=\"doctag\">@throws</span> NullPointerException if the pool is null</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ForkJoinWorkerThread <span class=\"title\">newThread</span><span class=\"params\">(ForkJoinPool pool)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/292888-20190913110608100-591376294.png\" alt=\"img\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Instance fields</span></span><br><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> scanState;    <span class=\"comment\">// 负数：inactive, 非负数：active, 其中奇数代表scanning</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> stackPred;             <span class=\"comment\">// sp = (int)ctl, 前一个队列栈的标示信息，包含版本号、是否激活、以及队列索引</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> nsteals;               <span class=\"comment\">// 窃取的任务数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> hint;                  <span class=\"comment\">// 一个随机数，用来帮助任务窃取，在 helpXXXX()的方法中会用到</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> config;                <span class=\"comment\">// 配置：二进制的低16位代表 在 queue[] 中的索引，</span></span><br><span class=\"line\"><span class=\"comment\">// 高16位：mode可选FIFO_QUEUE（1 &lt;&lt; 16）和LIFO_QUEUE（1 &lt;&lt; 31），默认是LIFO_QUEUE</span></span><br><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> qlock;        <span class=\"comment\">// 锁定标示位：1: locked, &lt; 0: terminate; else 0</span></span><br><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> base;         <span class=\"comment\">// index of next slot for poll</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> top;                   <span class=\"comment\">// index of next slot for push</span></span><br><span class=\"line\">ForkJoinTask&lt;?&gt;[] array;   <span class=\"comment\">// 任务列表</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-4-1-2-控制中心ctl\"><a href=\"#2-4-1-2-控制中心ctl\" class=\"headerlink\" title=\"2.4.1.2 控制中心ctl\"></a>2.4.1.2 控制中心ctl</h6><p><img src=\"/images/292888-20190913111130827-1005682912.png\" alt=\"img\"></p>\n<h6 id=\"2-4-1-3-方法说明\"><a href=\"#2-4-1-3-方法说明\" class=\"headerlink\" title=\"2.4.1.3 方法说明\"></a>2.4.1.3 方法说明</h6><p>队列与关键任务调用说明</p>\n<p><img src=\"/images/292888-20190913110836624-260052587.png\" alt=\"img\"></p>\n<p>2.4.1.4 externalPush || externalSubmit</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">externalPush</span><span class=\"params\">(ForkJoinTask&lt;?&gt; task)</span> </span>&#123;</span><br><span class=\"line\">        WorkQueue[] ws; WorkQueue q; <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">        <span class=\"comment\">//我们以前常用的Random，在并发下，多个线程同时计算种子需要用到同一个原子变量。</span></span><br><span class=\"line\">        <span class=\"comment\">//由于更新操作使用CAS，同时执行只有一个线程成功，其他线程的大量自旋造成性能损失，ThreadLocalRandom继承Random，对此进行了改进。</span></span><br><span class=\"line\">                <span class=\"comment\">//ThreadLocalRandom运用了ThreadLocal，每个线程内部维护一个种子变量，多线程下计算新种子时使用线程自己的种子变量进行更新，避免了竞争。</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> r = ThreadLocalRandom.getProbe();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rs = runState;</span><br><span class=\"line\">        <span class=\"comment\">// 外部提交的task，肯定会到偶数位下标的队列上</span></span><br><span class=\"line\">        <span class=\"comment\">// SQMASK = 0x007e = 1111110，任何数和 SQMASK 进行 &amp; 运算 都会是偶数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((ws = workQueues) != <span class=\"keyword\">null</span> &amp;&amp; (m = (ws.length - <span class=\"number\">1</span>)) &gt;= <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">            (q = ws[m &amp; r &amp; SQMASK]) != <span class=\"keyword\">null</span> &amp;&amp; r != <span class=\"number\">0</span> &amp;&amp; rs &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">            <span class=\"comment\">//队列上锁</span></span><br><span class=\"line\">            U.compareAndSwapInt(q, QLOCK, <span class=\"number\">0</span>, <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            ForkJoinTask&lt;?&gt;[] a; <span class=\"keyword\">int</span> am, n, s;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((a = q.array) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                (am = a.length - <span class=\"number\">1</span>) &gt; (n = (s = q.top) - q.base)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> j = ((am &amp; s) &lt;&lt; ASHIFT) + ABASE;</span><br><span class=\"line\">                <span class=\"comment\">//把 task 放到队列的 top端</span></span><br><span class=\"line\">                U.putOrderedObject(a, j, task);</span><br><span class=\"line\">                U.putOrderedInt(q, QTOP, s + <span class=\"number\">1</span>);</span><br><span class=\"line\">                U.putIntVolatile(q, QLOCK, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">                    signalWork(ws, q);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//队列解锁</span></span><br><span class=\"line\">            U.compareAndSwapInt(q, QLOCK, <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        externalSubmit(task);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-4-1-5-registerWorker\"><a href=\"#2-4-1-5-registerWorker\" class=\"headerlink\" title=\"2.4.1.5 registerWorker\"></a>2.4.1.5 registerWorker</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> WorkQueue <span class=\"title\">registerWorker</span><span class=\"params\">(ForkJoinWorkerThread wt)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//......</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((ws = workQueues) != <span class=\"keyword\">null</span> &amp;&amp; (n = ws.length) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> s = indexSeed += SEED_INCREMENT;  <span class=\"comment\">// unlikely to collide</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> m = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">// worker的queue肯定放在pool中的queue[]中的奇数下标</span></span><br><span class=\"line\">                  <span class=\"comment\">// m = ws.lenght - 1, ws.lenght 肯定是偶数，则m 肯定是奇数</span></span><br><span class=\"line\">                <span class=\"comment\">// 1的二进制位：00000001, 所以任何数 \"|\" 1 都是奇数</span></span><br><span class=\"line\">                <span class=\"comment\">// 所以 奇数 &amp; 奇数 ， 1&amp;1 = 1，所以i肯定是奇数</span></span><br><span class=\"line\">                i = ((s &lt;&lt; <span class=\"number\">1</span>) | <span class=\"number\">1</span>) &amp; m;               <span class=\"comment\">// odd-numbered indices</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ws[i] != <span class=\"keyword\">null</span>) &#123;                  <span class=\"comment\">// collision</span></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> probes = <span class=\"number\">0</span>;                   <span class=\"comment\">// step by approx half n</span></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> step = (n &lt;= <span class=\"number\">4</span>) ? <span class=\"number\">2</span> : ((n &gt;&gt;&gt; <span class=\"number\">1</span>) &amp; EVENMASK) + <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果下标已经有队列，则重新生成奇数下标</span></span><br><span class=\"line\">                    <span class=\"comment\">// step肯定为偶数：EVENMASK：0xfffe：1111111111111110</span></span><br><span class=\"line\">                      <span class=\"comment\">// 所以 奇数+偶数，奇偶性不变</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (ws[i = (i + step) &amp; m] != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (++probes &gt;= n) &#123;</span><br><span class=\"line\">                            workQueues = ws = Arrays.copyOf(ws, n &lt;&lt;= <span class=\"number\">1</span>);</span><br><span class=\"line\">                            m = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">                            probes = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//...</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"comment\">//......</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"2-4-1-6-scan\"><a href=\"#2-4-1-6-scan\" class=\"headerlink\" title=\"2.4.1.6 scan\"></a>2.4.1.6 scan</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ForkJoinTask&lt;?&gt; scan(WorkQueue w, <span class=\"keyword\">int</span> r) &#123;</span><br><span class=\"line\">        WorkQueue[] ws; <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((ws = workQueues) != <span class=\"keyword\">null</span> &amp;&amp; (m = ws.length - <span class=\"number\">1</span>) &gt; <span class=\"number\">0</span> &amp;&amp; w != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ss = w.scanState;                     <span class=\"comment\">// initially non-negative</span></span><br><span class=\"line\">               <span class=\"comment\">// k = r &amp; m 。 r是一个随机数，m 是 队列数组长度 - 1；用于定位去哪个 队列 窃取 task</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> origin = r &amp; m, k = origin, oldSum = <span class=\"number\">0</span>, checkSum = <span class=\"number\">0</span>;;) &#123;</span><br><span class=\"line\">                WorkQueue q; ForkJoinTask&lt;?&gt;[] a; ForkJoinTask&lt;?&gt; t;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> b, n; <span class=\"keyword\">long</span> c;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((q = ws[k]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                      <span class=\"comment\">// 如果有还没执行的task，尝试窃取队列q 中的base下标的 task。 即FIFO</span></span><br><span class=\"line\">                    <span class=\"comment\">// i: 在内存中，b下标对应的对象的偏移值。 a.length - 1 的二进制位 永远是 0[1...]s，所以 (a.length - 1) &amp; b = b，主要是保证了b不会越界</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((n = (b = q.base) - q.top) &lt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">                        (a = q.array) != <span class=\"keyword\">null</span>) &#123;      <span class=\"comment\">// non-empty</span></span><br><span class=\"line\">                        <span class=\"keyword\">long</span> i = (((a.length - <span class=\"number\">1</span>) &amp; b) &lt;&lt; ASHIFT) + ABASE;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((t = ((ForkJoinTask&lt;?&gt;)</span><br><span class=\"line\">                                  U.getObjectVolatile(a, i))) != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                            q.base == b) &#123;</span><br><span class=\"line\">                               <span class=\"comment\">// ss 是小偷的 scanState，大于0代表当前的worker是激活的</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (ss &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                  <span class=\"comment\">// 把 task 从 队列中取出来，然后队列的base+1，如果被窃取的队列中有多于1个的task，则尝试唤醒其他的worker</span></span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (U.compareAndSwapObject(a, i, t, <span class=\"keyword\">null</span>)) &#123;</span><br><span class=\"line\">                                    q.base = b + <span class=\"number\">1</span>;</span><br><span class=\"line\">                                    <span class=\"keyword\">if</span> (n &lt; -<span class=\"number\">1</span>)       <span class=\"comment\">// signal others</span></span><br><span class=\"line\">                                        signalWork(ws, q);</span><br><span class=\"line\">                                    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                              <span class=\"comment\">// ss小于0代表当前的worker是未激活的，并且当前是第一次扫描，这时候尝试激活worker</span></span><br><span class=\"line\">                            <span class=\"comment\">// oldSum: 上一次遍历周期的 base 值的和。</span></span><br><span class=\"line\">                            <span class=\"comment\">// (int) c : 可以拿到当前栈顶的空闲worker。sp = (int) c</span></span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldSum == <span class=\"number\">0</span> &amp;&amp;   <span class=\"comment\">// try to activate</span></span><br><span class=\"line\">                                     w.scanState &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                                tryRelease(c = ctl, ws[m &amp; (<span class=\"keyword\">int</span>)c], AC_UNIT);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (ss &lt; <span class=\"number\">0</span>)                   <span class=\"comment\">// refresh</span></span><br><span class=\"line\">                            ss = w.scanState;</span><br><span class=\"line\">                        <span class=\"comment\">// 更新随机值，重新初始化所有控制变量，重新定位队列</span></span><br><span class=\"line\">                        r ^= r &lt;&lt; <span class=\"number\">1</span>; r ^= r &gt;&gt;&gt; <span class=\"number\">3</span>; r ^= r &lt;&lt; <span class=\"number\">10</span>;</span><br><span class=\"line\">                        origin = k = r &amp; m;           <span class=\"comment\">// move and rescan</span></span><br><span class=\"line\">                        oldSum = checkSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    checkSum += b;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 每次没有窃取到task的时候，都会k+1（k值不会超过m），当k遍历了一圈还没有steal到任务，则当前小偷worker是过剩的，则inactive这个小偷worker</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((k = (k + <span class=\"number\">1</span>) &amp; m) == origin) &#123;    <span class=\"comment\">// continue until stable</span></span><br><span class=\"line\">                      <span class=\"comment\">// oldSum == (oldSum = checkSum) 实际上就是 oldSum == checkSum ， oldSum = checkSum</span></span><br><span class=\"line\">                    <span class=\"comment\">// oldSum == checkSum 是判断 这个周期和上个周期 的base和是否一直，如果一直， 说明base可能没有变过</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((ss &gt;= <span class=\"number\">0</span> || (ss == (ss = w.scanState))) &amp;&amp;</span><br><span class=\"line\">                        oldSum == (oldSum = checkSum)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (ss &lt; <span class=\"number\">0</span> || w.qlock &lt; <span class=\"number\">0</span>)    <span class=\"comment\">// already inactive</span></span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> ns = ss | INACTIVE;       <span class=\"comment\">// try to inactivate</span></span><br><span class=\"line\">                        <span class=\"keyword\">long</span> nc = ((SP_MASK &amp; ns) |</span><br><span class=\"line\">                                   (UC_MASK &amp; ((c = ctl) - AC_UNIT)));</span><br><span class=\"line\">                        <span class=\"comment\">// 维护 队列的 stack，可以指向前一个栈顶的队列</span></span><br><span class=\"line\">                        w.stackPred = (<span class=\"keyword\">int</span>)c;         <span class=\"comment\">// hold prev stack top</span></span><br><span class=\"line\">                        U.putInt(w, QSCANSTATE, ns);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (U.compareAndSwapLong(<span class=\"keyword\">this</span>, CTL, c, nc))</span><br><span class=\"line\">                            ss = ns;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span></span><br><span class=\"line\">                            w.scanState = ss;         <span class=\"comment\">// back out</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    checkSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-4-1-7-signalWork\"><a href=\"#2-4-1-7-signalWork\" class=\"headerlink\" title=\"2.4.1.7 signalWork\"></a>2.4.1.7 signalWork</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">signalWork</span><span class=\"params\">(WorkQueue[] ws, WorkQueue q)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> c; <span class=\"keyword\">int</span> sp, i; WorkQueue v; Thread p;</span><br><span class=\"line\">        <span class=\"comment\">// AC是负数，所以 active worker不足</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((c = ctl) &lt; <span class=\"number\">0L</span>) &#123;                       <span class=\"comment\">// too few active</span></span><br><span class=\"line\">            <span class=\"comment\">// sp:第一位是0，没有版本号，没有inactive的worker</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((sp = (<span class=\"keyword\">int</span>)c) == <span class=\"number\">0</span>) &#123;                  <span class=\"comment\">// no idle workers</span></span><br><span class=\"line\">                <span class=\"comment\">//tc: tc不为0，就是代表 total worker - parallelism &lt; 0, 所以需要添加worker</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((c &amp; ADD_WORKER) != <span class=\"number\">0L</span>)            <span class=\"comment\">// too few workers</span></span><br><span class=\"line\">                    tryAddWorker(c);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ws == <span class=\"keyword\">null</span>)                            <span class=\"comment\">// unstarted/terminated</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 取栈顶的worker，如果下标已经越界或queue为null，线程池都是终止了</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ws.length &lt;= (i = sp &amp; SMASK))         <span class=\"comment\">// terminated</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((v = ws[i]) == <span class=\"keyword\">null</span>)                   <span class=\"comment\">// terminating</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 新的scanState，版本+1，设置状态为激活，INACTIVE = 1 &lt;&lt; 31，~INACTIVE = 01111111....</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> vs = (sp + SS_SEQ) &amp; ~INACTIVE;        <span class=\"comment\">// next scanState</span></span><br><span class=\"line\">            <span class=\"comment\">// 确认 worker的 sp没有变化</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> d = sp - v.scanState;                  <span class=\"comment\">// screen CAS</span></span><br><span class=\"line\">            <span class=\"comment\">// 生成新的 ctl，(UC_MASK &amp; (c + AC_UNIT))设置 高32位， (SP_MASK &amp; v.stackPred)设置低32位</span></span><br><span class=\"line\">            <span class=\"keyword\">long</span> nc = (UC_MASK &amp; (c + AC_UNIT)) | (SP_MASK &amp; v.stackPred);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d == <span class=\"number\">0</span> &amp;&amp; U.compareAndSwapLong(<span class=\"keyword\">this</span>, CTL, c, nc)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//激活worker</span></span><br><span class=\"line\">                v.scanState = vs;                      <span class=\"comment\">// activate v</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((p = v.parker) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    U.unpark(p);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//当前queue没有task 需要执行了，则停止signal</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (q != <span class=\"keyword\">null</span> &amp;&amp; q.base == q.top)          <span class=\"comment\">// no more work</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-4-1-8-ForkJoinTask的fork方法实现原理\"><a href=\"#2-4-1-8-ForkJoinTask的fork方法实现原理\" class=\"headerlink\" title=\"2.4.1.8 ForkJoinTask的fork方法实现原理\"></a>2.4.1.8 ForkJoinTask的fork方法实现原理</h6><p>当我们调用ForkJoinTask的fork方法时，程序会把任务放在ForkJoinWorkerThread的pushTask的workQueue中，异步地执行这个任务，然后立即返回结果，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ForkJoinTask&lt;V&gt; <span class=\"title\">fork</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Thread t;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((t = Thread.currentThread()) <span class=\"keyword\">instanceof</span> ForkJoinWorkerThread)</span><br><span class=\"line\">        ((ForkJoinWorkerThread)t).workQueue.push(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        ForkJoinPool.common.externalPush(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>若当前线程是ForkJoinWorkerThread线程，则强制类型转换（向下转换）成ForkJoinWorkerThread，然后将任务push到这个线程负责的队列里面去，在ForkJoinWorkerThread类中有一个pool和一个workQueue字段：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 线程工作的ForkJoinPool</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> ForkJoinPool pool;                <span class=\"comment\">// the pool this thread works in</span></span><br><span class=\"line\"><span class=\"comment\">// 工作窃取队列</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> ForkJoinPool.WorkQueue workQueue; <span class=\"comment\">// work-stealing mechanics</span></span><br></pre></td></tr></table></figure>\n\n<p>pushTask方法把当前任务存放在ForkJoinTask数组队列里。然后再调用ForkJoinPool的signalWork()方法唤醒或创建一个工作线程来执行任务。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(ForkJoinTask&lt;?&gt; task)</span> </span>&#123;</span><br><span class=\"line\">    ForkJoinTask&lt;?&gt;[] a; ForkJoinPool p;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = base, s = top, n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((a = array) != <span class=\"keyword\">null</span>) &#123;    <span class=\"comment\">// ignore if queue removed</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = a.length - <span class=\"number\">1</span>;     <span class=\"comment\">// fenced write for task visibility</span></span><br><span class=\"line\">        U.putOrderedObject(a, ((m &amp; s) &lt;&lt; ASHIFT) + ABASE, task);</span><br><span class=\"line\">        U.putOrderedInt(<span class=\"keyword\">this</span>, QTOP, s + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((n = s - b) &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((p = pool) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                p.signalWork(p.workQueues, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n &gt;= m)</span><br><span class=\"line\">            growArray();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法的主要功能就是将当前任务存放在ForkJoinTask数组array里。然后再调用ForkJoinPool的signalWork()方法唤醒或创建一个工作线程来执行任务。</p>\n<h6 id=\"2-4-1-9-ForkJoinTask的join方法实现原理\"><a href=\"#2-4-1-9-ForkJoinTask的join方法实现原理\" class=\"headerlink\" title=\"2.4.1.9 ForkJoinTask的join方法实现原理\"></a>2.4.1.9 ForkJoinTask的join方法实现原理</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">join</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((s = doJoin() &amp; DONE_MASK) != NORMAL)</span><br><span class=\"line\">        reportException(s);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getRawResult();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　首先，它调用了doJoin()方法，通过doJoin()方法得到当前任务的状态来判断返回什么结果，任务状态有四种：已完成（NORMAL），被取消（CANCELLED），信号（SIGNAL）和出现异常（EXCEPTIONAL）：　　</p>\n<p>　　若状态不是NORMAL，则通过reportException(int)方法来处理状态：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">reportException</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == CANCELLED)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> CancellationException();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == EXCEPTIONAL)</span><br><span class=\"line\">        rethrow(getThrowableException());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>如果任务状态是已完成，则直接返回任务结果。</li>\n<li>如果任务状态是被取消，则直接抛出CancellationException。</li>\n<li>如果任务状态是抛出异常，则直接抛出对应的异常。</li>\n</ul>\n<p>　　doJoin()方法的实现代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">doJoin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s; Thread t; ForkJoinWorkerThread wt; ForkJoinPool.WorkQueue w;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (s = status) &lt; <span class=\"number\">0</span> ? s :</span><br><span class=\"line\">        ((t = Thread.currentThread()) <span class=\"keyword\">instanceof</span> ForkJoinWorkerThread) ?</span><br><span class=\"line\">        (w = (wt = (ForkJoinWorkerThread)t).workQueue).</span><br><span class=\"line\">        tryUnpush(<span class=\"keyword\">this</span>) &amp;&amp; (s = doExec()) &lt; <span class=\"number\">0</span> ? s :</span><br><span class=\"line\">        wt.pool.awaitJoin(w, <span class=\"keyword\">this</span>, <span class=\"number\">0L</span>) :</span><br><span class=\"line\">        externalAwaitDone();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>　　在doJoin()方法里，首先通过查看任务的状态，看任务是否已经执行完了，如果执行完了，则直接返回任务状态，如果没有执行完，则从任务数组里取出任务并执行。如果任务顺利执行完成了，则设置任务状态为NORMAL，如果出现异常，则纪录异常，并将任务状态设置为EXCEPTIONAL。</p>\n<p>　　执行任务是通过doExec()方法来完成的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">doExec</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s; <span class=\"keyword\">boolean</span> completed;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((s = status) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            completed = exec();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable rex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> setExceptionalCompletion(rex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (completed)</span><br><span class=\"line\">            s = setCompletion(NORMAL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>真正的执行过程是由exec()方法来完成的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">exec</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>这就是我们需要重写的方法，若是我们的任务继承自RecursiveAction，则我们需要重写RecursiveAction的compute()方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecursiveAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ForkJoinTask</span>&lt;<span class=\"title\">Void</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">5232453952276485070L</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The main computation performed by this task.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">compute</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Always returns &#123;<span class=\"doctag\">@code</span> null&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> null&#125; always</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Void <span class=\"title\">getRawResult</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>; &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Requires null completion value.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setRawResult</span><span class=\"params\">(Void mustBeNull)</span> </span>&#123; &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Implements execution conventions for RecursiveActions.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">exec</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        compute();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>若是我们的任务继承自RecursiveTask，则我们同样需要重写RecursiveTask的compute()方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecursiveTask</span>&lt;<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">ForkJoinTask</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">5232453952276485270L</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The result of the computation.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    V result;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The main computation performed by this task.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the result of the computation</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> V <span class=\"title\">compute</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">getRawResult</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setRawResult</span><span class=\"params\">(V value)</span> </span>&#123;</span><br><span class=\"line\">        result = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Implements execution conventions for RecursiveTask.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">exec</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        result = compute();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过上面的分析可知，执行我们的业务代码是在调用了join()之后的，也就是说，fork仅仅是分割任务，只有当我们执行join的时候，我们的任务才会被执行。</p>\n<h5 id=\"2-4-2-异常处理\"><a href=\"#2-4-2-异常处理\" class=\"headerlink\" title=\"2.4.2 异常处理\"></a>2.4.2 异常处理</h5><p>ForkJoinTask在执行的时候可能会抛出异常，但是我们没办法在主线程里直接捕获异常，所以ForkJoinTask提供了isCompletedAbnormally()方法来检查任务是否已经抛出异常或已经被取消了，并且可以通过ForkJoinTask的getException方法获取异常。使用如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(task.isCompletedAbnormally())&#123;</span><br><span class=\"line\">    System.out.println(task.getException());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>getException方法返回Throwable对象，如果任务被取消了则返回CancellationException。如果任务没有完成或者没有抛出异常则返回null。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Throwable <span class=\"title\">getException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s = status &amp; DONE_MASK;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((s &gt;= NORMAL)    ? <span class=\"keyword\">null</span> :</span><br><span class=\"line\">                (s == CANCELLED) ? <span class=\"keyword\">new</span> CancellationException() :</span><br><span class=\"line\">                getThrowableException());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"2-4-2forkjoin-的使用\"><a href=\"#2-4-2forkjoin-的使用\" class=\"headerlink\" title=\"2.4.2forkjoin 的使用\"></a>2.4.2forkjoin 的使用</h5><p>　ForkJoinPool 使用submit 或 invoke 提交的区别：invoke是同步执行，调用之后需要等待任务完成，才能执行后面的代码；submit是异步执行，只有在Future调用get的时候会阻塞。</p>\n<p>　　这里继承的是RecursiveTask 适用于有返回值的场景；还可以继承RecursiveAction，适合于没有返回值的场景</p>\n<p>　　执行子任务调用fork方法并不是最佳的选择，最佳的选择是invokeAll方法。</p>\n<h5 id=\"2-4-3-示例代码\"><a href=\"#2-4-3-示例代码\" class=\"headerlink\" title=\"2.4.3 示例代码\"></a>2.4.3 示例代码</h5><p>   这个示例是在做某支付任务异步解耦后的业务逻辑校验，这个是一个接收返回的任务 <code>RecursiveTask</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CheckTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecursiveTask</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*  这个是阈值，具体任务列表拆分到什么程度再开始执行</span></span><br><span class=\"line\"><span class=\"comment\">\t\t**/</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> threshold = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    \t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    \t*\t这个是当前处理的集合列表</span></span><br><span class=\"line\"><span class=\"comment\">    \t**/</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;CbVaPaymentFileContent&gt; list;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * 初始化任务对象</span></span><br><span class=\"line\"><span class=\"comment\">        **/</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">CheckTask</span><span class=\"params\">(<span class=\"keyword\">int</span> threshold, List&lt;CbVaPaymentFileContent&gt; list)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == list) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"[list] is null.\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.threshold = threshold &lt;= <span class=\"number\">0</span> ? <span class=\"keyword\">this</span>.threshold : threshold;</span><br><span class=\"line\"><span class=\"comment\">//            this.threshold = list.size() / Runtime.getRuntime().availableProcessors();</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.list = list;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> Integer <span class=\"title\">compute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (list.size() &lt;= threshold) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 处理</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (CbVaPaymentFileContent content : list) &#123;</span><br><span class=\"line\">                    count += process(content);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 分解</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> middle = list.size() / <span class=\"number\">2</span>;</span><br><span class=\"line\">                List&lt;CbVaPaymentFileContent&gt; leftList = list.subList(<span class=\"number\">0</span>, middle);</span><br><span class=\"line\">                List&lt;CbVaPaymentFileContent&gt; rightList = list.subList(middle, list.size());</span><br><span class=\"line\">                CheckTask left = <span class=\"keyword\">new</span> CheckTask(threshold, leftList);</span><br><span class=\"line\">                CheckTask right = <span class=\"keyword\">new</span> CheckTask(threshold, rightList);</span><br><span class=\"line\">                <span class=\"comment\">// left.fork();</span></span><br><span class=\"line\">                <span class=\"comment\">// right.fork();</span></span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">// 这两个方法，使用invokeAll方法的主要原因是为了充分利用线程池，在invokeAll的N个任务中，其中N-1个任务会使用fork()交给其它线程执行，但是，它还会留一个任务自己执行，这样，就充分利用了线程池，保证没有空闲的不干活的线程。</span></span><br><span class=\"line\">                invokeAll(left, right);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 结合</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> left.join() + right.join();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　该代码就是通过Fork/Join框架来计算数组的和，计算耗时4031毫秒。通过该代码作为应用示例主要是为了告诉大家，使用Fork/Join模型的正确方式，在源代码中可以看到，SumTask继承自RecursiveTask，重写的compute方法为：</p>\n<p>　　compute()方法使用了invokeAll方法来分解任务，而不是它下面的subtask1.fork();</p>\n<p>　　这两个方法，使用invokeAll方法的主要原因是为了充分利用线程池，在invokeAll的N个任务中，其中N-1个任务会使用fork()交给其它线程执行，但是，它还会留一个任务自己执行，这样，就充分利用了线程池，保证没有空闲的不干活的线程。</p>\n<p>　　若是采用另外一种方式来运行，程序的运行时间为6028毫秒，可以看到，明显比invokeAll方式慢了很多。</p>\n<h5 id=\"2-4-3-JDK8中的最佳实践\"><a href=\"#2-4-3-JDK8中的最佳实践\" class=\"headerlink\" title=\"2.4.3 JDK8中的最佳实践\"></a>2.4.3 JDK8中的最佳实践</h5><h5 id=\"2-4-3-1-通过forkjoin来看parallelStream\"><a href=\"#2-4-3-1-通过forkjoin来看parallelStream\" class=\"headerlink\" title=\"2.4.3.1 通过forkjoin来看parallelStream\"></a>2.4.3.1 通过forkjoin来看parallelStream</h5><p>在Java 8引入了自动并行化的概念。它能够让一部分Java代码自动地以并行的方式执行，即使用了ForkJoinPool的ParallelStream。　　</p>\n<p>　　Java 8为ForkJoinPool添加了一个通用线程池，这个线程池用来处理那些没有被显式提交到任何线程池的任务。它是ForkJoinPool类型上的一个静态元素，它拥有的默认线程数量等于运行计算机上的处理器数量。当调用Arrays类上添加的新方法时，自动并行化就会发生。比如用来排序一个数组的并行快速排序，用来对一个数组中的元素进行并行遍历。自动并行化也被运用在Java 8新添加的Stream API中。</p>\n<p>　　一般ForkJoinPool中的通用线程池处理，也可以使用ThreadPoolExecutor完成，但是就代码的可读性和代码量而言，使用ForkJoinPool明显更胜一筹。</p>\n<h5 id=\"2-4-3-2-线程池数量\"><a href=\"#2-4-3-2-线程池数量\" class=\"headerlink\" title=\"2.4.3.2 线程池数量\"></a>2.4.3.2 线程池数量</h5><p>​    <strong>1、系统CPU数量：[如机器8核，即8]</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Runtime.getRuntime().availableProcessors()</span><br></pre></td></tr></table></figure>\n\n<p>　　<strong>2、parallelStream默认的并发线程数:【parallelStream核心使用ForkJoinPool实现，故如下】【输出是7个】</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ForkJoinPool.getCommonPoolParallelism()</span><br></pre></td></tr></table></figure>\n\n<p>　　<strong>3、为什么parallelStream默认的并发线程数要比CPU处理器的数量少1个？</strong></p>\n<p>　　　　因为最优的策略是每个CPU处理器分配一个线程，然而主线程也算一个线程，所以要占一个名额。如果只有1个CPU，默认的并发线程数就是1</p>\n<p>　　<strong>4、修改默认并发数</strong></p>\n<p>　　　　默认的并发线程数不可以反复修改。因为<code>java.util.concurrent.ForkJoinPool.common.parallelism</code>是<code>final</code>类型的，整个JVM中只允许设置一次。多次修改以第一次为主</p>\n<p>　　　　1、系统property</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.setProperty(&quot;java.util.concurrent.ForkJoinPool.common.parallelism&quot;, &quot;20&quot;);</span><br><span class=\"line\">System.out.println(ForkJoinPool.getCommonPoolParallelism());</span><br></pre></td></tr></table></figure>\n\n<p>　　　　2、当然上述参数也可以通过jvm设置系统属性：-Djava.util.concurrent.ForkJoinPool.common.parallelism=N （N为线程数量）　　</p>\n<p>　　<strong>5、既然默认的并发线程数不能反复修改，进行不同线程数量的并发测试，可以引入<code>ForkJoinPool</code>。用法如下</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void testSetParallelMutli() throws ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">    int[] threadCountArr &#x3D; &#123;2, 4, 6&#125;;</span><br><span class=\"line\">    List&lt;Integer&gt; para &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; 7; i++) &#123;</span><br><span class=\"line\">        para.add(i);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (int threadCount : threadCountArr) &#123;</span><br><span class=\"line\">        new ForkJoinPool(threadCount).submit(() -&gt; &#123;&#x2F;&#x2F;多线程任务</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        &#125;).get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　　　使用get 是为了阻塞 得到结果；如果主线程没有关闭的情况下可以不用get</p>\n<h5 id=\"2-4-3-2-测试示例\"><a href=\"#2-4-3-2-测试示例\" class=\"headerlink\" title=\"2.4.3.2 测试示例\"></a>2.4.3.2 测试示例</h5><p><strong>实际应用示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger.info(<span class=\"string\">\"[消息补偿任务-并行执行]开始，本次预处理总数为[&#123;&#125;]\"</span>, list.size());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 手动扩容下,当然这个综合考虑使用</span></span><br><span class=\"line\">System.setProperty(DEFAULT_FORK_JOIN_PARALLELISM, (Runtime.getRuntime().availableProcessors() * appConfig.getMutiple()) + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 拆分任务到JobSender</span></span><br><span class=\"line\"><span class=\"comment\"> *  &#123;<span class=\"doctag\">@link</span> Stream#reduce(Object, BiFunction, BinaryOperator)&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *  &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *      reduce.Object --&gt; 初始值，只是为了来初始化参数类型</span></span><br><span class=\"line\"><span class=\"comment\"> *      reduce.BiFunction.apply(T t, U u) --&gt;  t表示当前值， u表示当前操作对象</span></span><br><span class=\"line\"><span class=\"comment\"> *      reduce.BinaryOperator(T t, U u) --&gt; t=u=初始值类型，用来合并结果的</span></span><br><span class=\"line\"><span class=\"comment\"> *  &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> total = list.parallelStream().filter(op -&gt; lockAdaptor.lock(op.getId(), LockAdaptor.DEFAULT_TIMEOUT)).reduce(<span class=\"number\">0</span>, (cur, channel) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构建发送器 + 并处理</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ava;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ava = (jobSenderFactory.getSender(channel).process().dealSuccess() ? <span class=\"number\">1</span> : <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 解锁</span></span><br><span class=\"line\">        lockAdaptor.unlock(channel.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cur + ava;</span><br><span class=\"line\">&#125;, (a, b) -&gt; a + b);</span><br><span class=\"line\">logger.info(<span class=\"string\">\"[消息补偿任务-并行执行]结束，本次预处理总数为[&#123;&#125;]， 成功总数[&#123;&#125;], 未成功总数[&#123;&#125;]\"</span>, list.size(), total, list.size() - total);</span><br></pre></td></tr></table></figure>\n\n<p>1、测试一、8核机器，每个任务均耗时2秒，一共16个任务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void testSetParallelMutli2() throws ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">    List&lt;Integer&gt; para &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; 16; i++) &#123;</span><br><span class=\"line\">        para.add(i);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    para.parallelStream().forEach(i -&gt; &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Thread.sleep(2000);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(LocalDateTime.now() + &quot;||&quot; + Thread.currentThread().getName() + &quot;:&quot; + i);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-1:5</span><br><span class=\"line\">2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-6:1</span><br><span class=\"line\">2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-2:14</span><br><span class=\"line\">2019-09-13T10:51:04.344||main:10</span><br><span class=\"line\">2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-4:13</span><br><span class=\"line\">2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-3:2</span><br><span class=\"line\">2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-7:4</span><br><span class=\"line\">2019-09-13T10:51:04.344||ForkJoinPool.commonPool-worker-5:7</span><br><span class=\"line\">2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-4:3</span><br><span class=\"line\">2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-6:0</span><br><span class=\"line\">2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-1:12</span><br><span class=\"line\">2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-2:15</span><br><span class=\"line\">2019-09-13T10:51:06.350||main:11</span><br><span class=\"line\">2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-5:8</span><br><span class=\"line\">2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-3:6</span><br><span class=\"line\">2019-09-13T10:51:06.350||ForkJoinPool.commonPool-worker-7:9</span><br></pre></td></tr></table></figure>\n\n<p>　　结论：会有7个 ForkJoinPool.commonPool-worker 线程和1个主线程main一起执行任务。并且8个一组一组执行，每个线程执行了两个任务。</p>\n<p>2、测试二、8核机器，每个任务耗时2秒内随机，一共16个任务 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testSetParallelMutli2() throws ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; para &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; 16; i++) &#123;</span><br><span class=\"line\">            para.add(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        para.parallelStream().forEach(i -&gt; &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">&#x2F;&#x2F;                Thread.sleep(2000);</span><br><span class=\"line\">                Thread.sleep(new Random().nextInt(2000));</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(LocalDateTime.now() + &quot;||&quot; + Thread.currentThread().getName() + &quot;:&quot; + i);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-09-13T10:54:01.486||ForkJoinPool.commonPool-worker-5:7</span><br><span class=\"line\">2019-09-13T10:54:01.751||main:10</span><br><span class=\"line\">2019-09-13T10:54:01.774||main:11</span><br><span class=\"line\">2019-09-13T10:54:01.862||ForkJoinPool.commonPool-worker-5:6</span><br><span class=\"line\">2019-09-13T10:54:02.203||ForkJoinPool.commonPool-worker-5:15</span><br><span class=\"line\">2019-09-13T10:54:02.285||ForkJoinPool.commonPool-worker-6:1</span><br><span class=\"line\">2019-09-13T10:54:02.407||ForkJoinPool.commonPool-worker-6:0</span><br><span class=\"line\">2019-09-13T10:54:02.479||ForkJoinPool.commonPool-worker-1:5</span><br><span class=\"line\">2019-09-13T10:54:02.496||ForkJoinPool.commonPool-worker-2:14</span><br><span class=\"line\">2019-09-13T10:54:02.518||ForkJoinPool.commonPool-worker-4:13</span><br><span class=\"line\">2019-09-13T10:54:02.732||main:9</span><br><span class=\"line\">2019-09-13T10:54:02.740||ForkJoinPool.commonPool-worker-7:4</span><br><span class=\"line\">2019-09-13T10:54:02.791||ForkJoinPool.commonPool-worker-3:2</span><br><span class=\"line\">2019-09-13T10:54:03.178||ForkJoinPool.commonPool-worker-5:12</span><br><span class=\"line\">2019-09-13T10:54:03.743||ForkJoinPool.commonPool-worker-1:8</span><br><span class=\"line\">2019-09-13T10:54:04.003||ForkJoinPool.commonPool-worker-6:3</span><br></pre></td></tr></table></figure>\n\n<p>　　结论：会有7个 ForkJoinPool.commonPool-worker 线程和1个主线程main一起执行任务。并且是强占式【工作窃取法】的执行任务：如上线程5、主线程执行了各3个任务，其他有2个或一个的。</p>\n<p>3、示例三、接收消息队列消息，每次消息个数n个，每个消息是一个100个的list<String>,接收时候使用parallelStream消费并发处理</p>\n<p>发送消息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void testMq() throws Exception &#123;</span><br><span class=\"line\">    for (int j &#x3D; 0; j &lt; 1; j++) &#123;</span><br><span class=\"line\">        List&lt;String&gt; list &#x3D; Lists.newArrayList();</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; 100; i++) &#123;</span><br><span class=\"line\">            list.add(j+&quot;___________&quot;+i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        producerMessageService.sendMessage(&quot;test_parallel&quot;, UUID.randomUUID().toString(), JSON.toJSONString(list));</span><br><span class=\"line\">        Thread.sleep(1000);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    logger.error(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;生产 ok&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    Thread.sleep(2000000000);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接收消费</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public void onMessage(List&lt;Message&gt; messages) throws Exception &#123;</span><br><span class=\"line\">    if (messages &#x3D;&#x3D; null || messages.isEmpty()) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; messages.size(); i++) &#123;</span><br><span class=\"line\">        Message message &#x3D; messages.get(i);</span><br><span class=\"line\">        logger.info(String.format(&quot;收到一条消息,消息主题（队列名）：%s,内容是：%s&quot;, message.getTopic(), message.getText()));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;String&gt; strings &#x3D; JSONArray.parseArray(message.getText(), String.class);</span><br><span class=\"line\">        strings.parallelStream().forEach(p -&gt; &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Thread.sleep(2000);</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            logger.error(LocalDateTime.now() + &quot;_______________&quot; + Thread.currentThread().getName() + &quot;:&quot; + p);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　说明：</p>\n<p>　　　　发送消息，1s后会发送完毕，此时如果有订阅就会出现一条消息积压。</p>\n<p>　　　　订阅消息者，订阅后会收到词条消息，此时如果正常执行完毕（不论使用不使用多线程）消息积压就没有了，因为一般消息监听会在方法正常执行完毕后，使用消息Id将此条消息从订阅队列中移除。</p>\n<p>　　　　　　接收到1条消息，里面会有一个jsonstring，反序列化为List，大小是100，交给parallelStream处理，此时会有8个线程处理【如果是8核机器】，处理速度大约是2秒8个。其余的92进入workQueue中等待处理。</p>\n<p>　　　　　　此时如果程序中断，订阅的消息不会被消费使用，下次重连时，需要做已处理消息的去重。</p>\n<p>　　　　　　此时如果有新消息发送过来，也会在积压中，不会被消息消费。</p>\n<p> 4、示例四、从a中100个数找出整除5的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void testExec() throws ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">    List&lt;Integer&gt; a &#x3D; Lists.newArrayList();</span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; 100; i++) &#123;</span><br><span class=\"line\">        a.add(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    List&lt;Integer&gt; b &#x3D; Lists.newArrayList();</span><br><span class=\"line\">    a.parallelStream().forEach(p -&gt; &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Thread.sleep(100);</span><br><span class=\"line\">        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (p % 5 &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">            b.add(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;+b.size());</span><br><span class=\"line\">    b.forEach(p -&gt; System.out.print(p+&quot; &quot;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：正确应该是20</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;18</span><br><span class=\"line\">15 90 45 30 25 35 85 75 0 40 5 80 95 20 60 70 50 55</span><br></pre></td></tr></table></figure>\n\n\n\n<p>对此运行结果不一致，以及会有多线程问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.ArrayIndexOutOfBoundsException</span><br><span class=\"line\">    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class=\"line\">　　……</span><br><span class=\"line\"></span><br><span class=\"line\">Caused by: java.lang.ArrayIndexOutOfBoundsException: 15</span><br><span class=\"line\">    at java.util.ArrayList.add(ArrayList.java:463)</span><br><span class=\"line\">    at com.github.bjlhx15.common.thread.juc.collection.jdk8stream.TStreamTest.lambda$testExec$6(TStreamTest.java:118)</span><br><span class=\"line\">    at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)</span><br><span class=\"line\">    at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)</span><br><span class=\"line\">    at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)</span><br><span class=\"line\">    at java.util.stream.ForEachOps$ForEachTask.compute(ForEachOps.java:291)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>原因：parallelStream 并行执行，多线程异步，可能没有b添加完毕就遍历，ArrayList不是线程安全的</p>\n<p>修正：</p>\n<p>　　方案一、在遍历前，需全部执行完毕【串行】</p>\n<p>　　　　将 parallelStream 改为 stream串行处理【不可取，处理速度慢】</p>\n<p>　　方案二、在遍历前，需全部执行完毕</p>\n<p>　　　　继承 RecursiveTask或者RecursiveAction写任务　　　　</p>\n<p>　　方案三、将ArrayList替换安全集合CopyOnWriteArrayLIst</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; b &#x3D; Lists.newCopyOnWriteArrayList();</span><br></pre></td></tr></table></figure>\n\n<p>　　　　此时运行就会出现正确结果。按理说应该会有结果不准确问题吧。但是没有，个人理解，因为是每次8个同时执行，所以即使最后一次主线程提前结束，也有其他线程在锁着b，所以最后执行b的操作会有等待</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckai0vmv10004a4ja4gz63zul","category_id":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmvg000ma4ja24cx5jyk"},{"post_id":"ckai0vmuz0003a4ja03eg2691","category_id":"ckai0vmv30005a4ja0thif37o","_id":"ckai0vmvq0011a4ja3akl5toj"},{"post_id":"ckai0vmuz0003a4ja03eg2691","category_id":"ckai0vmvj000ra4jad4ty2qgx","_id":"ckai0vmvt0014a4ja7mqacor9"},{"post_id":"ckai0vmva000da4jacd71de37","category_id":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmw1001da4ja985g82ir"},{"post_id":"ckai0vmva000da4jacd71de37","category_id":"ckai0vmvq0010a4jaczftbqox","_id":"ckai0vmw2001ga4ja76yl49jz"},{"post_id":"ckai0vmvb000ea4jaekhsbp9r","category_id":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmw2001ha4ja7g0602j0"},{"post_id":"ckai0vmvb000ea4jaekhsbp9r","category_id":"ckai0vmvu0018a4ja7jrtbijh","_id":"ckai0vmw3001ka4ja6dcp2hyd"},{"post_id":"ckai0vmv70007a4ja2djm515c","category_id":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmw4001la4jaabwo71qg"},{"post_id":"ckai0vmv70007a4ja2djm515c","category_id":"ckai0vmw1001ea4ja2v2g5qq3","_id":"ckai0vmw5001oa4ja8aprdyon"},{"post_id":"ckai0vmvf000ka4jagdze0ehv","category_id":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmw6001ra4jagj784xn0"},{"post_id":"ckai0vmvf000ka4jagdze0ehv","category_id":"ckai0vmw2001ia4ja1o8z5ilv","_id":"ckai0vmw7001va4ja7vrq25xw"},{"post_id":"ckai0vmvg000oa4ja96x22c94","category_id":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmw9001xa4ja2ryv1zk5"},{"post_id":"ckai0vmvg000oa4ja96x22c94","category_id":"ckai0vmw4001ma4jaey7q7xrf","_id":"ckai0vmw90020a4ja3pdrefyi"},{"post_id":"ckai0vmv80008a4jaante7q1v","category_id":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmwa0021a4ja9x97h3uq"},{"post_id":"ckai0vmv80008a4jaante7q1v","category_id":"ckai0vmw6001sa4jafj7t7oak","_id":"ckai0vmwb0024a4ja5ve9c4an"},{"post_id":"ckai0vmv90009a4ja83a46125","category_id":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmwf002ia4ja4s29hfuy"},{"post_id":"ckai0vmv90009a4ja83a46125","category_id":"ckai0vmwd002da4ja8lrkaabx","_id":"ckai0vmwg002la4ja9lh05evr"},{"post_id":"ckai0vmvi000qa4ja489e69wt","category_id":"ckai0vmw9001ya4ja3jqy7psy","_id":"ckai0vmwm0036a4jadba1bml4"},{"post_id":"ckai0vmvi000qa4ja489e69wt","category_id":"ckai0vmwk002ya4ja1ooudzzt","_id":"ckai0vmwn0039a4ja4o5be5fr"},{"post_id":"ckai0vmvl000ua4jaa76i214q","category_id":"ckai0vmwa0022a4ja68khfxnr","_id":"ckai0vmwn003ba4jaeqmv5gtb"},{"post_id":"ckai0vmvl000ua4jaa76i214q","category_id":"ckai0vmwl0033a4ja7deihtd4","_id":"ckai0vmwo003ea4ja915lgntu"},{"post_id":"ckai0vmvn000va4jaeqla8lbc","category_id":"ckai0vmwb0025a4jaa4p223cz","_id":"ckai0vmwo003ga4jafp9n81g6"},{"post_id":"ckai0vmvn000va4jaeqla8lbc","category_id":"ckai0vmwm0037a4ja86qvduxy","_id":"ckai0vmwo003ja4ja6gvc60kv"},{"post_id":"ckai0vmvo000ya4ja6ebpbliu","category_id":"ckai0vmwc0029a4ja42fc6hsp","_id":"ckai0vmwp003la4ja9vol0qiq"},{"post_id":"ckai0vmvo000ya4ja6ebpbliu","category_id":"ckai0vmwn003ca4jafv1sh4vz","_id":"ckai0vmwp003oa4ja6q041nes"},{"post_id":"ckai0vmvp000za4ja4qak09ac","category_id":"ckai0vmwf002ga4ja2vsh7l8w","_id":"ckai0vmwq003qa4ja3kww8fkf"},{"post_id":"ckai0vmvp000za4ja4qak09ac","category_id":"ckai0vmwo003ha4ja594z9e98","_id":"ckai0vmwq003sa4jado4498xw"},{"post_id":"ckai0vmvr0013a4jacgok27jg","category_id":"ckai0vmwg002ja4jadr5d6jfd","_id":"ckai0vmwr003ua4ja97wchpkw"},{"post_id":"ckai0vmvr0013a4jacgok27jg","category_id":"ckai0vmwp003ma4jabw0t5oiw","_id":"ckai0vmwr003wa4jagfc110hu"},{"post_id":"ckai0vmvt0016a4ja47iw0ton","category_id":"ckai0vmwg002ma4ja18l94k8r","_id":"ckai0vmwr003xa4jadm6ibp5v"},{"post_id":"ckai0vmvt0016a4ja47iw0ton","category_id":"ckai0vmwq003ra4ja14gie8h3","_id":"ckai0vmws003za4ja86x22cqp"},{"post_id":"ckai0vmvz001aa4ja6f5549le","category_id":"ckai0vmwi002qa4ja3dwcce5y","_id":"ckai0vmws0040a4ja8seefvuy"},{"post_id":"ckai0vmvz001aa4ja6f5549le","category_id":"ckai0vmwr003va4jacob9cwg9","_id":"ckai0vmws0041a4ja3vqm2khe"},{"post_id":"ckai0vmw0001ca4ja3757gsrp","category_id":"ckai0vmwj002ua4ja0wc4aotm","_id":"ckai0vmwt0042a4jagdwv45ha"},{"post_id":"ckai0vmw0001ca4ja3757gsrp","category_id":"ckai0vmws003ya4jahbzdh05c","_id":"ckai0vmwt0043a4jacs6tavn0"},{"post_id":"ckai0vmx40045a4jaceqs4ge4","category_id":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmxa004ia4jadmxog69v"},{"post_id":"ckai0vmx40045a4jaceqs4ge4","category_id":"ckai0vmx8004ba4jacyno8hz3","_id":"ckai0vmxb004ja4jacbfagwc9"},{"post_id":"ckai0vmx30044a4ja3c8242uj","category_id":"ckai0vmx40046a4ja529zcwll","_id":"ckai0vmxb004la4jahgdz32gq"},{"post_id":"ckai0vmx30044a4ja3c8242uj","category_id":"ckai0vmxa004ha4jad33nhpgp","_id":"ckai0vmxb004ma4ja1quk0j9i"},{"post_id":"ckai0vmx50048a4ja6ej555oj","category_id":"ckai0vmx40046a4ja529zcwll","_id":"ckai0vmxb004na4ja4c4e0acy"},{"post_id":"ckai0vmx50048a4ja6ej555oj","category_id":"ckai0vmxb004ka4jac05kbxe4","_id":"ckai0vmxb004oa4ja3kiu4jxp"},{"post_id":"ckai0vmxe004pa4ja2bqga4t7","category_id":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmxi004ua4jaaqtv4ov1"},{"post_id":"ckai0vmxe004pa4ja2bqga4t7","category_id":"ckai0vmw6001sa4jafj7t7oak","_id":"ckai0vmxi004wa4jabezcbqm6"},{"post_id":"ckai0vmxf004qa4ja9d9o87w9","category_id":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmxj004za4jag3l922yg"},{"post_id":"ckai0vmxf004qa4ja9d9o87w9","category_id":"ckai0vmxi004ta4ja53n5ccgj","_id":"ckai0vmxj0050a4ja79vu0zpf"},{"post_id":"ckai0vmxn0051a4jaah1tfarj","category_id":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmxr0058a4jacfmnb8kk"},{"post_id":"ckai0vmxn0051a4jaah1tfarj","category_id":"ckai0vmw4001ma4jaey7q7xrf","_id":"ckai0vmxr005aa4jahwuu5oq3"},{"post_id":"ckai0vmxn0051a4jaah1tfarj","category_id":"ckai0vmxo0053a4ja4bww1go4","_id":"ckai0vmxr005ca4ja5seu4ryz"},{"post_id":"ckai0vmxn0051a4jaah1tfarj","category_id":"ckai0vmxq0055a4jabfhu6hdp","_id":"ckai0vmxr005ea4jafak35kuk"},{"post_id":"ckai0vmxt005fa4ja8emga0in","category_id":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmy0005na4ja5aat7qla"},{"post_id":"ckai0vmxt005fa4ja8emga0in","category_id":"ckai0vmxx005ia4jagsnl413t","_id":"ckai0vmy0005pa4ja6qss7o0w"},{"post_id":"ckai0vmxv005ga4ja89aa20t2","category_id":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmy1005ua4jahxa88m9u"},{"post_id":"ckai0vmxv005ga4ja89aa20t2","category_id":"ckai0vmxz005ka4ja5zn8997a","_id":"ckai0vmy2005va4jaf7c3fugt"},{"post_id":"ckai0vmxv005ga4ja89aa20t2","category_id":"ckai0vmy0005qa4jacsnwgcoa","_id":"ckai0vmy2005wa4jaenj27txn"},{"post_id":"ckai0vmy5005xa4ja2m7k8ru9","category_id":"ckai0vmv9000aa4jaadgc23jg","_id":"ckai0vmy80064a4jadamm4tjw"},{"post_id":"ckai0vmy5005xa4ja2m7k8ru9","category_id":"ckai0vmw2001ia4ja1o8z5ilv","_id":"ckai0vmya0066a4ja8l1b8vl7"},{"post_id":"ckai0vmy5005xa4ja2m7k8ru9","category_id":"ckai0vmy6005za4jaga6s2acv","_id":"ckai0vmya0067a4ja28jd9vcs"}],"PostTag":[{"post_id":"ckai0vmuz0003a4ja03eg2691","tag_id":"ckai0vmv60006a4jadywt7evy","_id":"ckai0vmva000ca4ja4ttp43c9"},{"post_id":"ckai0vmva000da4jacd71de37","tag_id":"ckai0vmva000ba4ja6emw4sb4","_id":"ckai0vmvd000ha4jaei9papvk"},{"post_id":"ckai0vmv10004a4ja4gz63zul","tag_id":"ckai0vmva000ba4ja6emw4sb4","_id":"ckai0vmvf000ja4ja9llrecju"},{"post_id":"ckai0vmv70007a4ja2djm515c","tag_id":"ckai0vmva000ba4ja6emw4sb4","_id":"ckai0vmvh000pa4ja765z054b"},{"post_id":"ckai0vmvg000oa4ja96x22c94","tag_id":"ckai0vmva000ba4ja6emw4sb4","_id":"ckai0vmvk000ta4ja5kzf80g9"},{"post_id":"ckai0vmv80008a4jaante7q1v","tag_id":"ckai0vmva000ba4ja6emw4sb4","_id":"ckai0vmvt0015a4jad6br1ght"},{"post_id":"ckai0vmv80008a4jaante7q1v","tag_id":"ckai0vmvk000sa4jag8zmh2d2","_id":"ckai0vmvu0017a4ja24f4ajui"},{"post_id":"ckai0vmv80008a4jaante7q1v","tag_id":"ckai0vmvo000xa4ja2zakckb6","_id":"ckai0vmw0001ba4ja702t2aj0"},{"post_id":"ckai0vmv90009a4ja83a46125","tag_id":"ckai0vmva000ba4ja6emw4sb4","_id":"ckai0vmw5001pa4jabskwe684"},{"post_id":"ckai0vmv90009a4ja83a46125","tag_id":"ckai0vmvy0019a4ja467ef2kx","_id":"ckai0vmw5001qa4ja43i9bws9"},{"post_id":"ckai0vmv90009a4ja83a46125","tag_id":"ckai0vmw2001fa4jabew32oqo","_id":"ckai0vmw7001ua4ja1o5tf6nq"},{"post_id":"ckai0vmv90009a4ja83a46125","tag_id":"ckai0vmw3001ja4jab0blfilb","_id":"ckai0vmw8001wa4jae6rr85ju"},{"post_id":"ckai0vmvb000ea4jaekhsbp9r","tag_id":"ckai0vmva000ba4ja6emw4sb4","_id":"ckai0vmwc0027a4jaeawycvpx"},{"post_id":"ckai0vmvb000ea4jaekhsbp9r","tag_id":"ckai0vmw4001na4jadmv745u9","_id":"ckai0vmwc0028a4ja4zc9g8mt"},{"post_id":"ckai0vmvb000ea4jaekhsbp9r","tag_id":"ckai0vmw6001ta4ja2l2vfgx6","_id":"ckai0vmwd002ba4ja78t28jog"},{"post_id":"ckai0vmvb000ea4jaekhsbp9r","tag_id":"ckai0vmw9001za4ja943v6yqh","_id":"ckai0vmwd002ca4ja3v5ydx7t"},{"post_id":"ckai0vmvb000ea4jaekhsbp9r","tag_id":"ckai0vmwa0023a4ja5o5e7sas","_id":"ckai0vmwe002fa4jaabcb0k1h"},{"post_id":"ckai0vmvf000ka4jagdze0ehv","tag_id":"ckai0vmva000ba4ja6emw4sb4","_id":"ckai0vmwi002oa4jae9f70grq"},{"post_id":"ckai0vmvf000ka4jagdze0ehv","tag_id":"ckai0vmwb0026a4ja7yxac5i0","_id":"ckai0vmwi002pa4jadfddhqk1"},{"post_id":"ckai0vmvf000ka4jagdze0ehv","tag_id":"ckai0vmwd002aa4ja1kug18h5","_id":"ckai0vmwj002sa4jagxjc9097"},{"post_id":"ckai0vmvf000ka4jagdze0ehv","tag_id":"ckai0vmwe002ea4ja3iv6ehtj","_id":"ckai0vmwj002ta4jaem76efli"},{"post_id":"ckai0vmvf000ka4jagdze0ehv","tag_id":"ckai0vmwf002ha4ja17b0czf6","_id":"ckai0vmwj002wa4jad7isbfvl"},{"post_id":"ckai0vmvf000ka4jagdze0ehv","tag_id":"ckai0vmwg002ka4ja7p8u91uy","_id":"ckai0vmwj002xa4ja28m2522b"},{"post_id":"ckai0vmvi000qa4ja489e69wt","tag_id":"ckai0vmwh002na4jage5g8nvn","_id":"ckai0vmwk0030a4jah4po1j0l"},{"post_id":"ckai0vmvl000ua4jaa76i214q","tag_id":"ckai0vmwi002ra4ja34k57b9t","_id":"ckai0vmwl0031a4jaey6ra6xi"},{"post_id":"ckai0vmvn000va4jaeqla8lbc","tag_id":"ckai0vmwj002va4jafuixeti0","_id":"ckai0vmwl0032a4jaesd55sb8"},{"post_id":"ckai0vmvo000ya4ja6ebpbliu","tag_id":"ckai0vmwk002za4jabttscsvm","_id":"ckai0vmwm0035a4ja589z5mte"},{"post_id":"ckai0vmvp000za4ja4qak09ac","tag_id":"ckai0vmwl0034a4ja3b6c49so","_id":"ckai0vmwn003aa4jadiuwh4d3"},{"post_id":"ckai0vmvr0013a4jacgok27jg","tag_id":"ckai0vmwn0038a4jagvbne09v","_id":"ckai0vmwo003fa4jaf94p3smz"},{"post_id":"ckai0vmvt0016a4ja47iw0ton","tag_id":"ckai0vmwn003da4ja515wcfda","_id":"ckai0vmwp003ka4ja8fuzg22m"},{"post_id":"ckai0vmvz001aa4ja6f5549le","tag_id":"ckai0vmwo003ia4jae7r4g0mn","_id":"ckai0vmwp003pa4ja03lbbtg1"},{"post_id":"ckai0vmw0001ca4ja3757gsrp","tag_id":"ckai0vmwp003na4ja8mx90iou","_id":"ckai0vmwq003ta4ja5pch98pv"},{"post_id":"ckai0vmx40045a4jaceqs4ge4","tag_id":"ckai0vmva000ba4ja6emw4sb4","_id":"ckai0vmx60049a4ja4q4gd1bh"},{"post_id":"ckai0vmx40045a4jaceqs4ge4","tag_id":"ckai0vmvk000sa4jag8zmh2d2","_id":"ckai0vmx7004aa4jafrpga8o0"},{"post_id":"ckai0vmx40045a4jaceqs4ge4","tag_id":"ckai0vmvo000xa4ja2zakckb6","_id":"ckai0vmx9004da4jacprucxhg"},{"post_id":"ckai0vmx30044a4ja3c8242uj","tag_id":"ckai0vmx50047a4jaei2628bn","_id":"ckai0vmx9004ea4ja5xu0evxc"},{"post_id":"ckai0vmx50048a4ja6ej555oj","tag_id":"ckai0vmx50047a4jaei2628bn","_id":"ckai0vmxa004ga4jadobm5871"},{"post_id":"ckai0vmxe004pa4ja2bqga4t7","tag_id":"ckai0vmva000ba4ja6emw4sb4","_id":"ckai0vmxh004ra4ja2es945vb"},{"post_id":"ckai0vmxe004pa4ja2bqga4t7","tag_id":"ckai0vmvk000sa4jag8zmh2d2","_id":"ckai0vmxi004sa4ja46nodnib"},{"post_id":"ckai0vmxe004pa4ja2bqga4t7","tag_id":"ckai0vmvo000xa4ja2zakckb6","_id":"ckai0vmxi004va4ja8a72ermr"},{"post_id":"ckai0vmxf004qa4ja9d9o87w9","tag_id":"ckai0vmva000ba4ja6emw4sb4","_id":"ckai0vmxj004xa4ja1eybfjv9"},{"post_id":"ckai0vmxf004qa4ja9d9o87w9","tag_id":"ckai0vmwg002ka4ja7p8u91uy","_id":"ckai0vmxj004ya4ja63sk8inn"},{"post_id":"ckai0vmxn0051a4jaah1tfarj","tag_id":"ckai0vmva000ba4ja6emw4sb4","_id":"ckai0vmxr0057a4jacippdzyw"},{"post_id":"ckai0vmxn0051a4jaah1tfarj","tag_id":"ckai0vmxo0052a4ja06il9yy0","_id":"ckai0vmxr0059a4jagvwwbew5"},{"post_id":"ckai0vmxn0051a4jaah1tfarj","tag_id":"ckai0vmxp0054a4ja8yvw4yai","_id":"ckai0vmxr005ba4ja5uzbfsbi"},{"post_id":"ckai0vmxn0051a4jaah1tfarj","tag_id":"ckai0vmxq0056a4ja0skx51wv","_id":"ckai0vmxr005da4jad8ghco2k"},{"post_id":"ckai0vmxt005fa4ja8emga0in","tag_id":"ckai0vmva000ba4ja6emw4sb4","_id":"ckai0vmxz005la4ja30z273o9"},{"post_id":"ckai0vmxt005fa4ja8emga0in","tag_id":"ckai0vmxw005ha4jahgkv5hqv","_id":"ckai0vmy0005ma4ja0qtacjmu"},{"post_id":"ckai0vmxv005ga4ja89aa20t2","tag_id":"ckai0vmva000ba4ja6emw4sb4","_id":"ckai0vmy1005ra4jacprv642q"},{"post_id":"ckai0vmxv005ga4ja89aa20t2","tag_id":"ckai0vmxz005ja4jadjyo07ed","_id":"ckai0vmy1005sa4jaed71hdko"},{"post_id":"ckai0vmxv005ga4ja89aa20t2","tag_id":"ckai0vmy0005oa4ja6mcfd4he","_id":"ckai0vmy1005ta4jagmb8a0l9"},{"post_id":"ckai0vmy5005xa4ja2m7k8ru9","tag_id":"ckai0vmva000ba4ja6emw4sb4","_id":"ckai0vmy6005ya4ja7nvcf0h7"},{"post_id":"ckai0vmy5005xa4ja2m7k8ru9","tag_id":"ckai0vmwb0026a4ja7yxac5i0","_id":"ckai0vmy70060a4ja31wbg1ik"},{"post_id":"ckai0vmy5005xa4ja2m7k8ru9","tag_id":"ckai0vmwd002aa4ja1kug18h5","_id":"ckai0vmy70061a4ja420117ku"},{"post_id":"ckai0vmy5005xa4ja2m7k8ru9","tag_id":"ckai0vmwe002ea4ja3iv6ehtj","_id":"ckai0vmy70062a4jaheosetrj"},{"post_id":"ckai0vmy5005xa4ja2m7k8ru9","tag_id":"ckai0vmwf002ha4ja17b0czf6","_id":"ckai0vmy70063a4jaa0pn4pbu"},{"post_id":"ckai0vmy5005xa4ja2m7k8ru9","tag_id":"ckai0vmwg002ka4ja7p8u91uy","_id":"ckai0vmya0065a4ja793g0rgg"}],"Tag":[{"name":"区块链","_id":"ckai0vmv60006a4jadywt7evy"},{"name":"java","_id":"ckai0vmva000ba4ja6emw4sb4"},{"name":"io","_id":"ckai0vmvk000sa4jag8zmh2d2"},{"name":"nio","_id":"ckai0vmvo000xa4ja2zakckb6"},{"name":"jdk8","_id":"ckai0vmvy0019a4ja467ef2kx"},{"name":"lambda","_id":"ckai0vmw2001fa4jabew32oqo"},{"name":"function/函数式编程","_id":"ckai0vmw3001ja4jab0blfilb"},{"name":"proxy","_id":"ckai0vmw4001na4jadmv745u9"},{"name":"javassist","_id":"ckai0vmw6001ta4ja2l2vfgx6"},{"name":"jdk 动态代理","_id":"ckai0vmw9001za4ja943v6yqh"},{"name":"cglib 动态代理","_id":"ckai0vmwa0023a4ja5o5e7sas"},{"name":"thread","_id":"ckai0vmwb0026a4ja7yxac5i0"},{"name":"synchronized/lock","_id":"ckai0vmwd002aa4ja1kug18h5"},{"name":"ThreadPoolExecutor","_id":"ckai0vmwe002ea4ja3iv6ehtj"},{"name":"fork/join","_id":"ckai0vmwf002ha4ja17b0czf6"},{"name":"schedule","_id":"ckai0vmwg002ka4ja7p8u91uy"},{"name":"linux","_id":"ckai0vmwh002na4jage5g8nvn"},{"name":"分布式与微服务","_id":"ckai0vmwi002ra4ja34k57b9t"},{"name":"中间件","_id":"ckai0vmwj002va4jafuixeti0"},{"name":"ORM","_id":"ckai0vmwk002za4jabttscsvm"},{"name":"数据结构与算法","_id":"ckai0vmwl0034a4ja3b6c49so"},{"name":"数据库","_id":"ckai0vmwn0038a4jagvbne09v"},{"name":"包管理","_id":"ckai0vmwn003da4ja515wcfda"},{"name":"服务器","_id":"ckai0vmwo003ia4jae7r4g0mn"},{"name":"spring","_id":"ckai0vmwp003na4ja8mx90iou"},{"name":"项目","_id":"ckai0vmx50047a4jaei2628bn"},{"name":"collection","_id":"ckai0vmxo0052a4ja06il9yy0"},{"name":"disruptor","_id":"ckai0vmxp0054a4ja8yvw4yai"},{"name":"队列","_id":"ckai0vmxq0056a4ja0skx51wv"},{"name":"thread-pool","_id":"ckai0vmxw005ha4jahgkv5hqv"},{"name":"concurrent","_id":"ckai0vmxz005ja4jadjyo07ed"},{"name":"AQS","_id":"ckai0vmy0005oa4ja6mcfd4he"}]}}